//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import SideMenu
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 16 files.
  struct file {
    /// Resource file `29LT-Kaff-Black.otf`.
    static let ltKaffBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "29LT-Kaff-Black", pathExtension: "otf")
    /// Resource file `29LT-Kaff-Regular.otf`.
    static let ltKaffRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "29LT-Kaff-Regular", pathExtension: "otf")
    /// Resource file `29LT-Kaff-Semi-Bold.otf`.
    static let ltKaffSemiBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "29LT-Kaff-Semi-Bold", pathExtension: "otf")
    /// Resource file `29LT-Kaff-Ultra-Light.otf`.
    static let ltKaffUltraLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "29LT-Kaff-Ultra-Light", pathExtension: "otf")
    /// Resource file `MBC.entitlements`.
    static let mbcEntitlements = Rswift.FileResource(bundle: R.hostingBundle, name: "MBC", pathExtension: "entitlements")
    /// Resource file `TagManagerResources.bundle`.
    static let tagManagerResourcesBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "TagManagerResources", pathExtension: "bundle")
    /// Resource file `TeadsSDKResources.bundle`.
    static let teadsSDKResourcesBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "TeadsSDKResources", pathExtension: "bundle")
    /// Resource file `about.html`.
    static let aboutHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "about", pathExtension: "html")
    /// Resource file `container`.
    static let container = Rswift.FileResource(bundle: R.hostingBundle, name: "container", pathExtension: "")
    /// Resource file `customTheo.js`.
    static let customTheoJs = Rswift.FileResource(bundle: R.hostingBundle, name: "customTheo", pathExtension: "js")
    /// Resource file `jquery-3.3.1.min.js`.
    static let jquery331MinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery-3.3.1.min", pathExtension: "js")
    /// Resource file `jquery-ui.min.js`.
    static let jqueryUiMinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery-ui.min", pathExtension: "js")
    /// Resource file `jquery.simulate.js`.
    static let jquerySimulateJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery.simulate", pathExtension: "js")
    /// Resource file `privacy.html`.
    static let privacyHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "privacy", pathExtension: "html")
    /// Resource file `staticpagestyle.css`.
    static let staticpagestyleCss = Rswift.FileResource(bundle: R.hostingBundle, name: "staticpagestyle", pathExtension: "css")
    /// Resource file `tos.html`.
    static let tosHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "tos", pathExtension: "html")
    
    /// `bundle.url(forResource: "29LT-Kaff-Black", withExtension: "otf")`
    static func ltKaffBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ltKaffBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "29LT-Kaff-Regular", withExtension: "otf")`
    static func ltKaffRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ltKaffRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "29LT-Kaff-Semi-Bold", withExtension: "otf")`
    static func ltKaffSemiBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ltKaffSemiBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "29LT-Kaff-Ultra-Light", withExtension: "otf")`
    static func ltKaffUltraLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ltKaffUltraLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MBC", withExtension: "entitlements")`
    static func mbcEntitlements(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mbcEntitlements
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TagManagerResources", withExtension: "bundle")`
    static func tagManagerResourcesBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tagManagerResourcesBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TeadsSDKResources", withExtension: "bundle")`
    static func teadsSDKResourcesBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.teadsSDKResourcesBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "about", withExtension: "html")`
    static func aboutHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aboutHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "container", withExtension: "")`
    static func container(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.container
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "customTheo", withExtension: "js")`
    static func customTheoJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.customTheoJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "jquery-3.3.1.min", withExtension: "js")`
    static func jquery331MinJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jquery331MinJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "jquery-ui.min", withExtension: "js")`
    static func jqueryUiMinJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jqueryUiMinJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "jquery.simulate", withExtension: "js")`
    static func jquerySimulateJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jquerySimulateJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "privacy", withExtension: "html")`
    static func privacyHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privacyHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "staticpagestyle", withExtension: "css")`
    static func staticpagestyleCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.staticpagestyleCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "tos", withExtension: "html")`
    static func tosHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tosHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `29LTKaff-Black`.
    static let ltKaffBlack = Rswift.FontResource(fontName: "29LTKaff-Black")
    /// Font `29LTKaff-Regular`.
    static let ltKaffRegular = Rswift.FontResource(fontName: "29LTKaff-Regular")
    /// Font `29LTKaff-SemiBold`.
    static let ltKaffSemiBold = Rswift.FontResource(fontName: "29LTKaff-SemiBold")
    /// Font `29LTKaff-UltraLight`.
    static let ltKaffUltraLight = Rswift.FontResource(fontName: "29LTKaff-UltraLight")
    
    /// `UIFont(name: "29LTKaff-Black", size: ...)`
    static func ltKaffBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ltKaffBlack, size: size)
    }
    
    /// `UIFont(name: "29LTKaff-Regular", size: ...)`
    static func ltKaffRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ltKaffRegular, size: size)
    }
    
    /// `UIFont(name: "29LTKaff-SemiBold", size: ...)`
    static func ltKaffSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ltKaffSemiBold, size: size)
    }
    
    /// `UIFont(name: "29LTKaff-UltraLight", size: ...)`
    static func ltKaffUltraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ltKaffUltraLight, size: size)
    }
    
    static func validate() throws {
      if R.font.ltKaffBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font '29LTKaff-Black' could not be loaded, is '29LT-Kaff-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ltKaffUltraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font '29LTKaff-UltraLight' could not be loaded, is '29LT-Kaff-Ultra-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ltKaffRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font '29LTKaff-Regular' could not be loaded, is '29LT-Kaff-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ltKaffSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font '29LTKaff-SemiBold' could not be loaded, is '29LT-Kaff-Semi-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 137 images.
  struct image {
    /// Image `background.appupgrade`.
    static let backgroundAppupgrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "background.appupgrade")
    /// Image `ic.form.advertise.ok`.
    static let icFormAdvertiseOk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic.form.advertise.ok")
    /// Image `ic.form.contactUs.ok`.
    static let icFormContactUsOk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic.form.contactUs.ok")
    /// Image `icn_play_dark`.
    static let icn_play_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_play_dark")
    /// Image `icon.actionbar.commentWhite`.
    static let iconActionbarCommentWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.actionbar.commentWhite")
    /// Image `icon.actionbar.comment`.
    static let iconActionbarComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.actionbar.comment")
    /// Image `icon.actionbar.likeWhite`.
    static let iconActionbarLikeWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.actionbar.likeWhite")
    /// Image `icon.actionbar.like`.
    static let iconActionbarLike = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.actionbar.like")
    /// Image `icon.actionbar.shareWhite`.
    static let iconActionbarShareWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.actionbar.shareWhite")
    /// Image `icon.actionbar.share`.
    static let iconActionbarShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.actionbar.share")
    /// Image `icon.arrowDownRed`.
    static let iconArrowDownRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.arrowDownRed")
    /// Image `icon.arrowDown`.
    static let iconArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.arrowDown")
    /// Image `icon.arrowGrayDown`.
    static let iconArrowGrayDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.arrowGrayDown")
    /// Image `icon.arrowUpRed`.
    static let iconArrowUpRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.arrowUpRed")
    /// Image `icon.arrowUp`.
    static let iconArrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.arrowUp")
    /// Image `icon.arrowWhiteDown`.
    static let iconArrowWhiteDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.arrowWhiteDown")
    /// Image `icon.avatarDefault100x100`.
    static let iconAvatarDefault100x100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.avatarDefault100x100")
    /// Image `icon.avatarDefault72x107`.
    static let iconAvatarDefault72x107 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.avatarDefault72x107")
    /// Image `icon.bundle.arrowLeft`.
    static let iconBundleArrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.bundle.arrowLeft")
    /// Image `icon.bundle.arrowRight`.
    static let iconBundleArrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.bundle.arrowRight")
    /// Image `icon.bundle.close.larger`.
    static let iconBundleCloseLarger = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.bundle.close.larger")
    /// Image `icon.bundle.close`.
    static let iconBundleClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.bundle.close")
    /// Image `icon.bundle.photo`.
    static let iconBundlePhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.bundle.photo")
    /// Image `icon.bundle.video`.
    static let iconBundleVideo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.bundle.video")
    /// Image `icon.camera-solid`.
    static let iconCameraSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.camera-solid")
    /// Image `icon.closeRed`.
    static let iconCloseRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.closeRed")
    /// Image `icon.closeWhite`.
    static let iconCloseWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.closeWhite")
    /// Image `icon.close`.
    static let iconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.close")
    /// Image `icon.comment.flag`.
    static let iconCommentFlag = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.comment.flag")
    /// Image `icon.comment.remove`.
    static let iconCommentRemove = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.comment.remove")
    /// Image `icon.defaultPoster`.
    static let iconDefaultPoster = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.defaultPoster")
    /// Image `icon.edit`.
    static let iconEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.edit")
    /// Image `icon.eye`.
    static let iconEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.eye")
    /// Image `icon.gif`.
    static let iconGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.gif")
    /// Image `icon.homestream.actrelationRotated`.
    static let iconHomestreamActrelationRotated = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.homestream.actrelationRotated")
    /// Image `icon.homestream.actrelation`.
    static let iconHomestreamActrelation = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.homestream.actrelation")
    /// Image `icon.homestream.close`.
    static let iconHomestreamClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.homestream.close")
    /// Image `icon.homestream.tag-outline`.
    static let iconHomestreamTagOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.homestream.tag-outline")
    /// Image `icon.homestream.tag-solid`.
    static let iconHomestreamTagSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.homestream.tag-solid")
    /// Image `icon.info-solid`.
    static let iconInfoSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.info-solid")
    /// Image `icon.infortab.facebook`.
    static let iconInfortabFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.facebook")
    /// Image `icon.infortab.googleplus`.
    static let iconInfortabGoogleplus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.googleplus")
    /// Image `icon.infortab.instagram`.
    static let iconInfortabInstagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.instagram")
    /// Image `icon.infortab.linkedin`.
    static let iconInfortabLinkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.linkedin")
    /// Image `icon.infortab.pinterest`.
    static let iconInfortabPinterest = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.pinterest")
    /// Image `icon.infortab.snapchat`.
    static let iconInfortabSnapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.snapchat")
    /// Image `icon.infortab.twitter`.
    static let iconInfortabTwitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.twitter")
    /// Image `icon.infortab.vimeo`.
    static let iconInfortabVimeo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.vimeo")
    /// Image `icon.infortab.vine`.
    static let iconInfortabVine = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.vine")
    /// Image `icon.infortab.whatsapp`.
    static let iconInfortabWhatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.whatsapp")
    /// Image `icon.infortab.youtube`.
    static let iconInfortabYoutube = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.infortab.youtube")
    /// Image `icon.leftArrow`.
    static let iconLeftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.leftArrow")
    /// Image `icon.logo`.
    static let iconLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.logo")
    /// Image `icon.mbcLogo`.
    static let iconMbcLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.mbcLogo")
    /// Image `icon.menuWhite`.
    static let iconMenuWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.menuWhite")
    /// Image `icon.navigation.arrowBackRotated`.
    static let iconNavigationArrowBackRotated = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.navigation.arrowBackRotated")
    /// Image `icon.navigation.arrowBack`.
    static let iconNavigationArrowBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.navigation.arrowBack")
    /// Image `icon.navigation.bell`.
    static let iconNavigationBell = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.navigation.bell")
    /// Image `icon.navigation.mbc`.
    static let iconNavigationMbc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.navigation.mbc")
    /// Image `icon.noLogoWhite`.
    static let iconNoLogoWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.noLogoWhite")
    /// Image `icon.noLogo`.
    static let iconNoLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.noLogo")
    /// Image `icon.ok`.
    static let iconOk = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.ok")
    /// Image `icon.pageMenu.about`.
    static let iconPageMenuAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pageMenu.about")
    /// Image `icon.pageMenu.apps`.
    static let iconPageMenuApps = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pageMenu.apps")
    /// Image `icon.pageMenu.episodes`.
    static let iconPageMenuEpisodes = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pageMenu.episodes")
    /// Image `icon.pageMenu.newsfeed`.
    static let iconPageMenuNewsfeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pageMenu.newsfeed")
    /// Image `icon.pageMenu.photoes`.
    static let iconPageMenuPhotoes = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pageMenu.photoes")
    /// Image `icon.pageMenu.scheduler`.
    static let iconPageMenuScheduler = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pageMenu.scheduler")
    /// Image `icon.pageMenu.videos`.
    static let iconPageMenuVideos = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pageMenu.videos")
    /// Image `icon.pagedetail.add`.
    static let iconPagedetailAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pagedetail.add")
    /// Image `icon.pagedetail.clockAdd`.
    static let iconPagedetailClockAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pagedetail.clockAdd")
    /// Image `icon.pagedetail.dummylogo`.
    static let iconPagedetailDummylogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pagedetail.dummylogo")
    /// Image `icon.pagedetail.heart`.
    static let iconPagedetailHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pagedetail.heart")
    /// Image `icon.pagedetail.heartremove`.
    static let iconPagedetailHeartremove = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.pagedetail.heartremove")
    /// Image `icon.password.checked`.
    static let iconPasswordChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.password.checked")
    /// Image `icon.photo.placeholder`.
    static let iconPhotoPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.photo.placeholder")
    /// Image `icon.photo.taggedPlaceholder`.
    static let iconPhotoTaggedPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.photo.taggedPlaceholder")
    /// Image `icon.playShahid`.
    static let iconPlayShahid = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.playShahid")
    /// Image `icon.playlist`.
    static let iconPlaylist = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.playlist")
    /// Image `icon.profile.activityLog`.
    static let iconProfileActivityLog = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.profile.activityLog")
    /// Image `icon.profile.setting`.
    static let iconProfileSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.profile.setting")
    /// Image `icon.radio.livestreaming`.
    static let iconRadioLivestreaming = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.livestreaming")
    /// Image `icon.radio.pause`.
    static let iconRadioPause = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.pause")
    /// Image `icon.radio.play`.
    static let iconRadioPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.play")
    /// Image `icon.radio.social.apple`.
    static let iconRadioSocialApple = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.apple")
    /// Image `icon.radio.social.facebook`.
    static let iconRadioSocialFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.facebook")
    /// Image `icon.radio.social.google`.
    static let iconRadioSocialGoogle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.google")
    /// Image `icon.radio.social.instagram`.
    static let iconRadioSocialInstagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.instagram")
    /// Image `icon.radio.social.linkedin`.
    static let iconRadioSocialLinkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.linkedin")
    /// Image `icon.radio.social.pinterest`.
    static let iconRadioSocialPinterest = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.pinterest")
    /// Image `icon.radio.social.snapchat`.
    static let iconRadioSocialSnapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.snapchat")
    /// Image `icon.radio.social.twitter`.
    static let iconRadioSocialTwitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.twitter")
    /// Image `icon.radio.social.vimeo`.
    static let iconRadioSocialVimeo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.vimeo")
    /// Image `icon.radio.social.vine`.
    static let iconRadioSocialVine = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.vine")
    /// Image `icon.radio.social.whatsapp`.
    static let iconRadioSocialWhatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.whatsapp")
    /// Image `icon.radio.social.youtube`.
    static let iconRadioSocialYoutube = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.radio.social.youtube")
    /// Image `icon.replay`.
    static let iconReplay = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.replay")
    /// Image `icon.rightArrow`.
    static let iconRightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.rightArrow")
    /// Image `icon.search`.
    static let iconSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.search")
    /// Image `icon.searchresult.empty`.
    static let iconSearchresultEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.searchresult.empty")
    /// Image `icon.selected`.
    static let iconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.selected")
    /// Image `icon.shahidEmbedded`.
    static let iconShahidEmbedded = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.shahidEmbedded")
    /// Image `icon.sidemenu.channels`.
    static let iconSidemenuChannels = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.channels")
    /// Image `icon.sidemenu.episodes`.
    static let iconSidemenuEpisodes = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.episodes")
    /// Image `icon.sidemenu.favorites`.
    static let iconSidemenuFavorites = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.favorites")
    /// Image `icon.sidemenu.gamesApps`.
    static let iconSidemenuGamesApps = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.gamesApps")
    /// Image `icon.sidemenu.interest`.
    static let iconSidemenuInterest = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.interest")
    /// Image `icon.sidemenu.networks`.
    static let iconSidemenuNetworks = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.networks")
    /// Image `icon.sidemenu.schedule`.
    static let iconSidemenuSchedule = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.schedule")
    /// Image `icon.sidemenu.stream`.
    static let iconSidemenuStream = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.stream")
    /// Image `icon.sidemenu.tv`.
    static let iconSidemenuTv = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.sidemenu.tv")
    /// Image `icon.signup.calendar`.
    static let iconSignupCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.signup.calendar")
    /// Image `icon.signup.login`.
    static let iconSignupLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.signup.login")
    /// Image `icon.tabbar.appsAndGames.inactive`.
    static let iconTabbarAppsAndGamesInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.tabbar.appsAndGames.inactive")
    /// Image `icon.tabbar.menu.inactive`.
    static let iconTabbarMenuInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.tabbar.menu.inactive")
    /// Image `icon.tabbar.schedules.inactive`.
    static let iconTabbarSchedulesInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.tabbar.schedules.inactive")
    /// Image `icon.tabbar.showListing.inactive`.
    static let iconTabbarShowListingInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.tabbar.showListing.inactive")
    /// Image `icon.tabbar.stream.inactive.pdf`.
    static let iconTabbarStreamInactivePdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.tabbar.stream.inactive.pdf")
    /// Image `icon.tabbar.videos.inactive`.
    static let iconTabbarVideosInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.tabbar.videos.inactive")
    /// Image `icon.unselected`.
    static let iconUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.unselected")
    /// Image `icon.video.close`.
    static let iconVideoClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.close")
    /// Image `icon.video.collapse_screen`.
    static let iconVideoCollapse_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.collapse_screen")
    /// Image `icon.video.gear`.
    static let iconVideoGear = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.gear")
    /// Image `icon.video.mute`.
    static let iconVideoMute = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.mute")
    /// Image `icon.video.next_item`.
    static let iconVideoNext_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.next_item")
    /// Image `icon.video.pause`.
    static let iconVideoPause = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.pause")
    /// Image `icon.video.play`.
    static let iconVideoPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.play")
    /// Image `icon.video.thumb_slider`.
    static let iconVideoThumb_slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.thumb_slider")
    /// Image `icon.video.unmute`.
    static let iconVideoUnmute = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.video.unmute")
    /// Image `icon_star_follow`.
    static let icon_star_follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_star_follow")
    /// Image `img.404`.
    static let img404 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img.404")
    /// Image `img.advertise.cover`.
    static let imgAdvertiseCover = Rswift.ImageResource(bundle: R.hostingBundle, name: "img.advertise.cover")
    /// Image `img.button.highlight`.
    static let imgButtonHighlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "img.button.highlight")
    /// Image `img.charc`.
    static let imgCharc = Rswift.ImageResource(bundle: R.hostingBundle, name: "img.charc")
    /// Image `img.clowds`.
    static let imgClowds = Rswift.ImageResource(bundle: R.hostingBundle, name: "img.clowds")
    /// Image `img.contactUs.cover`.
    static let imgContactUsCover = Rswift.ImageResource(bundle: R.hostingBundle, name: "img.contactUs.cover")
    /// Image `logo.mbcGray`.
    static let logoMbcGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo.mbcGray")
    
    /// `UIImage(named: "background.appupgrade", bundle: ..., traitCollection: ...)`
    static func backgroundAppupgrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundAppupgrade, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic.form.advertise.ok", bundle: ..., traitCollection: ...)`
    static func icFormAdvertiseOk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFormAdvertiseOk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic.form.contactUs.ok", bundle: ..., traitCollection: ...)`
    static func icFormContactUsOk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFormContactUsOk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icn_play_dark", bundle: ..., traitCollection: ...)`
    static func icn_play_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_play_dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.actionbar.comment", bundle: ..., traitCollection: ...)`
    static func iconActionbarComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconActionbarComment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.actionbar.commentWhite", bundle: ..., traitCollection: ...)`
    static func iconActionbarCommentWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconActionbarCommentWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.actionbar.like", bundle: ..., traitCollection: ...)`
    static func iconActionbarLike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconActionbarLike, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.actionbar.likeWhite", bundle: ..., traitCollection: ...)`
    static func iconActionbarLikeWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconActionbarLikeWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.actionbar.share", bundle: ..., traitCollection: ...)`
    static func iconActionbarShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconActionbarShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.actionbar.shareWhite", bundle: ..., traitCollection: ...)`
    static func iconActionbarShareWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconActionbarShareWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.arrowDown", bundle: ..., traitCollection: ...)`
    static func iconArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.arrowDownRed", bundle: ..., traitCollection: ...)`
    static func iconArrowDownRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowDownRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.arrowGrayDown", bundle: ..., traitCollection: ...)`
    static func iconArrowGrayDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowGrayDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.arrowUp", bundle: ..., traitCollection: ...)`
    static func iconArrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.arrowUpRed", bundle: ..., traitCollection: ...)`
    static func iconArrowUpRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowUpRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.arrowWhiteDown", bundle: ..., traitCollection: ...)`
    static func iconArrowWhiteDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowWhiteDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.avatarDefault100x100", bundle: ..., traitCollection: ...)`
    static func iconAvatarDefault100x100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAvatarDefault100x100, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.avatarDefault72x107", bundle: ..., traitCollection: ...)`
    static func iconAvatarDefault72x107(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAvatarDefault72x107, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.bundle.arrowLeft", bundle: ..., traitCollection: ...)`
    static func iconBundleArrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBundleArrowLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.bundle.arrowRight", bundle: ..., traitCollection: ...)`
    static func iconBundleArrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBundleArrowRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.bundle.close", bundle: ..., traitCollection: ...)`
    static func iconBundleClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBundleClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.bundle.close.larger", bundle: ..., traitCollection: ...)`
    static func iconBundleCloseLarger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBundleCloseLarger, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.bundle.photo", bundle: ..., traitCollection: ...)`
    static func iconBundlePhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBundlePhoto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.bundle.video", bundle: ..., traitCollection: ...)`
    static func iconBundleVideo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBundleVideo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.camera-solid", bundle: ..., traitCollection: ...)`
    static func iconCameraSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCameraSolid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.close", bundle: ..., traitCollection: ...)`
    static func iconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.closeRed", bundle: ..., traitCollection: ...)`
    static func iconCloseRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCloseRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.closeWhite", bundle: ..., traitCollection: ...)`
    static func iconCloseWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCloseWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.comment.flag", bundle: ..., traitCollection: ...)`
    static func iconCommentFlag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCommentFlag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.comment.remove", bundle: ..., traitCollection: ...)`
    static func iconCommentRemove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCommentRemove, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.defaultPoster", bundle: ..., traitCollection: ...)`
    static func iconDefaultPoster(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDefaultPoster, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.edit", bundle: ..., traitCollection: ...)`
    static func iconEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEdit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.eye", bundle: ..., traitCollection: ...)`
    static func iconEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.gif", bundle: ..., traitCollection: ...)`
    static func iconGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.homestream.actrelation", bundle: ..., traitCollection: ...)`
    static func iconHomestreamActrelation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHomestreamActrelation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.homestream.actrelationRotated", bundle: ..., traitCollection: ...)`
    static func iconHomestreamActrelationRotated(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHomestreamActrelationRotated, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.homestream.close", bundle: ..., traitCollection: ...)`
    static func iconHomestreamClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHomestreamClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.homestream.tag-outline", bundle: ..., traitCollection: ...)`
    static func iconHomestreamTagOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHomestreamTagOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.homestream.tag-solid", bundle: ..., traitCollection: ...)`
    static func iconHomestreamTagSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHomestreamTagSolid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.info-solid", bundle: ..., traitCollection: ...)`
    static func iconInfoSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfoSolid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.facebook", bundle: ..., traitCollection: ...)`
    static func iconInfortabFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabFacebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.googleplus", bundle: ..., traitCollection: ...)`
    static func iconInfortabGoogleplus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabGoogleplus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.instagram", bundle: ..., traitCollection: ...)`
    static func iconInfortabInstagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabInstagram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.linkedin", bundle: ..., traitCollection: ...)`
    static func iconInfortabLinkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabLinkedin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.pinterest", bundle: ..., traitCollection: ...)`
    static func iconInfortabPinterest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabPinterest, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.snapchat", bundle: ..., traitCollection: ...)`
    static func iconInfortabSnapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabSnapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.twitter", bundle: ..., traitCollection: ...)`
    static func iconInfortabTwitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabTwitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.vimeo", bundle: ..., traitCollection: ...)`
    static func iconInfortabVimeo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabVimeo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.vine", bundle: ..., traitCollection: ...)`
    static func iconInfortabVine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabVine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.whatsapp", bundle: ..., traitCollection: ...)`
    static func iconInfortabWhatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabWhatsapp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.infortab.youtube", bundle: ..., traitCollection: ...)`
    static func iconInfortabYoutube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfortabYoutube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.leftArrow", bundle: ..., traitCollection: ...)`
    static func iconLeftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLeftArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.logo", bundle: ..., traitCollection: ...)`
    static func iconLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.mbcLogo", bundle: ..., traitCollection: ...)`
    static func iconMbcLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMbcLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.menuWhite", bundle: ..., traitCollection: ...)`
    static func iconMenuWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.navigation.arrowBack", bundle: ..., traitCollection: ...)`
    static func iconNavigationArrowBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNavigationArrowBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.navigation.arrowBackRotated", bundle: ..., traitCollection: ...)`
    static func iconNavigationArrowBackRotated(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNavigationArrowBackRotated, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.navigation.bell", bundle: ..., traitCollection: ...)`
    static func iconNavigationBell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNavigationBell, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.navigation.mbc", bundle: ..., traitCollection: ...)`
    static func iconNavigationMbc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNavigationMbc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.noLogo", bundle: ..., traitCollection: ...)`
    static func iconNoLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNoLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.noLogoWhite", bundle: ..., traitCollection: ...)`
    static func iconNoLogoWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNoLogoWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.ok", bundle: ..., traitCollection: ...)`
    static func iconOk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconOk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pageMenu.about", bundle: ..., traitCollection: ...)`
    static func iconPageMenuAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPageMenuAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pageMenu.apps", bundle: ..., traitCollection: ...)`
    static func iconPageMenuApps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPageMenuApps, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pageMenu.episodes", bundle: ..., traitCollection: ...)`
    static func iconPageMenuEpisodes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPageMenuEpisodes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pageMenu.newsfeed", bundle: ..., traitCollection: ...)`
    static func iconPageMenuNewsfeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPageMenuNewsfeed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pageMenu.photoes", bundle: ..., traitCollection: ...)`
    static func iconPageMenuPhotoes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPageMenuPhotoes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pageMenu.scheduler", bundle: ..., traitCollection: ...)`
    static func iconPageMenuScheduler(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPageMenuScheduler, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pageMenu.videos", bundle: ..., traitCollection: ...)`
    static func iconPageMenuVideos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPageMenuVideos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pagedetail.add", bundle: ..., traitCollection: ...)`
    static func iconPagedetailAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPagedetailAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pagedetail.clockAdd", bundle: ..., traitCollection: ...)`
    static func iconPagedetailClockAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPagedetailClockAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pagedetail.dummylogo", bundle: ..., traitCollection: ...)`
    static func iconPagedetailDummylogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPagedetailDummylogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pagedetail.heart", bundle: ..., traitCollection: ...)`
    static func iconPagedetailHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPagedetailHeart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.pagedetail.heartremove", bundle: ..., traitCollection: ...)`
    static func iconPagedetailHeartremove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPagedetailHeartremove, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.password.checked", bundle: ..., traitCollection: ...)`
    static func iconPasswordChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPasswordChecked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.photo.placeholder", bundle: ..., traitCollection: ...)`
    static func iconPhotoPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPhotoPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.photo.taggedPlaceholder", bundle: ..., traitCollection: ...)`
    static func iconPhotoTaggedPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPhotoTaggedPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.playShahid", bundle: ..., traitCollection: ...)`
    static func iconPlayShahid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlayShahid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.playlist", bundle: ..., traitCollection: ...)`
    static func iconPlaylist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlaylist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.profile.activityLog", bundle: ..., traitCollection: ...)`
    static func iconProfileActivityLog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfileActivityLog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.profile.setting", bundle: ..., traitCollection: ...)`
    static func iconProfileSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfileSetting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.livestreaming", bundle: ..., traitCollection: ...)`
    static func iconRadioLivestreaming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioLivestreaming, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.pause", bundle: ..., traitCollection: ...)`
    static func iconRadioPause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioPause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.play", bundle: ..., traitCollection: ...)`
    static func iconRadioPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioPlay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.apple", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialApple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialApple, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.facebook", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialFacebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.google", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialGoogle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialGoogle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.instagram", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialInstagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialInstagram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.linkedin", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialLinkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialLinkedin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.pinterest", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialPinterest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialPinterest, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.snapchat", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialSnapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialSnapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.twitter", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialTwitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialTwitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.vimeo", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialVimeo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialVimeo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.vine", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialVine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialVine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.whatsapp", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialWhatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialWhatsapp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.radio.social.youtube", bundle: ..., traitCollection: ...)`
    static func iconRadioSocialYoutube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRadioSocialYoutube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.replay", bundle: ..., traitCollection: ...)`
    static func iconReplay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconReplay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.rightArrow", bundle: ..., traitCollection: ...)`
    static func iconRightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.search", bundle: ..., traitCollection: ...)`
    static func iconSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.searchresult.empty", bundle: ..., traitCollection: ...)`
    static func iconSearchresultEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearchresultEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.selected", bundle: ..., traitCollection: ...)`
    static func iconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.shahidEmbedded", bundle: ..., traitCollection: ...)`
    static func iconShahidEmbedded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShahidEmbedded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.channels", bundle: ..., traitCollection: ...)`
    static func iconSidemenuChannels(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuChannels, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.episodes", bundle: ..., traitCollection: ...)`
    static func iconSidemenuEpisodes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuEpisodes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.favorites", bundle: ..., traitCollection: ...)`
    static func iconSidemenuFavorites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuFavorites, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.gamesApps", bundle: ..., traitCollection: ...)`
    static func iconSidemenuGamesApps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuGamesApps, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.interest", bundle: ..., traitCollection: ...)`
    static func iconSidemenuInterest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuInterest, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.networks", bundle: ..., traitCollection: ...)`
    static func iconSidemenuNetworks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuNetworks, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.schedule", bundle: ..., traitCollection: ...)`
    static func iconSidemenuSchedule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuSchedule, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.stream", bundle: ..., traitCollection: ...)`
    static func iconSidemenuStream(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuStream, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.sidemenu.tv", bundle: ..., traitCollection: ...)`
    static func iconSidemenuTv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSidemenuTv, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.signup.calendar", bundle: ..., traitCollection: ...)`
    static func iconSignupCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSignupCalendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.signup.login", bundle: ..., traitCollection: ...)`
    static func iconSignupLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSignupLogin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.tabbar.appsAndGames.inactive", bundle: ..., traitCollection: ...)`
    static func iconTabbarAppsAndGamesInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabbarAppsAndGamesInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.tabbar.menu.inactive", bundle: ..., traitCollection: ...)`
    static func iconTabbarMenuInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabbarMenuInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.tabbar.schedules.inactive", bundle: ..., traitCollection: ...)`
    static func iconTabbarSchedulesInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabbarSchedulesInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.tabbar.showListing.inactive", bundle: ..., traitCollection: ...)`
    static func iconTabbarShowListingInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabbarShowListingInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.tabbar.stream.inactive.pdf", bundle: ..., traitCollection: ...)`
    static func iconTabbarStreamInactivePdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabbarStreamInactivePdf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.tabbar.videos.inactive", bundle: ..., traitCollection: ...)`
    static func iconTabbarVideosInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabbarVideosInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.unselected", bundle: ..., traitCollection: ...)`
    static func iconUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.close", bundle: ..., traitCollection: ...)`
    static func iconVideoClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.collapse_screen", bundle: ..., traitCollection: ...)`
    static func iconVideoCollapse_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoCollapse_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.gear", bundle: ..., traitCollection: ...)`
    static func iconVideoGear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoGear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.mute", bundle: ..., traitCollection: ...)`
    static func iconVideoMute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoMute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.next_item", bundle: ..., traitCollection: ...)`
    static func iconVideoNext_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoNext_item, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.pause", bundle: ..., traitCollection: ...)`
    static func iconVideoPause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoPause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.play", bundle: ..., traitCollection: ...)`
    static func iconVideoPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoPlay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.thumb_slider", bundle: ..., traitCollection: ...)`
    static func iconVideoThumb_slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoThumb_slider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon.video.unmute", bundle: ..., traitCollection: ...)`
    static func iconVideoUnmute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVideoUnmute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_star_follow", bundle: ..., traitCollection: ...)`
    static func icon_star_follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_star_follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img.404", bundle: ..., traitCollection: ...)`
    static func img404(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img404, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img.advertise.cover", bundle: ..., traitCollection: ...)`
    static func imgAdvertiseCover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgAdvertiseCover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img.button.highlight", bundle: ..., traitCollection: ...)`
    static func imgButtonHighlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgButtonHighlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img.charc", bundle: ..., traitCollection: ...)`
    static func imgCharc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgCharc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img.clowds", bundle: ..., traitCollection: ...)`
    static func imgClowds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgClowds, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img.contactUs.cover", bundle: ..., traitCollection: ...)`
    static func imgContactUsCover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgContactUsCover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo.mbcGray", bundle: ..., traitCollection: ...)`
    static func logoMbcGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoMbcGray, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 151 nibs.
  struct nib {
    /// Nib `AboutTabAboutCell`.
    static let aboutTabAboutCell = _R.nib._AboutTabAboutCell()
    /// Nib `AboutTabLocationCell`.
    static let aboutTabLocationCell = _R.nib._AboutTabLocationCell()
    /// Nib `AboutTabMetadataCell`.
    static let aboutTabMetadataCell = _R.nib._AboutTabMetadataCell()
    /// Nib `AboutTabMetadataView`.
    static let aboutTabMetadataView = _R.nib._AboutTabMetadataView()
    /// Nib `AboutTabSocialNetworksCell`.
    static let aboutTabSocialNetworksCell = _R.nib._AboutTabSocialNetworksCell()
    /// Nib `ActivityCardView`.
    static let activityCardView = _R.nib._ActivityCardView()
    /// Nib `AirTimeCell`.
    static let airTimeCell = _R.nib._AirTimeCell()
    /// Nib `AirTimeListViewController`.
    static let airTimeListViewController = _R.nib._AirTimeListViewController()
    /// Nib `AppCardTableViewCell`.
    static let appCardTableViewCell = _R.nib._AppCardTableViewCell()
    /// Nib `AppCarouselItemView`.
    static let appCarouselItemView = _R.nib._AppCarouselItemView()
    /// Nib `AppHeaderCell`.
    static let appHeaderCell = _R.nib._AppHeaderCell()
    /// Nib `AppListingCell`.
    static let appListingCell = _R.nib._AppListingCell()
    /// Nib `AppUpgradeViewController`.
    static let appUpgradeViewController = _R.nib._AppUpgradeViewController()
    /// Nib `AppWhitePageTableViewCell`.
    static let appWhitePageTableViewCell = _R.nib._AppWhitePageTableViewCell()
    /// Nib `ArticleEmbeddedCell`.
    static let articleEmbeddedCell = _R.nib._ArticleEmbeddedCell()
    /// Nib `ArticleHeaderCell`.
    static let articleHeaderCell = _R.nib._ArticleHeaderCell()
    /// Nib `ArticleParagraphImageCell`.
    static let articleParagraphImageCell = _R.nib._ArticleParagraphImageCell()
    /// Nib `ArticleParagraphTextCell`.
    static let articleParagraphTextCell = _R.nib._ArticleParagraphTextCell()
    /// Nib `ArticleVideoCell`.
    static let articleVideoCell = _R.nib._ArticleVideoCell()
    /// Nib `AvatarFullScreenView`.
    static let avatarFullScreenView = _R.nib._AvatarFullScreenView()
    /// Nib `BannerAdsViewCell`.
    static let bannerAdsViewCell = _R.nib._BannerAdsViewCell()
    /// Nib `BundleCarouselCollectionViewCell`.
    static let bundleCarouselCollectionViewCell = _R.nib._BundleCarouselCollectionViewCell()
    /// Nib `BundleContentViewController`.
    static let bundleContentViewController = _R.nib._BundleContentViewController()
    /// Nib `BundleHeaderView`.
    static let bundleHeaderView = _R.nib._BundleHeaderView()
    /// Nib `BundleSearchResultCell`.
    static let bundleSearchResultCell = _R.nib._BundleSearchResultCell()
    /// Nib `BundleSingleItemCell`.
    static let bundleSingleItemCell = _R.nib._BundleSingleItemCell()
    /// Nib `BundleSingleItemCollectionViewCell`.
    static let bundleSingleItemCollectionViewCell = _R.nib._BundleSingleItemCollectionViewCell()
    /// Nib `BundleSingleItemInforCollectionViewCell`.
    static let bundleSingleItemInforCollectionViewCell = _R.nib._BundleSingleItemInforCollectionViewCell()
    /// Nib `CardImageItemCollectionViewCell`.
    static let cardImageItemCollectionViewCell = _R.nib._CardImageItemCollectionViewCell()
    /// Nib `CardTextCell`.
    static let cardTextCell = _R.nib._CardTextCell()
    /// Nib `CarouselTableViewCell`.
    static let carouselTableViewCell = _R.nib._CarouselTableViewCell()
    /// Nib `ChannelCollectionViewCell`.
    static let channelCollectionViewCell = _R.nib._ChannelCollectionViewCell()
    /// Nib `ChannelListingViewController`.
    static let channelListingViewController = _R.nib._ChannelListingViewController()
    /// Nib `ChannelTableViewCell`.
    static let channelTableViewCell = _R.nib._ChannelTableViewCell()
    /// Nib `CommentViewCell`.
    static let commentViewCell = _R.nib._CommentViewCell()
    /// Nib `CommentViewController`.
    static let commentViewController = _R.nib._CommentViewController()
    /// Nib `ContentFilterCell`.
    static let contentFilterCell = _R.nib._ContentFilterCell()
    /// Nib `ContentPageViewController`.
    static let contentPageViewController = _R.nib._ContentPageViewController()
    /// Nib `DropdownFormCell`.
    static let dropdownFormCell = _R.nib._DropdownFormCell()
    /// Nib `EmailVerificationViewController`.
    static let emailVerificationViewController = _R.nib._EmailVerificationViewController()
    /// Nib `EmbedHeaderCell`.
    static let embedHeaderCell = _R.nib._EmbedHeaderCell()
    /// Nib `EmbeddedCardCell`.
    static let embeddedCardCell = _R.nib._EmbeddedCardCell()
    /// Nib `EpisodeCell`.
    static let episodeCell = _R.nib._EpisodeCell()
    /// Nib `EpisodeHeaderCell`.
    static let episodeHeaderCell = _R.nib._EpisodeHeaderCell()
    /// Nib `EpisodePageTabCell`.
    static let episodePageTabCell = _R.nib._EpisodePageTabCell()
    /// Nib `FilterDaysChannelView`.
    static let filterDaysChannelView = _R.nib._FilterDaysChannelView()
    /// Nib `FollowView`.
    static let followView = _R.nib._FollowView()
    /// Nib `ForgotPasswordViewController`.
    static let forgotPasswordViewController = _R.nib._ForgotPasswordViewController()
    /// Nib `FormViewController`.
    static let formViewController = _R.nib._FormViewController()
    /// Nib `FullScreenAdsView`.
    static let fullScreenAdsView = _R.nib._FullScreenAdsView()
    /// Nib `HeaderCommentViewCell`.
    static let headerCommentViewCell = _R.nib._HeaderCommentViewCell()
    /// Nib `HomeStreamSingleItemCell`.
    static let homeStreamSingleItemCell = _R.nib._HomeStreamSingleItemCell()
    /// Nib `IPadAppCardTableViewCell`.
    static let iPadAppCardTableViewCell = _R.nib._IPadAppCardTableViewCell()
    /// Nib `IPadBundleSingleItemCell`.
    static let iPadBundleSingleItemCell = _R.nib._IPadBundleSingleItemCell()
    /// Nib `IPadBundleSingleItemInforCollectionViewCell`.
    static let iPadBundleSingleItemInforCollectionViewCell = _R.nib._IPadBundleSingleItemInforCollectionViewCell()
    /// Nib `IPadEmbeddedCardCell`.
    static let iPadEmbeddedCardCell = _R.nib._IPadEmbeddedCardCell()
    /// Nib `IPadEpisodeCell`.
    static let iPadEpisodeCell = _R.nib._IPadEpisodeCell()
    /// Nib `IPadHeaderCommentCell`.
    static let iPadHeaderCommentCell = _R.nib._IPadHeaderCommentCell()
    /// Nib `IPadHomeStreamSingleItemCell`.
    static let iPadHomeStreamSingleItemCell = _R.nib._IPadHomeStreamSingleItemCell()
    /// Nib `IPadMBCLoadingPlaceHolderView`.
    static let iPadMBCLoadingPlaceHolderView = _R.nib._IPadMBCLoadingPlaceHolderView()
    /// Nib `IPadPageCardCell`.
    static let iPadPageCardCell = _R.nib._IPadPageCardCell()
    /// Nib `IPadPhotoAlbumCollectionCell`.
    static let iPadPhotoAlbumCollectionCell = _R.nib._IPadPhotoAlbumCollectionCell()
    /// Nib `IPadPhotoAlbumsCarouselTableViewCell`.
    static let iPadPhotoAlbumsCarouselTableViewCell = _R.nib._IPadPhotoAlbumsCarouselTableViewCell()
    /// Nib `IPadPhotoCollectionView`.
    static let iPadPhotoCollectionView = _R.nib._IPadPhotoCollectionView()
    /// Nib `IPadPostCardMultiImagesTableViewCell`.
    static let iPadPostCardMultiImagesTableViewCell = _R.nib._IPadPostCardMultiImagesTableViewCell()
    /// Nib `IPadTextCell`.
    static let iPadTextCell = _R.nib._IPadTextCell()
    /// Nib `IPadVideoPlaylistDescriptionCell`.
    static let iPadVideoPlaylistDescriptionCell = _R.nib._IPadVideoPlaylistDescriptionCell()
    /// Nib `IPadVideoPlaylistHeaderCell`.
    static let iPadVideoPlaylistHeaderCell = _R.nib._IPadVideoPlaylistHeaderCell()
    /// Nib `IPadVideoPlaylistNextItemCell`.
    static let iPadVideoPlaylistNextItemCell = _R.nib._IPadVideoPlaylistNextItemCell()
    /// Nib `IPadVideoPlaylistViewController`.
    static let iPadVideoPlaylistViewController = _R.nib._IPadVideoPlaylistViewController()
    /// Nib `ImageFormCell`.
    static let imageFormCell = _R.nib._ImageFormCell()
    /// Nib `InputMessageViewCell`.
    static let inputMessageViewCell = _R.nib._InputMessageViewCell()
    /// Nib `InterestView`.
    static let interestView = _R.nib._InterestView()
    /// Nib `LabelFormCell`.
    static let labelFormCell = _R.nib._LabelFormCell()
    /// Nib `LikeCommentShareView`.
    static let likeCommentShareView = _R.nib._LikeCommentShareView()
    /// Nib `LoadMoreCollectionViewCell`.
    static let loadMoreCollectionViewCell = _R.nib._LoadMoreCollectionViewCell()
    /// Nib `LoadMoreCommentCell`.
    static let loadMoreCommentCell = _R.nib._LoadMoreCommentCell()
    /// Nib `LoadingNextAlbumView`.
    static let loadingNextAlbumView = _R.nib._LoadingNextAlbumView()
    /// Nib `LoadingPlaceHolderCollectionViewCell`.
    static let loadingPlaceHolderCollectionViewCell = _R.nib._LoadingPlaceHolderCollectionViewCell()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `MBCLoadingPlaceHolderView`.
    static let mbcLoadingPlaceHolderView = _R.nib._MBCLoadingPlaceHolderView()
    /// Nib `MenuCell`.
    static let menuCell = _R.nib._MenuCell()
    /// Nib `MenuProfileCell`.
    static let menuProfileCell = _R.nib._MenuProfileCell()
    /// Nib `NextVideoCountDownView`.
    static let nextVideoCountDownView = _R.nib._NextVideoCountDownView()
    /// Nib `NotificationFormCell`.
    static let notificationFormCell = _R.nib._NotificationFormCell()
    /// Nib `PageAppTableViewCell`.
    static let pageAppTableViewCell = _R.nib._PageAppTableViewCell()
    /// Nib `PageBundleCarouselCell`.
    static let pageBundleCarouselCell = _R.nib._PageBundleCarouselCell()
    /// Nib `PageBundleCarouselCollectionViewCell`.
    static let pageBundleCarouselCollectionViewCell = _R.nib._PageBundleCarouselCollectionViewCell()
    /// Nib `PageCardCell`.
    static let pageCardCell = _R.nib._PageCardCell()
    /// Nib `PageCarouselItemView`.
    static let pageCarouselItemView = _R.nib._PageCarouselItemView()
    /// Nib `PhotoAlbumICarouselItemView`.
    static let photoAlbumICarouselItemView = _R.nib._PhotoAlbumICarouselItemView()
    /// Nib `PhotoAlbumsCarouselTableViewCell`.
    static let photoAlbumsCarouselTableViewCell = _R.nib._PhotoAlbumsCarouselTableViewCell()
    /// Nib `PhotoNoCustomAlbumTableViewCell`.
    static let photoNoCustomAlbumTableViewCell = _R.nib._PhotoNoCustomAlbumTableViewCell()
    /// Nib `PhotoPostTableViewCell`.
    static let photoPostTableViewCell = _R.nib._PhotoPostTableViewCell()
    /// Nib `PlaylistCarouselCollectionViewCell`.
    static let playlistCarouselCollectionViewCell = _R.nib._PlaylistCarouselCollectionViewCell()
    /// Nib `PlaylistSearchResultCell`.
    static let playlistSearchResultCell = _R.nib._PlaylistSearchResultCell()
    /// Nib `PostCardMultiImagesTableViewCell`.
    static let postCardMultiImagesTableViewCell = _R.nib._PostCardMultiImagesTableViewCell()
    /// Nib `PostCarouselItemView`.
    static let postCarouselItemView = _R.nib._PostCarouselItemView()
    /// Nib `PostImageCell`.
    static let postImageCell = _R.nib._PostImageCell()
    /// Nib `PostTextCell`.
    static let postTextCell = _R.nib._PostTextCell()
    /// Nib `ProfileHeaderCell`.
    static let profileHeaderCell = _R.nib._ProfileHeaderCell()
    /// Nib `RadioAdsViewCell`.
    static let radioAdsViewCell = _R.nib._RadioAdsViewCell()
    /// Nib `RadioChannelViewController`.
    static let radioChannelViewController = _R.nib._RadioChannelViewController()
    /// Nib `RadioFeedViewCell`.
    static let radioFeedViewCell = _R.nib._RadioFeedViewCell()
    /// Nib `RadioGroupFormCell`.
    static let radioGroupFormCell = _R.nib._RadioGroupFormCell()
    /// Nib `RadioSocialCell`.
    static let radioSocialCell = _R.nib._RadioSocialCell()
    /// Nib `RadioSocialView`.
    static let radioSocialView = _R.nib._RadioSocialView()
    /// Nib `RelatedContentCell`.
    static let relatedContentCell = _R.nib._RelatedContentCell()
    /// Nib `RelatedContentSectionHeaderCell`.
    static let relatedContentSectionHeaderCell = _R.nib._RelatedContentSectionHeaderCell()
    /// Nib `ScheduleTableViewCell`.
    static let scheduleTableViewCell = _R.nib._ScheduleTableViewCell()
    /// Nib `SchedulerDaySelectionCell`.
    static let schedulerDaySelectionCell = _R.nib._SchedulerDaySelectionCell()
    /// Nib `SchedulerDaySelectionItemView`.
    static let schedulerDaySelectionItemView = _R.nib._SchedulerDaySelectionItemView()
    /// Nib `SearchMenuItemCell`.
    static let searchMenuItemCell = _R.nib._SearchMenuItemCell()
    /// Nib `SearchMenu`.
    static let searchMenu = _R.nib._SearchMenu()
    /// Nib `SearchResultEmpty`.
    static let searchResultEmpty = _R.nib._SearchResultEmpty()
    /// Nib `SearchResultViewController`.
    static let searchResultViewController = _R.nib._SearchResultViewController()
    /// Nib `SearchSuggestionCell`.
    static let searchSuggestionCell = _R.nib._SearchSuggestionCell()
    /// Nib `SearchSuggestionFooterCell`.
    static let searchSuggestionFooterCell = _R.nib._SearchSuggestionFooterCell()
    /// Nib `SearchSuggestionHeaderCell`.
    static let searchSuggestionHeaderCell = _R.nib._SearchSuggestionHeaderCell()
    /// Nib `SendMessageView`.
    static let sendMessageView = _R.nib._SendMessageView()
    /// Nib `ShowListingCell`.
    static let showListingCell = _R.nib._ShowListingCell()
    /// Nib `SignupViewController`.
    static let signupViewController = _R.nib._SignupViewController()
    /// Nib `SocialNetworkCollectionViewCell`.
    static let socialNetworkCollectionViewCell = _R.nib._SocialNetworkCollectionViewCell()
    /// Nib `SpecificChannelScheduleFilterDayView`.
    static let specificChannelScheduleFilterDayView = _R.nib._SpecificChannelScheduleFilterDayView()
    /// Nib `SpecificChannelScheduleViewController`.
    static let specificChannelScheduleViewController = _R.nib._SpecificChannelScheduleViewController()
    /// Nib `StarPageListingCell`.
    static let starPageListingCell = _R.nib._StarPageListingCell()
    /// Nib `TaggedPageItemCollectionViewCell`.
    static let taggedPageItemCollectionViewCell = _R.nib._TaggedPageItemCollectionViewCell()
    /// Nib `TaggedPageItemTypeFullCollectionViewCell`.
    static let taggedPageItemTypeFullCollectionViewCell = _R.nib._TaggedPageItemTypeFullCollectionViewCell()
    /// Nib `TaggedPageListingCell`.
    static let taggedPageListingCell = _R.nib._TaggedPageListingCell()
    /// Nib `TaggedPageListingViewController`.
    static let taggedPageListingViewController = _R.nib._TaggedPageListingViewController()
    /// Nib `TaggedPagesView`.
    static let taggedPagesView = _R.nib._TaggedPagesView()
    /// Nib `TestViewController`.
    static let testViewController = _R.nib._TestViewController()
    /// Nib `TextFieldFormCell`.
    static let textFieldFormCell = _R.nib._TextFieldFormCell()
    /// Nib `TextViewFormCell`.
    static let textViewFormCell = _R.nib._TextViewFormCell()
    /// Nib `TimestampAndContentTypeView`.
    static let timestampAndContentTypeView = _R.nib._TimestampAndContentTypeView()
    /// Nib `UserProfileAddressCell`.
    static let userProfileAddressCell = _R.nib._UserProfileAddressCell()
    /// Nib `UserProfileCell`.
    static let userProfileCell = _R.nib._UserProfileCell()
    /// Nib `UserProfileChangePasswordCell`.
    static let userProfileChangePasswordCell = _R.nib._UserProfileChangePasswordCell()
    /// Nib `UserProfileGenderCell`.
    static let userProfileGenderCell = _R.nib._UserProfileGenderCell()
    /// Nib `UserProfileViewController`.
    static let userProfileViewController = _R.nib._UserProfileViewController()
    /// Nib `VideoBitRateView`.
    static let videoBitRateView = _R.nib._VideoBitRateView()
    /// Nib `VideoFullscreenLandscapeView`.
    static let videoFullscreenLandscapeView = _R.nib._VideoFullscreenLandscapeView()
    /// Nib `VideoFullscreenLoadingNextView`.
    static let videoFullscreenLoadingNextView = _R.nib._VideoFullscreenLoadingNextView()
    /// Nib `VideoHeaderCell`.
    static let videoHeaderCell = _R.nib._VideoHeaderCell()
    /// Nib `VideoLiveStreamingCell`.
    static let videoLiveStreamingCell = _R.nib._VideoLiveStreamingCell()
    /// Nib `VideoPlaylistCarouselItemView`.
    static let videoPlaylistCarouselItemView = _R.nib._VideoPlaylistCarouselItemView()
    /// Nib `VideoPlaylistTableViewCell`.
    static let videoPlaylistTableViewCell = _R.nib._VideoPlaylistTableViewCell()
    /// Nib `VideoPlaylistViewController`.
    static let videoPlaylistViewController = _R.nib._VideoPlaylistViewController()
    /// Nib `VideoSeekBarView`.
    static let videoSeekBarView = _R.nib._VideoSeekBarView()
    /// Nib `VideoSingleItemCell`.
    static let videoSingleItemCell = _R.nib._VideoSingleItemCell()
    /// Nib `VideoTitleFullScreenView`.
    static let videoTitleFullScreenView = _R.nib._VideoTitleFullScreenView()
    
    /// `UINib(name: "AboutTabAboutCell", in: bundle)`
    static func aboutTabAboutCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutTabAboutCell)
    }
    
    /// `UINib(name: "AboutTabLocationCell", in: bundle)`
    static func aboutTabLocationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutTabLocationCell)
    }
    
    /// `UINib(name: "AboutTabMetadataCell", in: bundle)`
    static func aboutTabMetadataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutTabMetadataCell)
    }
    
    /// `UINib(name: "AboutTabMetadataView", in: bundle)`
    static func aboutTabMetadataView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutTabMetadataView)
    }
    
    /// `UINib(name: "AboutTabSocialNetworksCell", in: bundle)`
    static func aboutTabSocialNetworksCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutTabSocialNetworksCell)
    }
    
    /// `UINib(name: "ActivityCardView", in: bundle)`
    static func activityCardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityCardView)
    }
    
    /// `UINib(name: "AirTimeCell", in: bundle)`
    static func airTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.airTimeCell)
    }
    
    /// `UINib(name: "AirTimeListViewController", in: bundle)`
    static func airTimeListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.airTimeListViewController)
    }
    
    /// `UINib(name: "AppCardTableViewCell", in: bundle)`
    static func appCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appCardTableViewCell)
    }
    
    /// `UINib(name: "AppCarouselItemView", in: bundle)`
    static func appCarouselItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appCarouselItemView)
    }
    
    /// `UINib(name: "AppHeaderCell", in: bundle)`
    static func appHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appHeaderCell)
    }
    
    /// `UINib(name: "AppListingCell", in: bundle)`
    static func appListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appListingCell)
    }
    
    /// `UINib(name: "AppUpgradeViewController", in: bundle)`
    static func appUpgradeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appUpgradeViewController)
    }
    
    /// `UINib(name: "AppWhitePageTableViewCell", in: bundle)`
    static func appWhitePageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appWhitePageTableViewCell)
    }
    
    /// `UINib(name: "ArticleEmbeddedCell", in: bundle)`
    static func articleEmbeddedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleEmbeddedCell)
    }
    
    /// `UINib(name: "ArticleHeaderCell", in: bundle)`
    static func articleHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleHeaderCell)
    }
    
    /// `UINib(name: "ArticleParagraphImageCell", in: bundle)`
    static func articleParagraphImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleParagraphImageCell)
    }
    
    /// `UINib(name: "ArticleParagraphTextCell", in: bundle)`
    static func articleParagraphTextCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleParagraphTextCell)
    }
    
    /// `UINib(name: "ArticleVideoCell", in: bundle)`
    static func articleVideoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleVideoCell)
    }
    
    /// `UINib(name: "AvatarFullScreenView", in: bundle)`
    static func avatarFullScreenView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.avatarFullScreenView)
    }
    
    /// `UINib(name: "BannerAdsViewCell", in: bundle)`
    static func bannerAdsViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bannerAdsViewCell)
    }
    
    /// `UINib(name: "BundleCarouselCollectionViewCell", in: bundle)`
    static func bundleCarouselCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bundleCarouselCollectionViewCell)
    }
    
    /// `UINib(name: "BundleContentViewController", in: bundle)`
    static func bundleContentViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bundleContentViewController)
    }
    
    /// `UINib(name: "BundleHeaderView", in: bundle)`
    static func bundleHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bundleHeaderView)
    }
    
    /// `UINib(name: "BundleSearchResultCell", in: bundle)`
    static func bundleSearchResultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bundleSearchResultCell)
    }
    
    /// `UINib(name: "BundleSingleItemCell", in: bundle)`
    static func bundleSingleItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bundleSingleItemCell)
    }
    
    /// `UINib(name: "BundleSingleItemCollectionViewCell", in: bundle)`
    static func bundleSingleItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bundleSingleItemCollectionViewCell)
    }
    
    /// `UINib(name: "BundleSingleItemInforCollectionViewCell", in: bundle)`
    static func bundleSingleItemInforCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bundleSingleItemInforCollectionViewCell)
    }
    
    /// `UINib(name: "CardImageItemCollectionViewCell", in: bundle)`
    static func cardImageItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardImageItemCollectionViewCell)
    }
    
    /// `UINib(name: "CardTextCell", in: bundle)`
    static func cardTextCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardTextCell)
    }
    
    /// `UINib(name: "CarouselTableViewCell", in: bundle)`
    static func carouselTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.carouselTableViewCell)
    }
    
    /// `UINib(name: "ChannelCollectionViewCell", in: bundle)`
    static func channelCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.channelCollectionViewCell)
    }
    
    /// `UINib(name: "ChannelListingViewController", in: bundle)`
    static func channelListingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.channelListingViewController)
    }
    
    /// `UINib(name: "ChannelTableViewCell", in: bundle)`
    static func channelTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.channelTableViewCell)
    }
    
    /// `UINib(name: "CommentViewCell", in: bundle)`
    static func commentViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentViewCell)
    }
    
    /// `UINib(name: "CommentViewController", in: bundle)`
    static func commentViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentViewController)
    }
    
    /// `UINib(name: "ContentFilterCell", in: bundle)`
    static func contentFilterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contentFilterCell)
    }
    
    /// `UINib(name: "ContentPageViewController", in: bundle)`
    static func contentPageViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contentPageViewController)
    }
    
    /// `UINib(name: "DropdownFormCell", in: bundle)`
    static func dropdownFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dropdownFormCell)
    }
    
    /// `UINib(name: "EmailVerificationViewController", in: bundle)`
    static func emailVerificationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emailVerificationViewController)
    }
    
    /// `UINib(name: "EmbedHeaderCell", in: bundle)`
    static func embedHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.embedHeaderCell)
    }
    
    /// `UINib(name: "EmbeddedCardCell", in: bundle)`
    static func embeddedCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.embeddedCardCell)
    }
    
    /// `UINib(name: "EpisodeCell", in: bundle)`
    static func episodeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.episodeCell)
    }
    
    /// `UINib(name: "EpisodeHeaderCell", in: bundle)`
    static func episodeHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.episodeHeaderCell)
    }
    
    /// `UINib(name: "EpisodePageTabCell", in: bundle)`
    static func episodePageTabCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.episodePageTabCell)
    }
    
    /// `UINib(name: "FilterDaysChannelView", in: bundle)`
    static func filterDaysChannelView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterDaysChannelView)
    }
    
    /// `UINib(name: "FollowView", in: bundle)`
    static func followView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.followView)
    }
    
    /// `UINib(name: "ForgotPasswordViewController", in: bundle)`
    static func forgotPasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forgotPasswordViewController)
    }
    
    /// `UINib(name: "FormViewController", in: bundle)`
    static func formViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.formViewController)
    }
    
    /// `UINib(name: "FullScreenAdsView", in: bundle)`
    static func fullScreenAdsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fullScreenAdsView)
    }
    
    /// `UINib(name: "HeaderCommentViewCell", in: bundle)`
    static func headerCommentViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerCommentViewCell)
    }
    
    /// `UINib(name: "HomeStreamSingleItemCell", in: bundle)`
    static func homeStreamSingleItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeStreamSingleItemCell)
    }
    
    /// `UINib(name: "IPadAppCardTableViewCell", in: bundle)`
    static func iPadAppCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadAppCardTableViewCell)
    }
    
    /// `UINib(name: "IPadBundleSingleItemCell", in: bundle)`
    static func iPadBundleSingleItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadBundleSingleItemCell)
    }
    
    /// `UINib(name: "IPadBundleSingleItemInforCollectionViewCell", in: bundle)`
    static func iPadBundleSingleItemInforCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadBundleSingleItemInforCollectionViewCell)
    }
    
    /// `UINib(name: "IPadEmbeddedCardCell", in: bundle)`
    static func iPadEmbeddedCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadEmbeddedCardCell)
    }
    
    /// `UINib(name: "IPadEpisodeCell", in: bundle)`
    static func iPadEpisodeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadEpisodeCell)
    }
    
    /// `UINib(name: "IPadHeaderCommentCell", in: bundle)`
    static func iPadHeaderCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadHeaderCommentCell)
    }
    
    /// `UINib(name: "IPadHomeStreamSingleItemCell", in: bundle)`
    static func iPadHomeStreamSingleItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadHomeStreamSingleItemCell)
    }
    
    /// `UINib(name: "IPadMBCLoadingPlaceHolderView", in: bundle)`
    static func iPadMBCLoadingPlaceHolderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadMBCLoadingPlaceHolderView)
    }
    
    /// `UINib(name: "IPadPageCardCell", in: bundle)`
    static func iPadPageCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadPageCardCell)
    }
    
    /// `UINib(name: "IPadPhotoAlbumCollectionCell", in: bundle)`
    static func iPadPhotoAlbumCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadPhotoAlbumCollectionCell)
    }
    
    /// `UINib(name: "IPadPhotoAlbumsCarouselTableViewCell", in: bundle)`
    static func iPadPhotoAlbumsCarouselTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadPhotoAlbumsCarouselTableViewCell)
    }
    
    /// `UINib(name: "IPadPhotoCollectionView", in: bundle)`
    static func iPadPhotoCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadPhotoCollectionView)
    }
    
    /// `UINib(name: "IPadPostCardMultiImagesTableViewCell", in: bundle)`
    static func iPadPostCardMultiImagesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadPostCardMultiImagesTableViewCell)
    }
    
    /// `UINib(name: "IPadTextCell", in: bundle)`
    static func iPadTextCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadTextCell)
    }
    
    /// `UINib(name: "IPadVideoPlaylistDescriptionCell", in: bundle)`
    static func iPadVideoPlaylistDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadVideoPlaylistDescriptionCell)
    }
    
    /// `UINib(name: "IPadVideoPlaylistHeaderCell", in: bundle)`
    static func iPadVideoPlaylistHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadVideoPlaylistHeaderCell)
    }
    
    /// `UINib(name: "IPadVideoPlaylistNextItemCell", in: bundle)`
    static func iPadVideoPlaylistNextItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadVideoPlaylistNextItemCell)
    }
    
    /// `UINib(name: "IPadVideoPlaylistViewController", in: bundle)`
    static func iPadVideoPlaylistViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadVideoPlaylistViewController)
    }
    
    /// `UINib(name: "ImageFormCell", in: bundle)`
    static func imageFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageFormCell)
    }
    
    /// `UINib(name: "InputMessageViewCell", in: bundle)`
    static func inputMessageViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputMessageViewCell)
    }
    
    /// `UINib(name: "InterestView", in: bundle)`
    static func interestView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.interestView)
    }
    
    /// `UINib(name: "LabelFormCell", in: bundle)`
    static func labelFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.labelFormCell)
    }
    
    /// `UINib(name: "LikeCommentShareView", in: bundle)`
    static func likeCommentShareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.likeCommentShareView)
    }
    
    /// `UINib(name: "LoadMoreCollectionViewCell", in: bundle)`
    static func loadMoreCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadMoreCollectionViewCell)
    }
    
    /// `UINib(name: "LoadMoreCommentCell", in: bundle)`
    static func loadMoreCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadMoreCommentCell)
    }
    
    /// `UINib(name: "LoadingNextAlbumView", in: bundle)`
    static func loadingNextAlbumView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingNextAlbumView)
    }
    
    /// `UINib(name: "LoadingPlaceHolderCollectionViewCell", in: bundle)`
    static func loadingPlaceHolderCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingPlaceHolderCollectionViewCell)
    }
    
    /// `UINib(name: "LoginViewController", in: bundle)`
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    
    /// `UINib(name: "MBCLoadingPlaceHolderView", in: bundle)`
    static func mbcLoadingPlaceHolderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mbcLoadingPlaceHolderView)
    }
    
    /// `UINib(name: "MenuCell", in: bundle)`
    static func menuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuCell)
    }
    
    /// `UINib(name: "MenuProfileCell", in: bundle)`
    static func menuProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuProfileCell)
    }
    
    /// `UINib(name: "NextVideoCountDownView", in: bundle)`
    static func nextVideoCountDownView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nextVideoCountDownView)
    }
    
    /// `UINib(name: "NotificationFormCell", in: bundle)`
    static func notificationFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationFormCell)
    }
    
    /// `UINib(name: "PageAppTableViewCell", in: bundle)`
    static func pageAppTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageAppTableViewCell)
    }
    
    /// `UINib(name: "PageBundleCarouselCell", in: bundle)`
    static func pageBundleCarouselCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageBundleCarouselCell)
    }
    
    /// `UINib(name: "PageBundleCarouselCollectionViewCell", in: bundle)`
    static func pageBundleCarouselCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageBundleCarouselCollectionViewCell)
    }
    
    /// `UINib(name: "PageCardCell", in: bundle)`
    static func pageCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageCardCell)
    }
    
    /// `UINib(name: "PageCarouselItemView", in: bundle)`
    static func pageCarouselItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageCarouselItemView)
    }
    
    /// `UINib(name: "PhotoAlbumICarouselItemView", in: bundle)`
    static func photoAlbumICarouselItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoAlbumICarouselItemView)
    }
    
    /// `UINib(name: "PhotoAlbumsCarouselTableViewCell", in: bundle)`
    static func photoAlbumsCarouselTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoAlbumsCarouselTableViewCell)
    }
    
    /// `UINib(name: "PhotoNoCustomAlbumTableViewCell", in: bundle)`
    static func photoNoCustomAlbumTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoNoCustomAlbumTableViewCell)
    }
    
    /// `UINib(name: "PhotoPostTableViewCell", in: bundle)`
    static func photoPostTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoPostTableViewCell)
    }
    
    /// `UINib(name: "PlaylistCarouselCollectionViewCell", in: bundle)`
    static func playlistCarouselCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playlistCarouselCollectionViewCell)
    }
    
    /// `UINib(name: "PlaylistSearchResultCell", in: bundle)`
    static func playlistSearchResultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playlistSearchResultCell)
    }
    
    /// `UINib(name: "PostCardMultiImagesTableViewCell", in: bundle)`
    static func postCardMultiImagesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postCardMultiImagesTableViewCell)
    }
    
    /// `UINib(name: "PostCarouselItemView", in: bundle)`
    static func postCarouselItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postCarouselItemView)
    }
    
    /// `UINib(name: "PostImageCell", in: bundle)`
    static func postImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postImageCell)
    }
    
    /// `UINib(name: "PostTextCell", in: bundle)`
    static func postTextCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postTextCell)
    }
    
    /// `UINib(name: "ProfileHeaderCell", in: bundle)`
    static func profileHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileHeaderCell)
    }
    
    /// `UINib(name: "RadioAdsViewCell", in: bundle)`
    static func radioAdsViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioAdsViewCell)
    }
    
    /// `UINib(name: "RadioChannelViewController", in: bundle)`
    static func radioChannelViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioChannelViewController)
    }
    
    /// `UINib(name: "RadioFeedViewCell", in: bundle)`
    static func radioFeedViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioFeedViewCell)
    }
    
    /// `UINib(name: "RadioGroupFormCell", in: bundle)`
    static func radioGroupFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioGroupFormCell)
    }
    
    /// `UINib(name: "RadioSocialCell", in: bundle)`
    static func radioSocialCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioSocialCell)
    }
    
    /// `UINib(name: "RadioSocialView", in: bundle)`
    static func radioSocialView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioSocialView)
    }
    
    /// `UINib(name: "RelatedContentCell", in: bundle)`
    static func relatedContentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.relatedContentCell)
    }
    
    /// `UINib(name: "RelatedContentSectionHeaderCell", in: bundle)`
    static func relatedContentSectionHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.relatedContentSectionHeaderCell)
    }
    
    /// `UINib(name: "ScheduleTableViewCell", in: bundle)`
    static func scheduleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scheduleTableViewCell)
    }
    
    /// `UINib(name: "SchedulerDaySelectionCell", in: bundle)`
    static func schedulerDaySelectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.schedulerDaySelectionCell)
    }
    
    /// `UINib(name: "SchedulerDaySelectionItemView", in: bundle)`
    static func schedulerDaySelectionItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.schedulerDaySelectionItemView)
    }
    
    /// `UINib(name: "SearchMenu", in: bundle)`
    static func searchMenu(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchMenu)
    }
    
    /// `UINib(name: "SearchMenuItemCell", in: bundle)`
    static func searchMenuItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchMenuItemCell)
    }
    
    /// `UINib(name: "SearchResultEmpty", in: bundle)`
    static func searchResultEmpty(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultEmpty)
    }
    
    /// `UINib(name: "SearchResultViewController", in: bundle)`
    static func searchResultViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultViewController)
    }
    
    /// `UINib(name: "SearchSuggestionCell", in: bundle)`
    static func searchSuggestionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchSuggestionCell)
    }
    
    /// `UINib(name: "SearchSuggestionFooterCell", in: bundle)`
    static func searchSuggestionFooterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchSuggestionFooterCell)
    }
    
    /// `UINib(name: "SearchSuggestionHeaderCell", in: bundle)`
    static func searchSuggestionHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchSuggestionHeaderCell)
    }
    
    /// `UINib(name: "SendMessageView", in: bundle)`
    static func sendMessageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendMessageView)
    }
    
    /// `UINib(name: "ShowListingCell", in: bundle)`
    static func showListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.showListingCell)
    }
    
    /// `UINib(name: "SignupViewController", in: bundle)`
    static func signupViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signupViewController)
    }
    
    /// `UINib(name: "SocialNetworkCollectionViewCell", in: bundle)`
    static func socialNetworkCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.socialNetworkCollectionViewCell)
    }
    
    /// `UINib(name: "SpecificChannelScheduleFilterDayView", in: bundle)`
    static func specificChannelScheduleFilterDayView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.specificChannelScheduleFilterDayView)
    }
    
    /// `UINib(name: "SpecificChannelScheduleViewController", in: bundle)`
    static func specificChannelScheduleViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.specificChannelScheduleViewController)
    }
    
    /// `UINib(name: "StarPageListingCell", in: bundle)`
    static func starPageListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.starPageListingCell)
    }
    
    /// `UINib(name: "TaggedPageItemCollectionViewCell", in: bundle)`
    static func taggedPageItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taggedPageItemCollectionViewCell)
    }
    
    /// `UINib(name: "TaggedPageItemTypeFullCollectionViewCell", in: bundle)`
    static func taggedPageItemTypeFullCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taggedPageItemTypeFullCollectionViewCell)
    }
    
    /// `UINib(name: "TaggedPageListingCell", in: bundle)`
    static func taggedPageListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taggedPageListingCell)
    }
    
    /// `UINib(name: "TaggedPageListingViewController", in: bundle)`
    static func taggedPageListingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taggedPageListingViewController)
    }
    
    /// `UINib(name: "TaggedPagesView", in: bundle)`
    static func taggedPagesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taggedPagesView)
    }
    
    /// `UINib(name: "TestViewController", in: bundle)`
    static func testViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.testViewController)
    }
    
    /// `UINib(name: "TextFieldFormCell", in: bundle)`
    static func textFieldFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textFieldFormCell)
    }
    
    /// `UINib(name: "TextViewFormCell", in: bundle)`
    static func textViewFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textViewFormCell)
    }
    
    /// `UINib(name: "TimestampAndContentTypeView", in: bundle)`
    static func timestampAndContentTypeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timestampAndContentTypeView)
    }
    
    /// `UINib(name: "UserProfileAddressCell", in: bundle)`
    static func userProfileAddressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileAddressCell)
    }
    
    /// `UINib(name: "UserProfileCell", in: bundle)`
    static func userProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileCell)
    }
    
    /// `UINib(name: "UserProfileChangePasswordCell", in: bundle)`
    static func userProfileChangePasswordCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileChangePasswordCell)
    }
    
    /// `UINib(name: "UserProfileGenderCell", in: bundle)`
    static func userProfileGenderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileGenderCell)
    }
    
    /// `UINib(name: "UserProfileViewController", in: bundle)`
    static func userProfileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileViewController)
    }
    
    /// `UINib(name: "VideoBitRateView", in: bundle)`
    static func videoBitRateView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoBitRateView)
    }
    
    /// `UINib(name: "VideoFullscreenLandscapeView", in: bundle)`
    static func videoFullscreenLandscapeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoFullscreenLandscapeView)
    }
    
    /// `UINib(name: "VideoFullscreenLoadingNextView", in: bundle)`
    static func videoFullscreenLoadingNextView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoFullscreenLoadingNextView)
    }
    
    /// `UINib(name: "VideoHeaderCell", in: bundle)`
    static func videoHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoHeaderCell)
    }
    
    /// `UINib(name: "VideoLiveStreamingCell", in: bundle)`
    static func videoLiveStreamingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoLiveStreamingCell)
    }
    
    /// `UINib(name: "VideoPlaylistCarouselItemView", in: bundle)`
    static func videoPlaylistCarouselItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlaylistCarouselItemView)
    }
    
    /// `UINib(name: "VideoPlaylistTableViewCell", in: bundle)`
    static func videoPlaylistTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlaylistTableViewCell)
    }
    
    /// `UINib(name: "VideoPlaylistViewController", in: bundle)`
    static func videoPlaylistViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlaylistViewController)
    }
    
    /// `UINib(name: "VideoSeekBarView", in: bundle)`
    static func videoSeekBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoSeekBarView)
    }
    
    /// `UINib(name: "VideoSingleItemCell", in: bundle)`
    static func videoSingleItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoSingleItemCell)
    }
    
    /// `UINib(name: "VideoTitleFullScreenView", in: bundle)`
    static func videoTitleFullScreenView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoTitleFullScreenView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 104 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AboutTabAboutCell`.
    static let aboutTabAboutCell: Rswift.ReuseIdentifier<AboutTabAboutCell> = Rswift.ReuseIdentifier(identifier: "AboutTabAboutCell")
    /// Reuse identifier `AboutTabLocationCell`.
    static let aboutTabLocationCell: Rswift.ReuseIdentifier<AboutTabLocationCell> = Rswift.ReuseIdentifier(identifier: "AboutTabLocationCell")
    /// Reuse identifier `AboutTabMetadataCell`.
    static let aboutTabMetadataCell: Rswift.ReuseIdentifier<AboutTabMetadataCell> = Rswift.ReuseIdentifier(identifier: "AboutTabMetadataCell")
    /// Reuse identifier `AboutTabSocialNetworksCell`.
    static let aboutTabSocialNetworksCell: Rswift.ReuseIdentifier<AboutTabSocialNetworksCell> = Rswift.ReuseIdentifier(identifier: "AboutTabSocialNetworksCell")
    /// Reuse identifier `AirTimeCellId`.
    static let airTimeCellId: Rswift.ReuseIdentifier<AirTimeCell> = Rswift.ReuseIdentifier(identifier: "AirTimeCellId")
    /// Reuse identifier `AppCardTableViewCellid`.
    static let appCardTableViewCellid: Rswift.ReuseIdentifier<AppCardTableViewCell> = Rswift.ReuseIdentifier(identifier: "AppCardTableViewCellid")
    /// Reuse identifier `AppCarouselItemView`.
    static let appCarouselItemView: Rswift.ReuseIdentifier<AppCarouselItemView> = Rswift.ReuseIdentifier(identifier: "AppCarouselItemView")
    /// Reuse identifier `AppHeaderCell`.
    static let appHeaderCell: Rswift.ReuseIdentifier<AppHeaderCell> = Rswift.ReuseIdentifier(identifier: "AppHeaderCell")
    /// Reuse identifier `AppListingCell`.
    static let appListingCell: Rswift.ReuseIdentifier<AppListingCell> = Rswift.ReuseIdentifier(identifier: "AppListingCell")
    /// Reuse identifier `AppWhitePageTableViewCell`.
    static let appWhitePageTableViewCell: Rswift.ReuseIdentifier<AppWhitePageTableViewCell> = Rswift.ReuseIdentifier(identifier: "AppWhitePageTableViewCell")
    /// Reuse identifier `ArticleEmbeddedCell`.
    static let articleEmbeddedCell: Rswift.ReuseIdentifier<ArticleEmbeddedCell> = Rswift.ReuseIdentifier(identifier: "ArticleEmbeddedCell")
    /// Reuse identifier `ArticleHeaderCell`.
    static let articleHeaderCell: Rswift.ReuseIdentifier<ArticleHeaderCell> = Rswift.ReuseIdentifier(identifier: "ArticleHeaderCell")
    /// Reuse identifier `ArticleParagraphImageCell`.
    static let articleParagraphImageCell: Rswift.ReuseIdentifier<ArticleParagraphImageCell> = Rswift.ReuseIdentifier(identifier: "ArticleParagraphImageCell")
    /// Reuse identifier `ArticleParagraphTextCell`.
    static let articleParagraphTextCell: Rswift.ReuseIdentifier<ArticleParagraphTextCell> = Rswift.ReuseIdentifier(identifier: "ArticleParagraphTextCell")
    /// Reuse identifier `ArticleVideoCell`.
    static let articleVideoCell: Rswift.ReuseIdentifier<ArticleVideoCell> = Rswift.ReuseIdentifier(identifier: "ArticleVideoCell")
    /// Reuse identifier `BannerAdsViewCell`.
    static let bannerAdsViewCell: Rswift.ReuseIdentifier<BannerAdsViewCell> = Rswift.ReuseIdentifier(identifier: "BannerAdsViewCell")
    /// Reuse identifier `BundleCarouselCollectionViewCell`.
    static let bundleCarouselCollectionViewCell: Rswift.ReuseIdentifier<BundleCarouselCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BundleCarouselCollectionViewCell")
    /// Reuse identifier `BundleSearchResultCell`.
    static let bundleSearchResultCell: Rswift.ReuseIdentifier<BundleSearchResultCell> = Rswift.ReuseIdentifier(identifier: "BundleSearchResultCell")
    /// Reuse identifier `BundleSingleItemCell`.
    static let bundleSingleItemCell: Rswift.ReuseIdentifier<BundleSingleItemCell> = Rswift.ReuseIdentifier(identifier: "BundleSingleItemCell")
    /// Reuse identifier `BundleSingleItemCollectionViewCell`.
    static let bundleSingleItemCollectionViewCell: Rswift.ReuseIdentifier<BundleSingleItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BundleSingleItemCollectionViewCell")
    /// Reuse identifier `BundleSingleItemInforCollectionViewCell`.
    static let bundleSingleItemInforCollectionViewCell: Rswift.ReuseIdentifier<BundleSingleItemInforCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BundleSingleItemInforCollectionViewCell")
    /// Reuse identifier `CardImageItemCollectionViewCell.id`.
    static let cardImageItemCollectionViewCellId: Rswift.ReuseIdentifier<CardImageItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CardImageItemCollectionViewCell.id")
    /// Reuse identifier `CardTextCellId`.
    static let cardTextCellId: Rswift.ReuseIdentifier<CardTextCell> = Rswift.ReuseIdentifier(identifier: "CardTextCellId")
    /// Reuse identifier `CarouselTableViewCellid`.
    static let carouselTableViewCellid: Rswift.ReuseIdentifier<CarouselTableViewCell> = Rswift.ReuseIdentifier(identifier: "CarouselTableViewCellid")
    /// Reuse identifier `ChannelCollectionViewCell`.
    static let channelCollectionViewCell: Rswift.ReuseIdentifier<ChannelCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ChannelCollectionViewCell")
    /// Reuse identifier `ChannelTableViewCellId`.
    static let channelTableViewCellId: Rswift.ReuseIdentifier<ChannelTableViewCell> = Rswift.ReuseIdentifier(identifier: "ChannelTableViewCellId")
    /// Reuse identifier `CommentViewCellId`.
    static let commentViewCellId: Rswift.ReuseIdentifier<CommentViewCell> = Rswift.ReuseIdentifier(identifier: "CommentViewCellId")
    /// Reuse identifier `ContentFilterCellId`.
    static let contentFilterCellId: Rswift.ReuseIdentifier<ContentFilterCell> = Rswift.ReuseIdentifier(identifier: "ContentFilterCellId")
    /// Reuse identifier `DropdownFormCellId`.
    static let dropdownFormCellId: Rswift.ReuseIdentifier<DropdownFormCell> = Rswift.ReuseIdentifier(identifier: "DropdownFormCellId")
    /// Reuse identifier `EmbedHeaderCell`.
    static let embedHeaderCell: Rswift.ReuseIdentifier<EmbedHeaderCell> = Rswift.ReuseIdentifier(identifier: "EmbedHeaderCell")
    /// Reuse identifier `EmbeddedCardCell`.
    static let embeddedCardCell: Rswift.ReuseIdentifier<EmbeddedCardCell> = Rswift.ReuseIdentifier(identifier: "EmbeddedCardCell")
    /// Reuse identifier `EpisodeCell`.
    static let episodeCell: Rswift.ReuseIdentifier<EpisodeCell> = Rswift.ReuseIdentifier(identifier: "EpisodeCell")
    /// Reuse identifier `EpisodeHeaderCell`.
    static let episodeHeaderCell: Rswift.ReuseIdentifier<EpisodeHeaderCell> = Rswift.ReuseIdentifier(identifier: "EpisodeHeaderCell")
    /// Reuse identifier `EpisodePageTabCell`.
    static let episodePageTabCell: Rswift.ReuseIdentifier<EpisodePageTabCell> = Rswift.ReuseIdentifier(identifier: "EpisodePageTabCell")
    /// Reuse identifier `HeaderCommentViewCellId`.
    static let headerCommentViewCellId: Rswift.ReuseIdentifier<HeaderCommentViewCell> = Rswift.ReuseIdentifier(identifier: "HeaderCommentViewCellId")
    /// Reuse identifier `HomeStreamSingleItemCell`.
    static let homeStreamSingleItemCell: Rswift.ReuseIdentifier<HomeStreamSingleItemCell> = Rswift.ReuseIdentifier(identifier: "HomeStreamSingleItemCell")
    /// Reuse identifier `IPadAppCardTableViewCellid`.
    static let iPadAppCardTableViewCellid: Rswift.ReuseIdentifier<AppCardTableViewCell> = Rswift.ReuseIdentifier(identifier: "IPadAppCardTableViewCellid")
    /// Reuse identifier `IPadBundleSingleItemCellId`.
    static let iPadBundleSingleItemCellId: Rswift.ReuseIdentifier<BundleSingleItemCell> = Rswift.ReuseIdentifier(identifier: "IPadBundleSingleItemCellId")
    /// Reuse identifier `IPadBundleSingleItemInforCollectionViewCellId`.
    static let iPadBundleSingleItemInforCollectionViewCellId: Rswift.ReuseIdentifier<BundleSingleItemInforCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "IPadBundleSingleItemInforCollectionViewCellId")
    /// Reuse identifier `IPadEmbeddedCardCellid`.
    static let iPadEmbeddedCardCellid: Rswift.ReuseIdentifier<EmbeddedCardCell> = Rswift.ReuseIdentifier(identifier: "IPadEmbeddedCardCellid")
    /// Reuse identifier `IPadEpisodeCell`.
    static let iPadEpisodeCell: Rswift.ReuseIdentifier<EpisodeCell> = Rswift.ReuseIdentifier(identifier: "IPadEpisodeCell")
    /// Reuse identifier `IPadHomeStreamSingleItemCellId`.
    static let iPadHomeStreamSingleItemCellId: Rswift.ReuseIdentifier<HomeStreamSingleItemCell> = Rswift.ReuseIdentifier(identifier: "IPadHomeStreamSingleItemCellId")
    /// Reuse identifier `IPadPageCardCellId`.
    static let iPadPageCardCellId: Rswift.ReuseIdentifier<PageCardCell> = Rswift.ReuseIdentifier(identifier: "IPadPageCardCellId")
    /// Reuse identifier `IPadPhotoAlbumCollectionCellId`.
    static let iPadPhotoAlbumCollectionCellId: Rswift.ReuseIdentifier<IPadPhotoAlbumCollectionCell> = Rswift.ReuseIdentifier(identifier: "IPadPhotoAlbumCollectionCellId")
    /// Reuse identifier `IPadPhotoAlbumsCarouselTableViewCellid`.
    static let iPadPhotoAlbumsCarouselTableViewCellid: Rswift.ReuseIdentifier<IPadPhotoAlbumsCarouselTableViewCell> = Rswift.ReuseIdentifier(identifier: "IPadPhotoAlbumsCarouselTableViewCellid")
    /// Reuse identifier `IPadPhotoCollectionViewId`.
    static let iPadPhotoCollectionViewId: Rswift.ReuseIdentifier<IPadPhotoCollectionView> = Rswift.ReuseIdentifier(identifier: "IPadPhotoCollectionViewId")
    /// Reuse identifier `IPadPostCardMultiImagesTableViewCellid`.
    static let iPadPostCardMultiImagesTableViewCellid: Rswift.ReuseIdentifier<PostCardMultiImagesTableViewCell> = Rswift.ReuseIdentifier(identifier: "IPadPostCardMultiImagesTableViewCellid")
    /// Reuse identifier `ImageFormCellId`.
    static let imageFormCellId: Rswift.ReuseIdentifier<ImageFormCell> = Rswift.ReuseIdentifier(identifier: "ImageFormCellId")
    /// Reuse identifier `InputMessageViewCell`.
    static let inputMessageViewCell: Rswift.ReuseIdentifier<InputMessageViewCell> = Rswift.ReuseIdentifier(identifier: "InputMessageViewCell")
    /// Reuse identifier `LabelFormCellId`.
    static let labelFormCellId: Rswift.ReuseIdentifier<LabelFormCell> = Rswift.ReuseIdentifier(identifier: "LabelFormCellId")
    /// Reuse identifier `LoadMoreCollectionViewCell`.
    static let loadMoreCollectionViewCell: Rswift.ReuseIdentifier<LoadMoreCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "LoadMoreCollectionViewCell")
    /// Reuse identifier `LoadMoreCommentCell`.
    static let loadMoreCommentCell: Rswift.ReuseIdentifier<LoadMoreCommentCell> = Rswift.ReuseIdentifier(identifier: "LoadMoreCommentCell")
    /// Reuse identifier `LoadingPlaceHolderCollectionViewCell`.
    static let loadingPlaceHolderCollectionViewCell: Rswift.ReuseIdentifier<LoadingPlaceHolderCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "LoadingPlaceHolderCollectionViewCell")
    /// Reuse identifier `MenuCellId`.
    static let menuCellId: Rswift.ReuseIdentifier<MenuCell> = Rswift.ReuseIdentifier(identifier: "MenuCellId")
    /// Reuse identifier `MenuProfileCellId`.
    static let menuProfileCellId: Rswift.ReuseIdentifier<MenuProfileCell> = Rswift.ReuseIdentifier(identifier: "MenuProfileCellId")
    /// Reuse identifier `NotificationFormCellId`.
    static let notificationFormCellId: Rswift.ReuseIdentifier<NotificationFormCell> = Rswift.ReuseIdentifier(identifier: "NotificationFormCellId")
    /// Reuse identifier `PageAppTableViewCellid`.
    static let pageAppTableViewCellid: Rswift.ReuseIdentifier<PageAppTableViewCell> = Rswift.ReuseIdentifier(identifier: "PageAppTableViewCellid")
    /// Reuse identifier `PageBundleCarouselCell`.
    static let pageBundleCarouselCell: Rswift.ReuseIdentifier<PageBundleCarouselCell> = Rswift.ReuseIdentifier(identifier: "PageBundleCarouselCell")
    /// Reuse identifier `PageBundleCarouselCollectionViewCell`.
    static let pageBundleCarouselCollectionViewCell: Rswift.ReuseIdentifier<PageBundleCarouselCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PageBundleCarouselCollectionViewCell")
    /// Reuse identifier `PageCardCellId`.
    static let pageCardCellId: Rswift.ReuseIdentifier<PageCardCell> = Rswift.ReuseIdentifier(identifier: "PageCardCellId")
    /// Reuse identifier `PageCarouselItemView`.
    static let pageCarouselItemView: Rswift.ReuseIdentifier<PageCarouselItemView> = Rswift.ReuseIdentifier(identifier: "PageCarouselItemView")
    /// Reuse identifier `PhotoAlbumsCarouselTableViewCellid`.
    static let photoAlbumsCarouselTableViewCellid: Rswift.ReuseIdentifier<PhotoAlbumsCarouselTableViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoAlbumsCarouselTableViewCellid")
    /// Reuse identifier `PhotoNoCustomAlbumTableViewCellid`.
    static let photoNoCustomAlbumTableViewCellid: Rswift.ReuseIdentifier<PhotoNoCustomAlbumTableViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoNoCustomAlbumTableViewCellid")
    /// Reuse identifier `PhotoPostTableViewCellid`.
    static let photoPostTableViewCellid: Rswift.ReuseIdentifier<PhotoPostTableViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoPostTableViewCellid")
    /// Reuse identifier `PlaylistCarouselCollectionViewCell`.
    static let playlistCarouselCollectionViewCell: Rswift.ReuseIdentifier<PlaylistCarouselCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PlaylistCarouselCollectionViewCell")
    /// Reuse identifier `PlaylistSearchResultCell`.
    static let playlistSearchResultCell: Rswift.ReuseIdentifier<PlaylistSearchResultCell> = Rswift.ReuseIdentifier(identifier: "PlaylistSearchResultCell")
    /// Reuse identifier `PostCardMultiImagesTableViewCellid`.
    static let postCardMultiImagesTableViewCellid: Rswift.ReuseIdentifier<PostCardMultiImagesTableViewCell> = Rswift.ReuseIdentifier(identifier: "PostCardMultiImagesTableViewCellid")
    /// Reuse identifier `PostCarouselItemView`.
    static let postCarouselItemView: Rswift.ReuseIdentifier<PostCarouselItemView> = Rswift.ReuseIdentifier(identifier: "PostCarouselItemView")
    /// Reuse identifier `PostImageCell`.
    static let postImageCell: Rswift.ReuseIdentifier<PostImageCell> = Rswift.ReuseIdentifier(identifier: "PostImageCell")
    /// Reuse identifier `PostTextCell`.
    static let postTextCell: Rswift.ReuseIdentifier<PostTextCell> = Rswift.ReuseIdentifier(identifier: "PostTextCell")
    /// Reuse identifier `ProfileHeaderCellId`.
    static let profileHeaderCellId: Rswift.ReuseIdentifier<ProfileHeaderCell> = Rswift.ReuseIdentifier(identifier: "ProfileHeaderCellId")
    /// Reuse identifier `RadioAdsViewCell`.
    static let radioAdsViewCell: Rswift.ReuseIdentifier<RadioAdsViewCell> = Rswift.ReuseIdentifier(identifier: "RadioAdsViewCell")
    /// Reuse identifier `RadioGroupFormCellId`.
    static let radioGroupFormCellId: Rswift.ReuseIdentifier<RadioGroupFormCell> = Rswift.ReuseIdentifier(identifier: "RadioGroupFormCellId")
    /// Reuse identifier `RelatedContentCell`.
    static let relatedContentCell: Rswift.ReuseIdentifier<RelatedContentCell> = Rswift.ReuseIdentifier(identifier: "RelatedContentCell")
    /// Reuse identifier `RelatedContentSectionHeaderCell`.
    static let relatedContentSectionHeaderCell: Rswift.ReuseIdentifier<RelatedContentSectionHeaderCell> = Rswift.ReuseIdentifier(identifier: "RelatedContentSectionHeaderCell")
    /// Reuse identifier `ScheduleTableViewCellid`.
    static let scheduleTableViewCellid: Rswift.ReuseIdentifier<ScheduleTableViewCell> = Rswift.ReuseIdentifier(identifier: "ScheduleTableViewCellid")
    /// Reuse identifier `SchedulerDaySelectionCellid`.
    static let schedulerDaySelectionCellid: Rswift.ReuseIdentifier<SchedulerDaySelectionCell> = Rswift.ReuseIdentifier(identifier: "SchedulerDaySelectionCellid")
    /// Reuse identifier `SearchMenuItemCell`.
    static let searchMenuItemCell: Rswift.ReuseIdentifier<SearchMenuItemCell> = Rswift.ReuseIdentifier(identifier: "SearchMenuItemCell")
    /// Reuse identifier `SearchSuggestionCellId`.
    static let searchSuggestionCellId: Rswift.ReuseIdentifier<SearchSuggestionCell> = Rswift.ReuseIdentifier(identifier: "SearchSuggestionCellId")
    /// Reuse identifier `SearchSuggestionFooterCellId`.
    static let searchSuggestionFooterCellId: Rswift.ReuseIdentifier<SearchSuggestionFooterCell> = Rswift.ReuseIdentifier(identifier: "SearchSuggestionFooterCellId")
    /// Reuse identifier `SearchSuggestionHeaderCellId`.
    static let searchSuggestionHeaderCellId: Rswift.ReuseIdentifier<SearchSuggestionHeaderCell> = Rswift.ReuseIdentifier(identifier: "SearchSuggestionHeaderCellId")
    /// Reuse identifier `ShowListingCell`.
    static let showListingCell: Rswift.ReuseIdentifier<ShowListingCell> = Rswift.ReuseIdentifier(identifier: "ShowListingCell")
    /// Reuse identifier `SocialNetworkCollectionViewCell`.
    static let socialNetworkCollectionViewCell: Rswift.ReuseIdentifier<SocialNetworkCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SocialNetworkCollectionViewCell")
    /// Reuse identifier `StarPageListingCellId`.
    static let starPageListingCellId: Rswift.ReuseIdentifier<StarPageListingCell> = Rswift.ReuseIdentifier(identifier: "StarPageListingCellId")
    /// Reuse identifier `TaggedPageItemCollectionViewCellid`.
    static let taggedPageItemCollectionViewCellid: Rswift.ReuseIdentifier<TaggedPageItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TaggedPageItemCollectionViewCellid")
    /// Reuse identifier `TaggedPageItemTypeFullCollectionViewCellid`.
    static let taggedPageItemTypeFullCollectionViewCellid: Rswift.ReuseIdentifier<TaggedPageItemTypeFullCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TaggedPageItemTypeFullCollectionViewCellid")
    /// Reuse identifier `TaggedPageListingCell`.
    static let taggedPageListingCell: Rswift.ReuseIdentifier<TaggedPageListingCell> = Rswift.ReuseIdentifier(identifier: "TaggedPageListingCell")
    /// Reuse identifier `TextFieldFormCellId`.
    static let textFieldFormCellId: Rswift.ReuseIdentifier<TextFieldFormCell> = Rswift.ReuseIdentifier(identifier: "TextFieldFormCellId")
    /// Reuse identifier `TextViewFormCellId`.
    static let textViewFormCellId: Rswift.ReuseIdentifier<TextViewFormCell> = Rswift.ReuseIdentifier(identifier: "TextViewFormCellId")
    /// Reuse identifier `UserProfileAddressCellId`.
    static let userProfileAddressCellId: Rswift.ReuseIdentifier<UserProfileAddressCell> = Rswift.ReuseIdentifier(identifier: "UserProfileAddressCellId")
    /// Reuse identifier `UserProfileCellId`.
    static let userProfileCellId: Rswift.ReuseIdentifier<UserProfileCell> = Rswift.ReuseIdentifier(identifier: "UserProfileCellId")
    /// Reuse identifier `UserProfileChangePasswordCellId`.
    static let userProfileChangePasswordCellId: Rswift.ReuseIdentifier<UserProfileChangePasswordCell> = Rswift.ReuseIdentifier(identifier: "UserProfileChangePasswordCellId")
    /// Reuse identifier `UserProfileGenderCellId`.
    static let userProfileGenderCellId: Rswift.ReuseIdentifier<UserProfileGenderCell> = Rswift.ReuseIdentifier(identifier: "UserProfileGenderCellId")
    /// Reuse identifier `VideoHeaderCell`.
    static let videoHeaderCell: Rswift.ReuseIdentifier<VideoHeaderCell> = Rswift.ReuseIdentifier(identifier: "VideoHeaderCell")
    /// Reuse identifier `VideoLiveStreamingCell`.
    static let videoLiveStreamingCell: Rswift.ReuseIdentifier<VideoLiveStreamingCell> = Rswift.ReuseIdentifier(identifier: "VideoLiveStreamingCell")
    /// Reuse identifier `VideoPlaylistTableViewCellid`.
    static let videoPlaylistTableViewCellid: Rswift.ReuseIdentifier<VideoPlaylistTableViewCell> = Rswift.ReuseIdentifier(identifier: "VideoPlaylistTableViewCellid")
    /// Reuse identifier `VideoSingleItemCellId`.
    static let videoSingleItemCellId: Rswift.ReuseIdentifier<VideoSingleItemCell> = Rswift.ReuseIdentifier(identifier: "VideoSingleItemCellId")
    /// Reuse identifier `iPadHeaderCommentCell`.
    static let iPadHeaderCommentCell: Rswift.ReuseIdentifier<HeaderCommentViewCell> = Rswift.ReuseIdentifier(identifier: "iPadHeaderCommentCell")
    /// Reuse identifier `iPadTextCell`.
    static let iPadTextCell: Rswift.ReuseIdentifier<IPadTextCell> = Rswift.ReuseIdentifier(identifier: "iPadTextCell")
    /// Reuse identifier `iPadVideoPlaylistDescriptionCell`.
    static let iPadVideoPlaylistDescriptionCell: Rswift.ReuseIdentifier<IPadVideoPlaylistDescriptionCell> = Rswift.ReuseIdentifier(identifier: "iPadVideoPlaylistDescriptionCell")
    /// Reuse identifier `iPadVideoPlaylistHeaderCell`.
    static let iPadVideoPlaylistHeaderCell: Rswift.ReuseIdentifier<IPadVideoPlaylistHeaderCell> = Rswift.ReuseIdentifier(identifier: "iPadVideoPlaylistHeaderCell")
    /// Reuse identifier `iPadVideoPlaylistNextItemCell`.
    static let iPadVideoPlaylistNextItemCell: Rswift.ReuseIdentifier<IPadVideoPlaylistNextItemCell> = Rswift.ReuseIdentifier(identifier: "iPadVideoPlaylistNextItemCell")
    /// Reuse identifier `radioFeedViewCell`.
    static let radioFeedViewCell: Rswift.ReuseIdentifier<RadioFeedViewCell> = Rswift.ReuseIdentifier(identifier: "radioFeedViewCell")
    /// Reuse identifier `radioSocialCell`.
    static let radioSocialCell: Rswift.ReuseIdentifier<RadioSocialCell> = Rswift.ReuseIdentifier(identifier: "radioSocialCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 6 view controllers.
  struct segue {
    /// This struct is generated for `DashboardViewController`, and contains static references to 1 segues.
    struct dashboardViewController {
      /// Segue identifier `segue.dashboard.embedded.tabbar`.
      static let segueDashboardEmbeddedTabbar: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DashboardViewController, BaseTabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "segue.dashboard.embedded.tabbar")
      
      /// Optionally returns a typed version of segue `segue.dashboard.embedded.tabbar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueDashboardEmbeddedTabbar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DashboardViewController, BaseTabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dashboardViewController.segueDashboardEmbeddedTabbar, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ListingViewController`, and contains static references to 1 segues.
    struct listingViewController {
      /// Segue identifier `appListing.toAppWhitePage`.
      static let appListingToAppWhitePage: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ListingViewController, AppWhitePageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "appListing.toAppWhitePage")
      
      /// Optionally returns a typed version of segue `appListing.toAppWhitePage`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func appListingToAppWhitePage(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ListingViewController, AppWhitePageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.listingViewController.appListingToAppWhitePage, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 2 segues.
    struct loginViewController {
      /// Segue identifier `login.toForgotPass`.
      static let loginToForgotPass: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, ForgotPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "login.toForgotPass")
      /// Segue identifier `login.toSignup`.
      static let loginToSignup: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, SignupViewController> = Rswift.StoryboardSegueIdentifier(identifier: "login.toSignup")
      
      /// Optionally returns a typed version of segue `login.toForgotPass`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func loginToForgotPass(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, ForgotPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.loginToForgotPass, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `login.toSignup`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func loginToSignup(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, SignupViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.loginToSignup, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MenuViewController`, and contains static references to 1 segues.
    struct menuViewController {
      /// Segue identifier `segue.menu.selectFeaturedPage`.
      static let segueMenuSelectFeaturedPage: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MenuViewController, MBC.PageDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segue.menu.selectFeaturedPage")
      
      /// Optionally returns a typed version of segue `segue.menu.selectFeaturedPage`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueMenuSelectFeaturedPage(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MenuViewController, MBC.PageDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.menuViewController.segueMenuSelectFeaturedPage, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PageDetailViewController`, and contains static references to 2 segues.
    struct mbcPageDetailViewController {
      /// Segue identifier `segue.pagedetail.pageheader`.
      static let seguePagedetailPageheader: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MBC.PageDetailViewController, PageHeaderViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segue.pagedetail.pageheader")
      /// Segue identifier `segue.pagedetail.pageheaderipad`.
      static let seguePagedetailPageheaderipad: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MBC.PageDetailViewController, PageHeaderViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segue.pagedetail.pageheaderipad")
      
      /// Optionally returns a typed version of segue `segue.pagedetail.pageheader`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func seguePagedetailPageheader(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MBC.PageDetailViewController, PageHeaderViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mbcPageDetailViewController.seguePagedetailPageheader, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segue.pagedetail.pageheaderipad`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func seguePagedetailPageheaderipad(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MBC.PageDetailViewController, PageHeaderViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mbcPageDetailViewController.seguePagedetailPageheaderipad, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignupViewController`, and contains static references to 1 segues.
    struct signupViewController {
      /// Segue identifier `signup.toVeirifyEmail`.
      static let signupToVeirifyEmail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignupViewController, EmailVerificationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "signup.toVeirifyEmail")
      
      /// Optionally returns a typed version of segue `signup.toVeirifyEmail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signupToVeirifyEmail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignupViewController, EmailVerificationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signupViewController.signupToVeirifyEmail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `App`.
    static let app = _R.storyboard.app()
    /// Storyboard `Authentication`.
    static let authentication = _R.storyboard.authentication()
    /// Storyboard `FullScreenPhoto`.
    static let fullScreenPhoto = _R.storyboard.fullScreenPhoto()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `PageDetail`.
    static let pageDetail = _R.storyboard.pageDetail()
    
    /// `UIStoryboard(name: "App", bundle: ...)`
    static func app(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.app)
    }
    
    /// `UIStoryboard(name: "Authentication", bundle: ...)`
    static func authentication(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authentication)
    }
    
    /// `UIStoryboard(name: "FullScreenPhoto", bundle: ...)`
    static func fullScreenPhoto(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fullScreenPhoto)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "PageDetail", bundle: ...)`
    static func pageDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pageDetail)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      /// ar translation: $(APP_NAME) want to access your camera.
      /// 
      /// Locales: ar
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: $(APP_NAME) want to access your photo library.
      /// 
      /// Locales: ar
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      
      /// ar translation: $(APP_NAME) want to access your camera.
      /// 
      /// Locales: ar
      static func nsCameraUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: $(APP_NAME) want to access your photo library.
      /// 
      /// Locales: ar
      static func nsPhotoLibraryUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 531 localization keys.
    struct localizable {
      /// ar translation: 
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlAboutcorporate = Rswift.StringResource(key: "sidemenu.staticPageUrl.aboutcorporate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlFreequency = Rswift.StringResource(key: "sidemenu.staticPageUrl.freequency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlHd = Rswift.StringResource(key: "sidemenu.staticPageUrl.hd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation:  المزيد 
      /// 
      /// Locales: ar
      static let commonCardLinkReadMore = Rswift.StringResource(key: "common.card.link.readMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation:  موعد انتهاء الفعالية
      /// 
      /// Locales: ar
      static let abouttabEnddate = Rswift.StringResource(key: "abouttab.enddate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ %@
      /// 
      /// Locales: ar
      static let commonShareTextFormat2params = Rswift.StringResource(key: "common.shareText.format2params", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ %@ %@
      /// 
      /// Locales: ar
      static let commonShareTextFormat3params = Rswift.StringResource(key: "common.shareText.format3params", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ - %@
      /// 
      /// Locales: ar
      static let radioSchedulerFormatSchedule = Rswift.StringResource(key: "radioScheduler.formatSchedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . استفتاءات
      /// 
      /// Locales: ar
      static let searchSuggestionPostPoll = Rswift.StringResource(key: "searchSuggestion.post.poll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . حلاقات
      /// 
      /// Locales: ar
      static let searchSuggestionPostEpisodes = Rswift.StringResource(key: "searchSuggestion.post.episodes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . خبر
      /// 
      /// Locales: ar
      static let searchSuggestionPostArticle = Rswift.StringResource(key: "searchSuggestion.post.article", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . رابط
      /// 
      /// Locales: ar
      static let searchSuggestionPostLink = Rswift.StringResource(key: "searchSuggestion.post.link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . صور
      /// 
      /// Locales: ar
      static let searchSuggestionPostImages = Rswift.StringResource(key: "searchSuggestion.post.images", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . فيديوهات
      /// 
      /// Locales: ar
      static let searchSuggestionPostVideo = Rswift.StringResource(key: "searchSuggestion.post.video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . مباشر
      /// 
      /// Locales: ar
      static let searchSuggestionPostLive = Rswift.StringResource(key: "searchSuggestion.post.live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ . مشاركات
      /// 
      /// Locales: ar
      static let searchSuggestionPostText = Rswift.StringResource(key: "searchSuggestion.post.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ إعجاب
      /// 
      /// Locales: ar
      static let cardLikecountTitle = Rswift.StringResource(key: "card.likecount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ تعليق
      /// 
      /// Locales: ar
      static let cardCommentcountTitle = Rswift.StringResource(key: "card.commentcount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ خبر
      /// 
      /// Locales: ar
      static let bundleContentNo = Rswift.StringResource(key: "bundle.contentNo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ صور
      /// 
      /// Locales: ar
      static let commonPhotoNumbers = Rswift.StringResource(key: "common.photoNumbers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ صور
      /// 
      /// Locales: ar
      static let commonPhotosTitleCount = Rswift.StringResource(key: "common.photos.titleCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ فيديو
      /// 
      /// Locales: ar
      static let commonVideoTitleCount = Rswift.StringResource(key: "common.video.titleCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ مشاهدة
      /// 
      /// Locales: ar
      static let cardFollowerTitle = Rswift.StringResource(key: "card.follower.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@ من %@ الى %@
      /// 
      /// Locales: ar
      static let commonFromTo = Rswift.StringResource(key: "common.fromTo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@-%@
      /// 
      /// Locales: ar
      static let searchSuggestionFormatMetadata = Rswift.StringResource(key: "searchSuggestion.format.metadata", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@-%@ %@
      /// 
      /// Locales: ar
      static let searchSuggestionFormatTalent = Rswift.StringResource(key: "searchSuggestion.format.talent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: %@-تأسس عام
      /// 
      /// Locales: ar
      static let searchSuggestionProfileSportTeam = Rswift.StringResource(key: "searchSuggestion.profile.sportTeam", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: (%@) %@
      /// 
      /// Locales: ar
      static let searchResultMenuItem = Rswift.StringResource(key: "searchResult.menuItem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: .عذرا هذه الصفحة غير متاحا حاليا
      /// 
      /// Locales: ar
      static let geoTargetTitle = Rswift.StringResource(key: "geoTarget.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 1 تلفزيون
      /// 
      /// Locales: ar
      static let formAdvertiseOnTV = Rswift.StringResource(key: "form.advertiseOn.TV", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 2 أونلاين
      /// 
      /// Locales: ar
      static let formAdvertiseOnOnline = Rswift.StringResource(key: "form.advertiseOn.online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 3 راديو
      /// 
      /// Locales: ar
      static let formAdvertiseOnRadio = Rswift.StringResource(key: "form.advertiseOn.radio", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 4 تنظيم فعاليات
      /// 
      /// Locales: ar
      static let formAdvertiseOnEvent = Rswift.StringResource(key: "form.advertiseOn.event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 5 أخرى
      /// 
      /// Locales: ar
      static let formAdvertiseOnOthers = Rswift.StringResource(key: "form.advertiseOn.others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Approved
      /// 
      /// Locales: ar
      static let commentApproved = Rswift.StringResource(key: "comment.approved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Arab Idol 11
      /// 
      /// Locales: ar
      static let formSubjectArabIdol = Rswift.StringResource(key: "form.subject.ArabIdol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Arabs Got Talent 10
      /// 
      /// Locales: ar
      static let formSubjectArabGotTalent = Rswift.StringResource(key: "form.subject.arabGotTalent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Awaiting for approval
      /// 
      /// Locales: ar
      static let commentPending = Rswift.StringResource(key: "comment.pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Cancel
      /// 
      /// Locales: ar
      static let commonButtonTextCancel = Rswift.StringResource(key: "common.buttonText.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Close
      /// 
      /// Locales: ar
      static let appversionButtoncloseOlder = Rswift.StringResource(key: "appversion.buttonclose.older", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Coming soon.
      /// 
      /// Locales: ar
      static let commonComingSoon = Rswift.StringResource(key: "common.comingSoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Data is not available!
      /// 
      /// Locales: ar
      static let errorDataNotAvailable = Rswift.StringResource(key: "error.dataNotAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Either your email or password is wrong, please check.
      /// 
      /// Locales: ar
      static let errorInvalidLoginID = Rswift.StringResource(key: "error.invalidLoginID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Error sending comment.
      /// 
      /// Locales: ar
      static let errorSendComment = Rswift.StringResource(key: "error.sendComment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: GOBX
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleGobx = Rswift.StringResource(key: "sidemenu.staticPageTitle.gobx", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Goboz
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleGoboz = Rswift.StringResource(key: "sidemenu.staticPageTitle.goboz", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: HD
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleHd = Rswift.StringResource(key: "sidemenu.staticPageTitle.hd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Input password wrong many times, please reset your password.
      /// 
      /// Locales: ar
      static let errorPasswordWrongManyTimes = Rswift.StringResource(key: "error.passwordWrongManyTimes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Invalid Email Format.
      /// 
      /// Locales: ar
      static let errorEmailFormatIncorrect = Rswift.StringResource(key: "error.email.formatIncorrect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Invalid parameter value.
      /// 
      /// Locales: ar
      static let errorInvalidParameterValue = Rswift.StringResource(key: "error.invalidParameterValue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Invalid request signature
      /// 
      /// Locales: ar
      static let errorInvalidRequestSignature = Rswift.StringResource(key: "error.invalidRequestSignature", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: MBC GROUP. 2018 الصفحة هنا
      /// 
      /// Locales: ar
      static let sidemenuCopyrightTitle = Rswift.StringResource(key: "sidemenu.copyright.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: MBC عن مجموعة
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleAboutcorporate = Rswift.StringResource(key: "sidemenu.staticPageTitle.aboutcorporate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: MBC3
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleMbc3 = Rswift.StringResource(key: "sidemenu.staticPageTitle.mbc3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Madatory update
      /// 
      /// Locales: ar
      static let appversionTitleOlder = Rswift.StringResource(key: "appversion.title.older", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Message
      /// 
      /// Locales: ar
      static let commonAlertTitleMessage = Rswift.StringResource(key: "common.alertTitle.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Message sent successfully
      /// 
      /// Locales: ar
      static let errorSentEmailOK = Rswift.StringResource(key: "error.sentEmailOK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: No connection. Please try again later
      /// 
      /// Locales: ar
      static let errorNoInternetConnection = Rswift.StringResource(key: "error.noInternetConnection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Not supported
      /// 
      /// Locales: ar
      static let commonAlertMessageNotSupported = Rswift.StringResource(key: "common.alertMessage.notSupported", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: OK
      /// 
      /// Locales: ar
      static let commonButtonTextOk = Rswift.StringResource(key: "common.buttonText.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Old password is wrong.
      /// 
      /// Locales: ar
      static let errorWrongOldPassword = Rswift.StringResource(key: "error.wrongOldPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Open camera
      /// 
      /// Locales: ar
      static let commonPhotoAndCameraCamera = Rswift.StringResource(key: "common.photoAndCamera.camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Open photo album
      /// 
      /// Locales: ar
      static let commonPhotoAndCameraPhotoAlbum = Rswift.StringResource(key: "common.photoAndCamera.photoAlbum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Password does not match.
      /// 
      /// Locales: ar
      static let errorPasswordsNotMatch = Rswift.StringResource(key: "error.passwordsNotMatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Please check network connection.
      /// 
      /// Locales: ar
      static let errorNetworkError = Rswift.StringResource(key: "error.networkError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Request has expired.
      /// 
      /// Locales: ar
      static let errorRequestHasExpired = Rswift.StringResource(key: "error.requestHasExpired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Resend email
      /// 
      /// Locales: ar
      static let commonButtonTextResendEmail = Rswift.StringResource(key: "common.buttonText.resendEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: SHAHID
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleShahid = Rswift.StringResource(key: "sidemenu.staticPageTitle.shahid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Seems you are entering the old password, thanks to use the updated new one. If you don't remember your new password, thanks to use "Forgot Password" button.
      /// 
      /// Locales: ar
      static let errorOldPasswordUsed = Rswift.StringResource(key: "error.oldPasswordUsed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Select a option from action sheet
      /// 
      /// Locales: ar
      static let commonPhotoAndCameraTitle = Rswift.StringResource(key: "common.photoAndCamera.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Sharing has failed.
      /// 
      /// Locales: ar
      static let errorSharingFailed = Rswift.StringResource(key: "error.sharingFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Skip this version
      /// 
      /// Locales: ar
      static let appversionButtonskipversionNewer = Rswift.StringResource(key: "appversion.buttonskipversion.newer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Sorry, the system could not process this action at the moment. Please try again later.
      /// 
      /// Locales: ar
      static let errorServerError = Rswift.StringResource(key: "error.serverError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: System under construction, please try again later.
      /// 
      /// Locales: ar
      static let errorPermissionDenied = Rswift.StringResource(key: "error.permissionDenied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: THE X FACTOR 13
      /// 
      /// Locales: ar
      static let formSubjectTheXfactor = Rswift.StringResource(key: "form.subject.theXfactor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: The Voice 12
      /// 
      /// Locales: ar
      static let formSubjectTheVoice = Rswift.StringResource(key: "form.subject.theVoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: The Voice Kids 14
      /// 
      /// Locales: ar
      static let formSubjectTheVoiceKid = Rswift.StringResource(key: "form.subject.theVoiceKid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: The inputted email has existed in system. Please try with another one.
      /// 
      /// Locales: ar
      static let errorEmailHasExisted = Rswift.StringResource(key: "error.emailHasExisted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: The inputted email has existed in system. Please try with another one.
      /// 
      /// Locales: ar
      static let errorLoginIdentifierExists = Rswift.StringResource(key: "error.loginIdentifierExists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: The new password can't be the same as the old password.
      /// 
      /// Locales: ar
      static let errorNewPassIsTheSameWithOldPass = Rswift.StringResource(key: "error.newPassIsTheSameWithOldPass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: There is an update available for you. Please update your application.
      /// 
      /// Locales: ar
      static let appversionMessageNewer = Rswift.StringResource(key: "appversion.message.newer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: There is an update available for you. Please update your application.
      /// 
      /// Locales: ar
      static let appversionMessageOlder = Rswift.StringResource(key: "appversion.message.older", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: There is no user with that username or email
      /// 
      /// Locales: ar
      static let errorLoginIDDoesNotExist = Rswift.StringResource(key: "error.loginIDDoesNotExist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: There was a problem in the registration process. Please try again later.
      /// 
      /// Locales: ar
      static let errorRegistrationFail = Rswift.StringResource(key: "error.registrationFail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: This account has been activated. Please re-open your application and try to login.
      /// 
      /// Locales: ar
      static let errorRegisterSuccess = Rswift.StringResource(key: "error.registerSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: This field is required.
      /// 
      /// Locales: ar
      static let errorFieldIsRequired = Rswift.StringResource(key: "error.fieldIsRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Unknown error.
      /// 
      /// Locales: ar
      static let errorUnknownError = Rswift.StringResource(key: "error.unknownError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Update
      /// 
      /// Locales: ar
      static let appversionButtonupdateNewer = Rswift.StringResource(key: "appversion.buttonupdate.newer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Update
      /// 
      /// Locales: ar
      static let appversionButtonupdateOlder = Rswift.StringResource(key: "appversion.buttonupdate.older", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Update available
      /// 
      /// Locales: ar
      static let appversionTitleNewer = Rswift.StringResource(key: "appversion.title.newer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Warning
      /// 
      /// Locales: ar
      static let commonAlertTitleWarning = Rswift.StringResource(key: "common.alertTitle.warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Yes
      /// 
      /// Locales: ar
      static let commonButtonTextYes = Rswift.StringResource(key: "common.buttonText.yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: You must accept terms and conditions.
      /// 
      /// Locales: ar
      static let errorAcceptTermsRequired = Rswift.StringResource(key: "error.acceptTermsRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Your account is still not verified, please check your email and done for verification. Or you can click on the button "Resend email" to get another verification email.
      /// 
      /// Locales: ar
      static let errorAccountPendingVerification = Rswift.StringResource(key: "error.accountPendingVerification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Your account is temporary blocked by admin, please contact <MBC Email> to guide how to unblock your account.
      /// 
      /// Locales: ar
      static let errorAccountIsBlocked = Rswift.StringResource(key: "error.accountIsBlocked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Your account is temporary disable, please contact <MBC Email> to guide how to activate your account.
      /// 
      /// Locales: ar
      static let errorAccountDisabled = Rswift.StringResource(key: "error.accountDisabled ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Your comment is now in the mode %@. Are you sure you want to remove your comment? Please be noted this action would not undo.
      /// 
      /// Locales: ar
      static let commentConfirmDelete = Rswift.StringResource(key: "comment.confirmDelete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Your email is still not verified, please check your email and done for verification. Or you can click on the button "Resend email" to get another verification email.
      /// 
      /// Locales: ar
      static let errorEmailNotVerified = Rswift.StringResource(key: "error.emailNotVerified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Your password must be 8 characters and contain at least letters and numbers.
      /// 
      /// Locales: ar
      static let errorPasswordFormatIncorrect = Rswift.StringResource(key: "error.password.formatIncorrect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Your phone number is max 20 characters and can contain "+,;*#( )"
      /// 
      /// Locales: ar
      static let errorPhoneNumberFormatIncorrect = Rswift.StringResource(key: "error.phoneNumber.formatIncorrect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: http://mbc3.mbc.net/?_ga=2.85041433.1047654935.1517480255-346288543.1502296377
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlMbc3 = Rswift.StringResource(key: "sidemenu.staticPageUrl.mbc3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: http://www.gobx.com/ar/
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlGobx = Rswift.StringResource(key: "sidemenu.staticPageUrl.gobx", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: http://www.mbc.net/ar/about-mbc.html
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlAboutsite = Rswift.StringResource(key: "sidemenu.staticPageUrl.aboutsite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: http://www.mbc.net/ar/corporate/csr.html
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlMbccsr = Rswift.StringResource(key: "sidemenu.staticPageUrl.mbccsr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: http://www.mbc.net/ar/privacy.html
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlPrivacy = Rswift.StringResource(key: "sidemenu.staticPageUrl.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: http://www.mbc.net/ar/terms-and-conditions.html
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlTos = Rswift.StringResource(key: "sidemenu.staticPageUrl.tos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: https://irec.mbc.net/OA_HTML/RF.jsp?function_id=14296&resp_id=23350&resp_appl_id=800&security_group_id=0&lang_code=US&oas=ysGnSuLHzvMDXVgd_dWWrA..&params=evsN.OvwbEJ4gfmq9ULFp5iQCFONl9ej27ORBi9sBBiVCQGxHw15QneR8h2D4cNt
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlIrecruitment = Rswift.StringResource(key: "sidemenu.staticPageUrl.irecruitment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: https://shahid.mbc.net/ar/
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlShahid = Rswift.StringResource(key: "sidemenu.staticPageUrl.shahid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: https://www.goboz.net/#!
      /// 
      /// Locales: ar
      static let sidemenuStaticPageUrlGoboz = Rswift.StringResource(key: "sidemenu.staticPageUrl.goboz", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: male
      /// 
      /// Locales: ar
      static let searchSuggestionGenderMale = Rswift.StringResource(key: "searchSuggestion.gender.male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ابجدي أ - ي
      /// 
      /// Locales: ar
      static let commonSortingAscending = Rswift.StringResource(key: "common.sorting.ascending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ابجدي ي - أ
      /// 
      /// Locales: ar
      static let commonSortingDescending = Rswift.StringResource(key: "common.sorting.descending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ابحث في الاقلام، المسلسلات، البرامج والمشاهير
      /// 
      /// Locales: ar
      static let commonSearchBarSearchModePlaceholder = Rswift.StringResource(key: "common.searchBar.searchMode.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ابديت يوزر ذاتا
      /// 
      /// Locales: ar
      static let userProfileTabProfileTitle = Rswift.StringResource(key: "userProfile.tabProfile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اتصل بن
      /// 
      /// Locales: ar
      static let formContactUsLabelTitle = Rswift.StringResource(key: "form.contactUs.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اتصل بنا
      /// 
      /// Locales: ar
      static let formContactUsTitle = Rswift.StringResource(key: "form.contactUs.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اتصل بنا
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleContactus = Rswift.StringResource(key: "sidemenu.staticPageTitle.contactus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اخبار
      /// 
      /// Locales: ar
      static let searchResultArticles = Rswift.StringResource(key: "searchResult.articles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اخرى
      /// 
      /// Locales: ar
      static let appTypeOther = Rswift.StringResource(key: "app.type.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اذاعة MBC 6
      /// 
      /// Locales: ar
      static let formSubjectMBCRadios = Rswift.StringResource(key: "form.subject.MBCRadios", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ارسل
      /// 
      /// Locales: ar
      static let commonButtonSend = Rswift.StringResource(key: "common.button.send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: استرجاع كلمة السر
      /// 
      /// Locales: ar
      static let loginRetrieve_password = Rswift.StringResource(key: "login.retrieve_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: استفتاءات
      /// 
      /// Locales: ar
      static let cardTypePoll = Rswift.StringResource(key: "card.type.poll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: استفسار عن فاتورة 3
      /// 
      /// Locales: ar
      static let formSubjectBillingInquiry = Rswift.StringResource(key: "form.subject.billingInquiry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: استفسار عن مسابقة 2
      /// 
      /// Locales: ar
      static let formSubjectCompetitionInquiry = Rswift.StringResource(key: "form.subject.competitionInquiry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: استفسار من فائز 1
      /// 
      /// Locales: ar
      static let formSubjectWinnerInquiry = Rswift.StringResource(key: "form.subject.winnerInquiry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم
      /// 
      /// Locales: ar
      static let abouttabTitle = Rswift.StringResource(key: "abouttab.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الجائزة
      /// 
      /// Locales: ar
      static let abouttabAwardTitle = Rswift.StringResource(key: "abouttab.awardTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الشهرة
      /// 
      /// Locales: ar
      static let abouttabPlayernickname = Rswift.StringResource(key: "abouttab.playernickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الصفحة هنا
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleDummy = Rswift.StringResource(key: "sidemenu.staticPageTitle.dummy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الفعالية
      /// 
      /// Locales: ar
      static let abouttabEventname = Rswift.StringResource(key: "abouttab.eventname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الفعالية
      /// 
      /// Locales: ar
      static let abouttabEventseasontitle = Rswift.StringResource(key: "abouttab.eventseasontitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم القناة
      /// 
      /// Locales: ar
      static let abouttabChannelname = Rswift.StringResource(key: "abouttab.channelname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المدرب
      /// 
      /// Locales: ar
      static let abouttabCoachname = Rswift.StringResource(key: "abouttab.coachname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الملعب
      /// 
      /// Locales: ar
      static let abouttabStadiumname = Rswift.StringResource(key: "abouttab.stadiumname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الموقع
      /// 
      /// Locales: ar
      static let abouttabVenuename = Rswift.StringResource(key: "abouttab.venuename", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم كابتن الفريق
      /// 
      /// Locales: ar
      static let abouttabTeamcaptainname = Rswift.StringResource(key: "abouttab.teamcaptainname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اضغط على الرابط التالي لاسترجاع كلمة السر
      /// 
      /// Locales: ar
      static let loginClick_link_retrieve_password = Rswift.StringResource(key: "login.click_link_retrieve_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اضغط هنا
      /// 
      /// Locales: ar
      static let geoTargetButtonTitle = Rswift.StringResource(key: "geoTarget.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اعلن معنا
      /// 
      /// Locales: ar
      static let formAdvertisementLabelTitle = Rswift.StringResource(key: "form.advertisement.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اقرأ المزيد
      /// 
      /// Locales: ar
      static let commentLoadMore = Rswift.StringResource(key: "comment.loadMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اكتب هنا
      /// 
      /// Locales: ar
      static let formPlaceHolderWriteHere = Rswift.StringResource(key: "form.placeHolder.writeHere", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاثنين
      /// 
      /// Locales: ar
      static let dayOfWeekMon = Rswift.StringResource(key: "dayOfWeek.Mon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاحد
      /// 
      /// Locales: ar
      static let dayOfWeekSun = Rswift.StringResource(key: "dayOfWeek.Sun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاربعاء
      /// 
      /// Locales: ar
      static let dayOfWeekWed = Rswift.StringResource(key: "dayOfWeek.Wed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاستخدام
      /// 
      /// Locales: ar
      static let signupUse = Rswift.StringResource(key: "signup.use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم
      /// 
      /// Locales: ar
      static let abouttabName = Rswift.StringResource(key: "abouttab.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم
      /// 
      /// Locales: ar
      static let formName = Rswift.StringResource(key: "form.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم (الانجليزي)
      /// 
      /// Locales: ar
      static let abouttabEnglishtitle = Rswift.StringResource(key: "abouttab.englishtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم (العربي)
      /// 
      /// Locales: ar
      static let abouttabArabicTitle = Rswift.StringResource(key: "abouttab.arabicTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم الحقيقي
      /// 
      /// Locales: ar
      static let abouttabRealname = Rswift.StringResource(key: "abouttab.realname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم الكامل
      /// 
      /// Locales: ar
      static let abouttabFullname = Rswift.StringResource(key: "abouttab.fullname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم الكامل
      /// 
      /// Locales: ar
      static let userProfileTabProfileFullName = Rswift.StringResource(key: "userProfile.tabProfile.fullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الالبوم التالي
      /// 
      /// Locales: ar
      static let commonNextAlbumTitle = Rswift.StringResource(key: "common.nextAlbumTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاول
      /// 
      /// Locales: ar
      static let abouttabFirst = Rswift.StringResource(key: "abouttab.first", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الآن
      /// 
      /// Locales: ar
      static let commonTimestampRightnow = Rswift.StringResource(key: "common.timestamp.rightnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الأمل MBC
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleMbccsr = Rswift.StringResource(key: "sidemenu.staticPageTitle.mbccsr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البث المباشر
      /// 
      /// Locales: ar
      static let radioSchedulerLiveStreaming = Rswift.StringResource(key: "radioScheduler.liveStreaming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البرج
      /// 
      /// Locales: ar
      static let abouttabHoroscope = Rswift.StringResource(key: "abouttab.horoscope", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الالكتروني
      /// 
      /// Locales: ar
      static let abouttabEmail = Rswift.StringResource(key: "abouttab.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الإلكتروني
      /// 
      /// Locales: ar
      static let formEmail = Rswift.StringResource(key: "form.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الإلكتروني
      /// 
      /// Locales: ar
      static let userProfileTabProfileEmail = Rswift.StringResource(key: "userProfile.tabProfile.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البلد
      /// 
      /// Locales: ar
      static let abouttabCountry = Rswift.StringResource(key: "abouttab.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البومات
      /// 
      /// Locales: ar
      static let commonLabelAlbums = Rswift.StringResource(key: "common.label.albums", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: التالي
      /// 
      /// Locales: ar
      static let commonVideoNextItem = Rswift.StringResource(key: "common.video.nextItem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: التصنيف
      /// 
      /// Locales: ar
      static let abouttabGenre = Rswift.StringResource(key: "abouttab.genre", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: التصنيفات
      /// 
      /// Locales: ar
      static let showListingFilterByGenre = Rswift.StringResource(key: "showListing.filterByGenre", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: التعليقات
      /// 
      /// Locales: ar
      static let commentTitle = Rswift.StringResource(key: "comment.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الثلاثاء
      /// 
      /// Locales: ar
      static let dayOfWeekTue = Rswift.StringResource(key: "dayOfWeek.Tue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء
      /// 
      /// Locales: ar
      static let abouttabSequelNumber = Rswift.StringResource(key: "abouttab.sequelNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء %@
      /// 
      /// Locales: ar
      static let abouttabIcSequelNumber = Rswift.StringResource(key: "abouttab.ic.sequelNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الاول
      /// 
      /// Locales: ar
      static let sequelNumberOne = Rswift.StringResource(key: "sequelNumber.one", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء التاسع
      /// 
      /// Locales: ar
      static let sequelNumberNine = Rswift.StringResource(key: "sequelNumber.nine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء التاسع عشر
      /// 
      /// Locales: ar
      static let sequelNumberNineteen = Rswift.StringResource(key: "sequelNumber.nineteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الثالث
      /// 
      /// Locales: ar
      static let sequelNumberThree = Rswift.StringResource(key: "sequelNumber.three", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الثالث عشر
      /// 
      /// Locales: ar
      static let sequelNumberThriteen = Rswift.StringResource(key: "sequelNumber.thriteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الثامن
      /// 
      /// Locales: ar
      static let sequelNumberEight = Rswift.StringResource(key: "sequelNumber.eight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الثامن عشر
      /// 
      /// Locales: ar
      static let sequelNumberEighteen = Rswift.StringResource(key: "sequelNumber.eighteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الثاني
      /// 
      /// Locales: ar
      static let sequelNumberTwo = Rswift.StringResource(key: "sequelNumber.two", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الثاني عشر
      /// 
      /// Locales: ar
      static let sequelNumberTwelve = Rswift.StringResource(key: "sequelNumber.twelve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الحادي عسر
      /// 
      /// Locales: ar
      static let sequelNumberElevent = Rswift.StringResource(key: "sequelNumber.elevent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الخامس
      /// 
      /// Locales: ar
      static let sequelNumberFive = Rswift.StringResource(key: "sequelNumber.five", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الخامس عشر
      /// 
      /// Locales: ar
      static let sequelNumberFifteen = Rswift.StringResource(key: "sequelNumber.fifteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الرابع
      /// 
      /// Locales: ar
      static let sequelNumberFour = Rswift.StringResource(key: "sequelNumber.four", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء الرابع عشر
      /// 
      /// Locales: ar
      static let sequelNumberFourteen = Rswift.StringResource(key: "sequelNumber.fourteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء السابع
      /// 
      /// Locales: ar
      static let sequelNumberSeven = Rswift.StringResource(key: "sequelNumber.seven", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء السابع عشر
      /// 
      /// Locales: ar
      static let sequelNumberSeventeen = Rswift.StringResource(key: "sequelNumber.seventeen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء السادس
      /// 
      /// Locales: ar
      static let sequelNumberSix = Rswift.StringResource(key: "sequelNumber.six", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء السادس عشر
      /// 
      /// Locales: ar
      static let sequelNumberSixteen = Rswift.StringResource(key: "sequelNumber.sixteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء العاشر
      /// 
      /// Locales: ar
      static let sequelNumberTen = Rswift.StringResource(key: "sequelNumber.ten", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجزء العشرون
      /// 
      /// Locales: ar
      static let sequelNumberTwenty = Rswift.StringResource(key: "sequelNumber.twenty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجمعة
      /// 
      /// Locales: ar
      static let dayOfWeekFri = Rswift.StringResource(key: "dayOfWeek.Fri", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجنس
      /// 
      /// Locales: ar
      static let formGender = Rswift.StringResource(key: "form.gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجنس
      /// 
      /// Locales: ar
      static let userProfileTabProfileGender = Rswift.StringResource(key: "userProfile.tabProfile.gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجنسية
      /// 
      /// Locales: ar
      static let abouttabNationality = Rswift.StringResource(key: "abouttab.nationality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجنسية
      /// 
      /// Locales: ar
      static let userProfileTabProfileNationality = Rswift.StringResource(key: "userProfile.tabProfile.nationality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الجنسية %@
      /// 
      /// Locales: ar
      static let abouttabIcNationality = Rswift.StringResource(key: "abouttab.ic.nationality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الحالة الإجتماعية
      /// 
      /// Locales: ar
      static let userProfileTabProfileMarriedStatus = Rswift.StringResource(key: "userProfile.tabProfile.marriedStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الخاص بكMBCحساب
      /// 
      /// Locales: ar
      static let loginTitle = Rswift.StringResource(key: "login.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الخميس
      /// 
      /// Locales: ar
      static let dayOfWeekThu = Rswift.StringResource(key: "dayOfWeek.Thu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الدولة
      /// 
      /// Locales: ar
      static let userProfileTabProfileCountry = Rswift.StringResource(key: "userProfile.tabProfile.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرجاء إدخال البريد الإلكتروني لإسترجاع كلمة السر
      /// 
      /// Locales: ar
      static let forgotpassSubTitle1 = Rswift.StringResource(key: "forgotpass.subTitle1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرجاء إدخال البيانات التالية
      /// 
      /// Locales: ar
      static let signupSubTitle = Rswift.StringResource(key: "signup.subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرجاء تفعيل حسابك
      /// 
      /// Locales: ar
      static let emailVerificationTitle = Rswift.StringResource(key: "emailVerification.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرئيسية
      /// 
      /// Locales: ar
      static let pagemenuNewsfeedTitle = Rswift.StringResource(key: "pagemenu.newsfeed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: السبت
      /// 
      /// Locales: ar
      static let dayOfWeekSat = Rswift.StringResource(key: "dayOfWeek.Sat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: السنة
      /// 
      /// Locales: ar
      static let abouttabEventyear = Rswift.StringResource(key: "abouttab.eventyear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الشركة
      /// 
      /// Locales: ar
      static let formCompany = Rswift.StringResource(key: "form.company", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الضيف
      /// 
      /// Locales: ar
      static let abouttabProfileGuestMale = Rswift.StringResource(key: "abouttab.profile.guestMale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الضيفة
      /// 
      /// Locales: ar
      static let abouttabProfileGuestFemale = Rswift.StringResource(key: "abouttab.profile.guestFemale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الطلب
      /// 
      /// Locales: ar
      static let formMessageAdvertisement = Rswift.StringResource(key: "form.message.advertisement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الطول
      /// 
      /// Locales: ar
      static let abouttabHeight = Rswift.StringResource(key: "abouttab.height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العاب
      /// 
      /// Locales: ar
      static let appTypeGame = Rswift.StringResource(key: "app.type.game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العب الان
      /// 
      /// Locales: ar
      static let appCtaButtonGame = Rswift.StringResource(key: "app.ctaButton.game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العروض
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleTv = Rswift.StringResource(key: "sidemenu.staticPageTitle.tv", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العمر
      /// 
      /// Locales: ar
      static let abouttabAge = Rswift.StringResource(key: "abouttab.age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العمر %@
      /// 
      /// Locales: ar
      static let abouttabIcAge = Rswift.StringResource(key: "abouttab.ic.age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العنوان
      /// 
      /// Locales: ar
      static let formAddress = Rswift.StringResource(key: "form.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العنوان
      /// 
      /// Locales: ar
      static let userProfileTabProfileAddress = Rswift.StringResource(key: "userProfile.tabProfile.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الفرقة
      /// 
      /// Locales: ar
      static let abouttabProfileBandGender = Rswift.StringResource(key: "abouttab.profile.bandGender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الفعاليات
      /// 
      /// Locales: ar
      static let abouttabEventtype = Rswift.StringResource(key: "abouttab.eventtype", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: القنوات
      /// 
      /// Locales: ar
      static let radioSchedulerSubChanelTitle = Rswift.StringResource(key: "radioScheduler.subChanelTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الكل
      /// 
      /// Locales: ar
      static let searchResultAll = Rswift.StringResource(key: "searchResult.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اللاعب
      /// 
      /// Locales: ar
      static let abouttabProfileSportPlayerMale = Rswift.StringResource(key: "abouttab.profile.sportPlayerMale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اللاعبة
      /// 
      /// Locales: ar
      static let abouttabProfileSportPlayerFemale = Rswift.StringResource(key: "abouttab.profile.sportPlayerFemale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اللغة
      /// 
      /// Locales: ar
      static let abouttabLanguage = Rswift.StringResource(key: "abouttab.language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اللهجة
      /// 
      /// Locales: ar
      static let abouttabDialect = Rswift.StringResource(key: "abouttab.dialect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الليلة %@
      /// 
      /// Locales: ar
      static let commonTonight = Rswift.StringResource(key: "common.tonight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المدينة
      /// 
      /// Locales: ar
      static let abouttabCity = Rswift.StringResource(key: "abouttab.city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المدينة
      /// 
      /// Locales: ar
      static let userProfileTabProfileCity = Rswift.StringResource(key: "userProfile.tabProfile.city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المركز الرئيسي
      /// 
      /// Locales: ar
      static let abouttabHqcountry = Rswift.StringResource(key: "abouttab.hqcountry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المزيد
      /// 
      /// Locales: ar
      static let pagemenuOtherTitle = Rswift.StringResource(key: "pagemenu.other.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المشترك
      /// 
      /// Locales: ar
      static let abouttabProfileTalentMale = Rswift.StringResource(key: "abouttab.profile.talentMale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المشتركة
      /// 
      /// Locales: ar
      static let abouttabProfileTalentFemale = Rswift.StringResource(key: "abouttab.profile.talentFemale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المنتخب الوطني
      /// 
      /// Locales: ar
      static let abouttabNationalTeam = Rswift.StringResource(key: "abouttab.nationalTeam", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المهنة
      /// 
      /// Locales: ar
      static let starPageListingFilterByOccupation = Rswift.StringResource(key: "starPageListing.filterByOccupation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم
      /// 
      /// Locales: ar
      static let abouttabSeasion = Rswift.StringResource(key: "abouttab.seasion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم
      /// 
      /// Locales: ar
      static let abouttabSeason = Rswift.StringResource(key: "abouttab.season", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم %@
      /// 
      /// Locales: ar
      static let abouttabIcSeasonNumber = Rswift.StringResource(key: "abouttab.ic.seasonNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الاول
      /// 
      /// Locales: ar
      static let seasonNumberOne = Rswift.StringResource(key: "seasonNumber.one", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم التاسع
      /// 
      /// Locales: ar
      static let seasonNumberNine = Rswift.StringResource(key: "seasonNumber.nine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم التاسع عشر
      /// 
      /// Locales: ar
      static let seasonNumberNineteen = Rswift.StringResource(key: "seasonNumber.nineteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الثالث
      /// 
      /// Locales: ar
      static let seasonNumberThree = Rswift.StringResource(key: "seasonNumber.three", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الثالث عشر
      /// 
      /// Locales: ar
      static let seasonNumberThriteen = Rswift.StringResource(key: "seasonNumber.thriteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الثامن
      /// 
      /// Locales: ar
      static let seasonNumberEight = Rswift.StringResource(key: "seasonNumber.eight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الثامن عشر
      /// 
      /// Locales: ar
      static let seasonNumberEighteen = Rswift.StringResource(key: "seasonNumber.eighteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الثاني
      /// 
      /// Locales: ar
      static let seasonNumberTwo = Rswift.StringResource(key: "seasonNumber.two", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الثاني عشر
      /// 
      /// Locales: ar
      static let seasonNumberTwelve = Rswift.StringResource(key: "seasonNumber.twelve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الحادي عسر
      /// 
      /// Locales: ar
      static let seasonNumberElevent = Rswift.StringResource(key: "seasonNumber.elevent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الخامس
      /// 
      /// Locales: ar
      static let seasonNumberFive = Rswift.StringResource(key: "seasonNumber.five", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الخامس عشر
      /// 
      /// Locales: ar
      static let seasonNumberFifteen = Rswift.StringResource(key: "seasonNumber.fifteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الرابع
      /// 
      /// Locales: ar
      static let seasonNumberFour = Rswift.StringResource(key: "seasonNumber.four", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم الرابع عشر
      /// 
      /// Locales: ar
      static let seasonNumberFourteen = Rswift.StringResource(key: "seasonNumber.fourteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم السابع
      /// 
      /// Locales: ar
      static let seasonNumberSeven = Rswift.StringResource(key: "seasonNumber.seven", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم السابع عشر
      /// 
      /// Locales: ar
      static let seasonNumberSeventeen = Rswift.StringResource(key: "seasonNumber.seventeen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم السادس
      /// 
      /// Locales: ar
      static let seasonNumberSix = Rswift.StringResource(key: "seasonNumber.six", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم السادس عشر
      /// 
      /// Locales: ar
      static let seasonNumberSixteen = Rswift.StringResource(key: "seasonNumber.sixteen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم العاشر
      /// 
      /// Locales: ar
      static let seasonNumberTen = Rswift.StringResource(key: "seasonNumber.ten", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموسم العشرون
      /// 
      /// Locales: ar
      static let seasonNumberTwenty = Rswift.StringResource(key: "seasonNumber.twenty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الموضوع
      /// 
      /// Locales: ar
      static let formSubject = Rswift.StringResource(key: "form.subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: النجم
      /// 
      /// Locales: ar
      static let abouttabProfileStarMale = Rswift.StringResource(key: "abouttab.profile.starMale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: النجمة
      /// 
      /// Locales: ar
      static let abouttabProfileStarFemale = Rswift.StringResource(key: "abouttab.profile.starFemale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: النوع
      /// 
      /// Locales: ar
      static let showListingFilterBySubType = Rswift.StringResource(key: "showListing.filterBySubType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الهاتف
      /// 
      /// Locales: ar
      static let formPhone = Rswift.StringResource(key: "form.phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الوزن
      /// 
      /// Locales: ar
      static let abouttabWeight = Rswift.StringResource(key: "abouttab.weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الوظيفة
      /// 
      /// Locales: ar
      static let abouttabOccupation = Rswift.StringResource(key: "abouttab.occupation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اليوم %@
      /// 
      /// Locales: ar
      static let commonToday = Rswift.StringResource(key: "common.today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: انتاج (البلد)
      /// 
      /// Locales: ar
      static let abouttabMovieCountry = Rswift.StringResource(key: "abouttab.movieCountry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أبريل
      /// 
      /// Locales: ar
      static let monthOfBirthApr = Rswift.StringResource(key: "monthOfBirth.Apr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أدخل الاسم الكامل
      /// 
      /// Locales: ar
      static let signupEnterFullnamePlaceHolder = Rswift.StringResource(key: "signup.enterFullname.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أدخل البريد الإلكتروني
      /// 
      /// Locales: ar
      static let commonEmailPlaceHolder = Rswift.StringResource(key: "common.email.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أدخل كلمة السر
      /// 
      /// Locales: ar
      static let commonPasswordPlaceHolder = Rswift.StringResource(key: "common.password.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أدخل كلمة السر الحالية
      /// 
      /// Locales: ar
      static let userProfileTabProfileOldPasswordPlaceHolder = Rswift.StringResource(key: "userProfile.tabProfile.oldPassword.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أرسل البريد الإلكتروني مرة آخرى
      /// 
      /// Locales: ar
      static let emailVerificationSendEmailAgain = Rswift.StringResource(key: "emailVerification.sendEmailAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أرسل البريد الإلكتروني مرة آخرى
      /// 
      /// Locales: ar
      static let forgotpassResendEmail = Rswift.StringResource(key: "forgotpass.resendEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أرسل الرابط 
      /// 
      /// Locales: ar
      static let forgotpassResetPassword = Rswift.StringResource(key: "forgotpass.resetPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أرمل
      /// 
      /// Locales: ar
      static let commonMarriedStatusWidow = Rswift.StringResource(key: "common.marriedStatus.widow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أشار الى
      /// 
      /// Locales: ar
      static let taggedPageListingTitle = Rswift.StringResource(key: "taggedPageListing.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف تعليقك
      /// 
      /// Locales: ar
      static let ipadCommentSendButtonTitle = Rswift.StringResource(key: "ipad.comment.sendButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف تعليقك هنا
      /// 
      /// Locales: ar
      static let commentInputMessagePlaceholder = Rswift.StringResource(key: "comment.inputMessage.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أعزب
      /// 
      /// Locales: ar
      static let commonMarriedStatusSingle = Rswift.StringResource(key: "common.marriedStatus.single", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أعلن على
      /// 
      /// Locales: ar
      static let formAdvertiseOn = Rswift.StringResource(key: "form.advertiseOn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أعلن معنا
      /// 
      /// Locales: ar
      static let formAdvertisementTitle = Rswift.StringResource(key: "form.advertisement.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أعلن معنا
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleAdvertise = Rswift.StringResource(key: "sidemenu.staticPageTitle.advertise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أغسطس
      /// 
      /// Locales: ar
      static let monthOfBirthAug = Rswift.StringResource(key: "monthOfBirth.Aug", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أقبل بشروط الاستخدام و سياسة الخصوصية
      /// 
      /// Locales: ar
      static let signupAcceptTermsAndPrivacy = Rswift.StringResource(key: "signup.acceptTermsAndPrivacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أكتوبر
      /// 
      /// Locales: ar
      static let monthOfBirthOct = Rswift.StringResource(key: "monthOfBirth.Oct", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أمس،
      /// 
      /// Locales: ar
      static let commonTimestamp1Day = Rswift.StringResource(key: "common.timestamp.1Day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أنثى
      /// 
      /// Locales: ar
      static let commonButtonFemale = Rswift.StringResource(key: "common.button.female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إسترجاع كلمة السر
      /// 
      /// Locales: ar
      static let forgotpassTitle1 = Rswift.StringResource(key: "forgotpass.title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة
      /// 
      /// Locales: ar
      static let commentSendButtonTitle = Rswift.StringResource(key: "comment.sendButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافةاكتب تعليقك هنا
      /// 
      /// Locales: ar
      static let ipadCommentInputMessagePlaceholder = Rswift.StringResource(key: "ipad.comment.inputMessage.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إعلان
      /// 
      /// Locales: ar
      static let adsTitle = Rswift.StringResource(key: "ads.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إلغاء
      /// 
      /// Locales: ar
      static let commonSearchBarCancel = Rswift.StringResource(key: "common.searchBar.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إهتمامات
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleInterest = Rswift.StringResource(key: "sidemenu.staticPageTitle.interest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: بث مباشر
      /// 
      /// Locales: ar
      static let appTypeLivePost = Rswift.StringResource(key: "app.type.livePost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: بحث
      /// 
      /// Locales: ar
      static let commonSearchBarPlaceholder = Rswift.StringResource(key: "common.searchBar.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: برج %@
      /// 
      /// Locales: ar
      static let abouttabIcHoroscope = Rswift.StringResource(key: "abouttab.ic.horoscope", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: بندل سبسكرايب
      /// 
      /// Locales: ar
      static let userProfileTabActivityLogTitle = Rswift.StringResource(key: "userProfile.tabActivityLog.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: بيانات قد تهمك
      /// 
      /// Locales: ar
      static let abouttabMetadataAreaTitle = Rswift.StringResource(key: "abouttab.metadataAreaTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تابعونا الان
      /// 
      /// Locales: ar
      static let appCtaButtonLivePost = Rswift.StringResource(key: "app.ctaButton.livePost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ العرض الاول
      /// 
      /// Locales: ar
      static let abouttabYearDebuted = Rswift.StringResource(key: "abouttab.yearDebuted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ الميلاد
      /// 
      /// Locales: ar
      static let abouttabDateofbirth = Rswift.StringResource(key: "abouttab.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ الميلاد
      /// 
      /// Locales: ar
      static let signupEnterDateOfBirthPlaceHolder = Rswift.StringResource(key: "signup.enterDateOfBirth.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ الميلاد
      /// 
      /// Locales: ar
      static let userProfileTabProfileBirthday = Rswift.StringResource(key: "userProfile.tabProfile.birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ الوفاة
      /// 
      /// Locales: ar
      static let abouttabRipdate = Rswift.StringResource(key: "abouttab.ripdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاسس عام
      /// 
      /// Locales: ar
      static let abouttabYearestablished = Rswift.StringResource(key: "abouttab.yearestablished", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاسست عام
      /// 
      /// Locales: ar
      static let abouttabFounded = Rswift.StringResource(key: "abouttab.founded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تأسس عام
      /// 
      /// Locales: ar
      static let pagedetailHeaderEstablishedYearSportTeam = Rswift.StringResource(key: "pagedetail.header.establishedYearSportTeam", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تأسست عام
      /// 
      /// Locales: ar
      static let pagedetailHeaderEstablishedYearBand = Rswift.StringResource(key: "pagedetail.header.establishedYearBand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تأكيد كلمة السر
      /// 
      /// Locales: ar
      static let signupReEnterPasswordPlaceHolder = Rswift.StringResource(key: "signup.reEnterPassword.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تأكيد كلمة السر الجديدة
      /// 
      /// Locales: ar
      static let userProfileTabProfileRenewPasswordPlaceHolder = Rswift.StringResource(key: "userProfile.tabProfile.renewPassword.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تحديث
      /// 
      /// Locales: ar
      static let appupdateButtonUpdate = Rswift.StringResource(key: "appupdate.button.update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تخطی
      /// 
      /// Locales: ar
      static let appupdateButtonSkip = Rswift.StringResource(key: "appupdate.button.skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تذكير
      /// 
      /// Locales: ar
      static let pagedetailRemindbuttonTitle = Rswift.StringResource(key: "pagedetail.remindbutton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ترتيب
      /// 
      /// Locales: ar
      static let commonSortingTitle = Rswift.StringResource(key: "common.sorting.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ترددات القناة
      /// 
      /// Locales: ar
      static let abouttabChannelfrequency = Rswift.StringResource(key: "abouttab.channelfrequency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ترددات القنوات
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleFreequency = Rswift.StringResource(key: "sidemenu.staticPageTitle.freequency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجل حساب جديد
      /// 
      /// Locales: ar
      static let signupTitle = Rswift.StringResource(key: "signup.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل
      /// 
      /// Locales: ar
      static let signupSignupButtonTitle = Rswift.StringResource(key: "signup.signup.buttonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static let emailVerificationLogin = Rswift.StringResource(key: "emailVerification.login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static let forgotpassOpenLoginVC = Rswift.StringResource(key: "forgotpass.openLoginVC", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static let loginLoginByEmail = Rswift.StringResource(key: "login.loginByEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static let signupBackToLogin = Rswift.StringResource(key: "signup.backToLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول عن طريق فيسبوك
      /// 
      /// Locales: ar
      static let loginLoginByFacebook = Rswift.StringResource(key: "login.loginByFacebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل حساب جديد
      /// 
      /// Locales: ar
      static let loginEmailRegistration = Rswift.StringResource(key: "login.emailRegistration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل حساب عن طرق فيسبوك
      /// 
      /// Locales: ar
      static let signupSignupWithFacebookButtonTitle = Rswift.StringResource(key: "signup.signupWithFacebook.buttonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل خروج
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleSignout = Rswift.StringResource(key: "sidemenu.staticPageTitle.signout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تصفح
      /// 
      /// Locales: ar
      static let sidemenuGroupTitleStatic = Rswift.StringResource(key: "sidemenu.groupTitle.static", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تصنيف المحتوى
      /// 
      /// Locales: ar
      static let sidemenuGroupTitleFeaturePage = Rswift.StringResource(key: "sidemenu.groupTitle.featurePage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تصويت
      /// 
      /// Locales: ar
      static let appTypeVoting = Rswift.StringResource(key: "app.type.voting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيق
      /// 
      /// Locales: ar
      static let cardTypeApp = Rswift.StringResource(key: "card.type.app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيقات
      /// 
      /// Locales: ar
      static let pagemenuAppsTitle = Rswift.StringResource(key: "pagemenu.apps.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيقات
      /// 
      /// Locales: ar
      static let searchResultApps = Rswift.StringResource(key: "searchResult.apps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيقات الجوال
      /// 
      /// Locales: ar
      static let appTypeMobileApp = Rswift.StringResource(key: "app.type.mobileApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيقات و العاب
      /// 
      /// Locales: ar
      static let appListingTitle = Rswift.StringResource(key: "appListing.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيقات ومسابقات
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleAppsGames = Rswift.StringResource(key: "sidemenu.staticPageTitle.appsGames", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعديل
      /// 
      /// Locales: ar
      static let commonAvatarStatus = Rswift.StringResource(key: "common.avatar.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعديل البيانات
      /// 
      /// Locales: ar
      static let userProfileTitle = Rswift.StringResource(key: "userProfile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعليق عام 4
      /// 
      /// Locales: ar
      static let formSubjectGeneralFeedback = Rswift.StringResource(key: "form.subject.generalFeedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعمل في قطاع
      /// 
      /// Locales: ar
      static let abouttabIndustry = Rswift.StringResource(key: "abouttab.industry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعمل في مجال
      /// 
      /// Locales: ar
      static let abouttabSubindustry = Rswift.StringResource(key: "abouttab.subindustry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تقام الفعالية في الدول التالية
      /// 
      /// Locales: ar
      static let abouttabEventCountry = Rswift.StringResource(key: "abouttab.event.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تقام الفعالية في المدن التالية
      /// 
      /// Locales: ar
      static let abouttabEventCity = Rswift.StringResource(key: "abouttab.event.city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم إرسال بريد إلكتروني يحتوي على رابط لإعادة ضبط كلمة السر
      /// 
      /// Locales: ar
      static let forgotpassSubTitle2 = Rswift.StringResource(key: "forgotpass.subTitle2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم إرسال بريد إلكتروني يحتوي على رابط لتفعيل الحساب
      /// 
      /// Locales: ar
      static let emailVerificationSubTitle = Rswift.StringResource(key: "emailVerification.subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم إسال الرابط
      /// 
      /// Locales: ar
      static let forgotpassTitle2 = Rswift.StringResource(key: "forgotpass.title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: توقيت الفعالية
      /// 
      /// Locales: ar
      static let abouttabTime = Rswift.StringResource(key: "abouttab.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تيار الأخبار
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleStream = Rswift.StringResource(key: "sidemenu.staticPageTitle.stream", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static let pagedetailFollowbuttonTitle = Rswift.StringResource(key: "pagedetail.followbutton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static let pagemenuScheduleTitle = Rswift.StringResource(key: "pagemenu.schedule.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static let radioSchedulerSubScheduleTitle = Rswift.StringResource(key: "radioScheduler.subScheduleTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static let sidemenuNavigationTitle = Rswift.StringResource(key: "sidemenu.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleSchedule = Rswift.StringResource(key: "sidemenu.staticPageTitle.schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: جويل
      /// 
      /// Locales: ar
      static let homeStreamAuthor = Rswift.StringResource(key: "homeStream.author", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حجم الموقع
      /// 
      /// Locales: ar
      static let abouttabVenuesize = Rswift.StringResource(key: "abouttab.venuesize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حدد صفحة التصبيق
      /// 
      /// Locales: ar
      static let appListingFilterByAuthor = Rswift.StringResource(key: "appListing.filterByAuthor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حدد نوع التطبيق
      /// 
      /// Locales: ar
      static let appListingFilterByAppType = Rswift.StringResource(key: "appListing.filterByAppType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حذف
      /// 
      /// Locales: ar
      static let searchSuggestionDeleteTitle = Rswift.StringResource(key: "searchSuggestion.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حسابات وروابط
      /// 
      /// Locales: ar
      static let abouttabSocialNetwoksAreaTitle = Rswift.StringResource(key: "abouttab.socialNetwoksAreaTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حمل التطبيق الان
      /// 
      /// Locales: ar
      static let appCtaButtonMobileApp = Rswift.StringResource(key: "app.ctaButton.mobileApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: خبر
      /// 
      /// Locales: ar
      static let cardTypeArticle = Rswift.StringResource(key: "card.type.article", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: خدمات الSMS 8
      /// 
      /// Locales: ar
      static let formSubjectSMSServices = Rswift.StringResource(key: "form.subject.SMSServices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: دخل كلمة السر الجديدة
      /// 
      /// Locales: ar
      static let userProfileTabProfileNewPasswordPlaceHolder = Rswift.StringResource(key: "userProfile.tabProfile.newPassword.placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ديسمبر
      /// 
      /// Locales: ar
      static let monthOfBirthDec = Rswift.StringResource(key: "monthOfBirth.Dec", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ذكر
      /// 
      /// Locales: ar
      static let commonButtonMale = Rswift.StringResource(key: "common.button.male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رابط
      /// 
      /// Locales: ar
      static let cardTypeLink = Rswift.StringResource(key: "card.type.link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم التصويت
      /// 
      /// Locales: ar
      static let abouttabVotingnumber = Rswift.StringResource(key: "abouttab.votingnumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المشترك
      /// 
      /// Locales: ar
      static let pagedetailHeaderVotingformale = Rswift.StringResource(key: "pagedetail.header.votingformale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المشتركة
      /// 
      /// Locales: ar
      static let pagedetailHeaderVotingforfemale = Rswift.StringResource(key: "pagedetail.header.votingforfemale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الهاتف
      /// 
      /// Locales: ar
      static let userProfileTabProfilePhoneNumber = Rswift.StringResource(key: "userProfile.tabProfile.phoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سبتمبر
      /// 
      /// Locales: ar
      static let monthOfBirthSep = Rswift.StringResource(key: "monthOfBirth.Sep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سجل البحث
      /// 
      /// Locales: ar
      static let searchSuggestionHistoryTitle = Rswift.StringResource(key: "searchSuggestion.history.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سجل الدخول بحساب MBC الخاص بك
      /// 
      /// Locales: ar
      static let loginSubTitle = Rswift.StringResource(key: "login.subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سوف نولى رسالتك أقصى اهتمامنا مع الأخذ بعين الاعتبار ضغط الرسائل الواردة إلينا
      /// 
      /// Locales: ar
      static let formContactUsSendOKTitle2 = Rswift.StringResource(key: "form.contactUs.sendOK.title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سياسة الخصوصية
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitlePrivacy = Rswift.StringResource(key: "sidemenu.staticPageTitle.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سياسة الخصوصية
      /// 
      /// Locales: ar
      static let signupPrivacyPolicy = Rswift.StringResource(key: "signup.privacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static let appCtaButtonCasting = Rswift.StringResource(key: "app.ctaButton.casting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static let appCtaButtonCompetition = Rswift.StringResource(key: "app.ctaButton.competition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static let appCtaButtonOther = Rswift.StringResource(key: "app.ctaButton.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static let appCtaButtonTitle = Rswift.StringResource(key: "app.ctaButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static let appCtaButtonTrivia = Rswift.StringResource(key: "app.ctaButton.trivia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static let appCtaButtonVoting = Rswift.StringResource(key: "app.ctaButton.voting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شاهد الحلقات
      /// 
      /// Locales: ar
      static let cardTypeEpisodes = Rswift.StringResource(key: "card.type.episodes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شاهد الحلقات
      /// 
      /// Locales: ar
      static let pagemenuEpisodesTitle = Rswift.StringResource(key: "pagemenu.episodes.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شبكات
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleNetworks = Rswift.StringResource(key: "sidemenu.staticPageTitle.networks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شخصية %@
      /// 
      /// Locales: ar
      static let abouttabIcCharacter = Rswift.StringResource(key: "abouttab.ic.character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شروط الاستخدام
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleTos = Rswift.StringResource(key: "sidemenu.staticPageTitle.tos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شكرا لزيارتكم موقعنا. نرحب برسائلكم وأسئلتكم واقتراحاتكم التي ستلقى اهتماما وترحيبا من إدارة الموقع. نحن نتطلع دائما إلى أن نكون بوابة الترفيه العربية الأولى من خلال بناء علاقة الثقة المتبادلة بين زائرنا وموقعنا، وتعزيز التفاعل من خلال الردود على رسائلكم. لا تتردد في إرسال ما تريد، فالتفوق طريقنا دائما منكم وإليكم.  فضلا، أرجو ملء الخانات أدناه،
      /// 
      /// Locales: ar
      static let formContactUsLabelDescription = Rswift.StringResource(key: "form.contactUs.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شكرا لمشاركتك معنا..
      /// 
      /// Locales: ar
      static let formContactUsSendOKTitle1 = Rswift.StringResource(key: "form.contactUs.sendOK.title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صفحات
      /// 
      /// Locales: ar
      static let searchResultPages = Rswift.StringResource(key: "searchResult.pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صور
      /// 
      /// Locales: ar
      static let cardTypeImage = Rswift.StringResource(key: "card.type.image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صور
      /// 
      /// Locales: ar
      static let commonLabelAlbum = Rswift.StringResource(key: "common.label.album", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صور
      /// 
      /// Locales: ar
      static let commonLabelImage = Rswift.StringResource(key: "common.label.image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صور
      /// 
      /// Locales: ar
      static let pagemenuPhotosTitle = Rswift.StringResource(key: "pagemenu.photos.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صور
      /// 
      /// Locales: ar
      static let searchResultPhotos = Rswift.StringResource(key: "searchResult.photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صور %@
      /// 
      /// Locales: ar
      static let commonLabelImageDefaultTitle = Rswift.StringResource(key: "common.label.image.defaultTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طبيعة البث
      /// 
      /// Locales: ar
      static let abouttabShowLiveRecorded = Rswift.StringResource(key: "abouttab.show.liveRecorded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طبيعة الفعالية
      /// 
      /// Locales: ar
      static let abouttabLiveRecorded = Rswift.StringResource(key: "abouttab.live/recorded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طلب اشتراك
      /// 
      /// Locales: ar
      static let appTypeCasting = Rswift.StringResource(key: "app.type.casting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عبر البريد الالكتروني
      /// 
      /// Locales: ar
      static let formPreferContactMethodByEmail = Rswift.StringResource(key: "form.preferContactMethod.byEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عبر الهاتف
      /// 
      /// Locales: ar
      static let formPreferContactMethodByPhone = Rswift.StringResource(key: "form.preferContactMethod.byPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عرض جميع النتائج
      /// 
      /// Locales: ar
      static let searchSuggestionShowAllResult = Rswift.StringResource(key: "searchSuggestion.showAllResult", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عميلنا العزيز، للإعلان على قنوات ومواقع MBC, يرجى إدخال البيانات وإرسال الطلب فضلا، نرجو ملء الخانات أدناه،
      /// 
      /// Locales: ar
      static let formAdvertisementLabelDescription = Rswift.StringResource(key: "form.advertisement.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن
      /// 
      /// Locales: ar
      static let pagemenuAboutTitle = Rswift.StringResource(key: "pagemenu.about.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن البرنامج
      /// 
      /// Locales: ar
      static let abouttabTabnameShowProgram = Rswift.StringResource(key: "abouttab.tabname.showProgram", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن الشركة
      /// 
      /// Locales: ar
      static let abouttabTabnameBusiness = Rswift.StringResource(key: "abouttab.tabname.business", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن الفرقة
      /// 
      /// Locales: ar
      static let abouttabProfilebandAbout = Rswift.StringResource(key: "abouttab.profileband.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن الفريق
      /// 
      /// Locales: ar
      static let abouttabProfilesportteamAbout = Rswift.StringResource(key: "abouttab.profilesportteam.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن الفعالية
      /// 
      /// Locales: ar
      static let abouttabTabnameEvent = Rswift.StringResource(key: "abouttab.tabname.event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن الفيلم
      /// 
      /// Locales: ar
      static let abouttabTabnameShowMovie = Rswift.StringResource(key: "abouttab.tabname.showMovie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن المباراة
      /// 
      /// Locales: ar
      static let abouttabTabnameShowMatch = Rswift.StringResource(key: "abouttab.tabname.showMatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن المسرحية
      /// 
      /// Locales: ar
      static let abouttabTabnameShowPlay = Rswift.StringResource(key: "abouttab.tabname.showPlay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن المسلسل
      /// 
      /// Locales: ar
      static let abouttabShowSeriesAbout = Rswift.StringResource(key: "abouttab.showSeries.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن المسلسل
      /// 
      /// Locales: ar
      static let abouttabTabnameShowSeries = Rswift.StringResource(key: "abouttab.tabname.showSeries", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن الموقع
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleAboutsite = Rswift.StringResource(key: "sidemenu.staticPageTitle.aboutsite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عن النشرة
      /// 
      /// Locales: ar
      static let abouttabTabnameShowNews = Rswift.StringResource(key: "abouttab.tabname.showNews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عنوان الموقع على الانترنت
      /// 
      /// Locales: ar
      static let abouttabCompanywebsite = Rswift.StringResource(key: "abouttab.companywebsite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: غدا %@
      /// 
      /// Locales: ar
      static let commonTomorrow = Rswift.StringResource(key: "common.tomorrow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: فبراير
      /// 
      /// Locales: ar
      static let monthOfBirthFeb = Rswift.StringResource(key: "monthOfBirth.Feb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: فعاليات 9
      /// 
      /// Locales: ar
      static let formSubjectEvents = Rswift.StringResource(key: "form.subject.events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static let cardTypeVideo = Rswift.StringResource(key: "card.type.video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static let pagemenuVideosTitle = Rswift.StringResource(key: "pagemenu.videos.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static let searchResultVideos = Rswift.StringResource(key: "searchResult.videos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleEpisode = Rswift.StringResource(key: "sidemenu.staticPageTitle.episode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: فئة الرقابة
      /// 
      /// Locales: ar
      static let abouttabCensorshipClass = Rswift.StringResource(key: "abouttab.censorshipClass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قائمة العروض
      /// 
      /// Locales: ar
      static let showListingTitle = Rswift.StringResource(key: "showListing.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قائمة القنوات
      /// 
      /// Locales: ar
      static let channelListingScreenTitle = Rswift.StringResource(key: "channelListing.screenTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قائمة المحتوى
      /// 
      /// Locales: ar
      static let commonVideoMenuContent = Rswift.StringResource(key: "common.video.menuContent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قائمة المشاهير
      /// 
      /// Locales: ar
      static let starPageListingTitle = Rswift.StringResource(key: "starPageListing.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قنوات
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleChannel = Rswift.StringResource(key: "sidemenu.staticPageTitle.channel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قنوات MBC 5
      /// 
      /// Locales: ar
      static let formSubjectMBCChannel = Rswift.StringResource(key: "form.subject.MBCChannel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قوائم الفيديوهات
      /// 
      /// Locales: ar
      static let commonLabelVideoplaylist = Rswift.StringResource(key: "common.label.videoplaylist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قوائم الفيديوهات
      /// 
      /// Locales: ar
      static let searchResultPlaylists = Rswift.StringResource(key: "searchResult.playlists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: قوائم منوعة
      /// 
      /// Locales: ar
      static let searchResultBundles = Rswift.StringResource(key: "searchResult.bundles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كل
      /// 
      /// Locales: ar
      static let commonFilterAllTitle = Rswift.StringResource(key: "common.filterAll.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كل %@ %@
      /// 
      /// Locales: ar
      static let commonEvery = Rswift.StringResource(key: "common.every", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كلمة السر
      /// 
      /// Locales: ar
      static let userProfileTabProfilePassword = Rswift.StringResource(key: "userProfile.tabProfile.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كويز
      /// 
      /// Locales: ar
      static let appTypeTrivia = Rswift.StringResource(key: "app.type.trivia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لا أود الحصول على العروض التروجية أو البحوث 
      /// 
      /// Locales: ar
      static let signupDontWantToGetPromotion = Rswift.StringResource(key: "signup.dontWantToGetPromotion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لزائر الكريم، وصلتنا رسالتك، وسيتم الرد عليك قريباً.
      /// 
      /// Locales: ar
      static let formAdvertisementSendOKTitle1 = Rswift.StringResource(key: "form.advertisement.sendOK.title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لغة الفيلم
      /// 
      /// Locales: ar
      static let abouttabShowlanguage = Rswift.StringResource(key: "abouttab.showlanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لقب الشهرة
      /// 
      /// Locales: ar
      static let abouttabArtistictitle = Rswift.StringResource(key: "abouttab.artistictitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لقد لاحظنا أنك لم تزر %@ منذ فترة!هناك الكثير من النشاطات التي فاتتك. لا تفوت المزيد
      /// 
      /// Locales: ar
      static let notificationMaleBody = Rswift.StringResource(key: "notification.male.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لقد لاحظنا أنك لم تزوري %@ منذ فترة!هناك الكثير من النشاطات التي فاتتك. لا تفوتي المزيد
      /// 
      /// Locales: ar
      static let notificationFemaleBody = Rswift.StringResource(key: "notification.female.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: للرجوع للصفحة الرئيسية
      /// 
      /// Locales: ar
      static let geoTargetSubTitle = Rswift.StringResource(key: "geoTarget.subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لم نطلب منك هذه المعلومات؟
      /// 
      /// Locales: ar
      static let signupWhyWeAskForInformation = Rswift.StringResource(key: "signup.whyWeAskForInformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مارس
      /// 
      /// Locales: ar
      static let monthOfBirthMar = Rswift.StringResource(key: "monthOfBirth.Mar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مايو
      /// 
      /// Locales: ar
      static let monthOfBirthMay = Rswift.StringResource(key: "monthOfBirth.May", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مباشر
      /// 
      /// Locales: ar
      static let abouttabLive = Rswift.StringResource(key: "abouttab.live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مباشر
      /// 
      /// Locales: ar
      static let cardTypeLive = Rswift.StringResource(key: "card.type.live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: متابعة
      /// 
      /// Locales: ar
      static let commonButtonFollow = Rswift.StringResource(key: "common.button.follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مترجم و مدبلج
      /// 
      /// Locales: ar
      static let abouttabSubtitlingDubbing = Rswift.StringResource(key: "abouttab.subtitlingDubbing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: متزوج
      /// 
      /// Locales: ar
      static let commonMarriedStatusMarried = Rswift.StringResource(key: "common.marriedStatus.married", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: محل الإقامة
      /// 
      /// Locales: ar
      static let abouttabShowPlaceOfResidence = Rswift.StringResource(key: "abouttab.show.placeOfResidence", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مدة الفيلم
      /// 
      /// Locales: ar
      static let abouttabDuration = Rswift.StringResource(key: "abouttab.duration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مدة الفيلم
      /// 
      /// Locales: ar
      static let abouttabDurationShowMovie = Rswift.StringResource(key: "abouttab.duration.showMovie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مدة المباراة
      /// 
      /// Locales: ar
      static let abouttabDurationShowMatch = Rswift.StringResource(key: "abouttab.duration.showMatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مدة المسرحية
      /// 
      /// Locales: ar
      static let abouttabDurationShowPlay = Rswift.StringResource(key: "abouttab.duration.showPlay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مدة النشرة
      /// 
      /// Locales: ar
      static let abouttabDurationShowNew = Rswift.StringResource(key: "abouttab.duration.showNew", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مرحباً، %@
      /// 
      /// Locales: ar
      static let notificationFemaleTitle = Rswift.StringResource(key: "notification.female.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مرحباً، %@
      /// 
      /// Locales: ar
      static let notificationMaleTitle = Rswift.StringResource(key: "notification.male.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مرحلة المهارة
      /// 
      /// Locales: ar
      static let abouttabSkilllevel = Rswift.StringResource(key: "abouttab.skilllevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مسابقات
      /// 
      /// Locales: ar
      static let appTypeCompetition = Rswift.StringResource(key: "app.type.competition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مسجلة
      /// 
      /// Locales: ar
      static let abouttabRecorded = Rswift.StringResource(key: "abouttab.recorded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مشاركات
      /// 
      /// Locales: ar
      static let cardTypePost = Rswift.StringResource(key: "card.type.post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مشاركات
      /// 
      /// Locales: ar
      static let cardTypeTextPost = Rswift.StringResource(key: "card.type.textPost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مشاهير
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleFavorite = Rswift.StringResource(key: "sidemenu.staticPageTitle.favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مطلق
      /// 
      /// Locales: ar
      static let commonMarriedStatusDivorce = Rswift.StringResource(key: "common.marriedStatus.divorce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات
      /// 
      /// Locales: ar
      static let abouttabSectionAbout = Rswift.StringResource(key: "abouttab.section.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات
      /// 
      /// Locales: ar
      static let abouttabTabnameSection = Rswift.StringResource(key: "abouttab.tabname.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن البرنامج
      /// 
      /// Locales: ar
      static let abouttabShowProgramAbout = Rswift.StringResource(key: "abouttab.showProgram.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن الجائزة
      /// 
      /// Locales: ar
      static let abouttabAwardAbout = Rswift.StringResource(key: "abouttab.award.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن الشركة
      /// 
      /// Locales: ar
      static let abouttabBusinessAbout = Rswift.StringResource(key: "abouttab.business.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن الفعالية
      /// 
      /// Locales: ar
      static let abouttabEventAbout = Rswift.StringResource(key: "abouttab.event.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن الفيلم
      /// 
      /// Locales: ar
      static let abouttabShowMovieAbout = Rswift.StringResource(key: "abouttab.showMovie.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن القناة
      /// 
      /// Locales: ar
      static let abouttabChannelAbout = Rswift.StringResource(key: "abouttab.channel.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن المبارة
      /// 
      /// Locales: ar
      static let abouttabShowMatchAbout = Rswift.StringResource(key: "abouttab.showMatch.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن المسرحية
      /// 
      /// Locales: ar
      static let abouttabShowPlayAbout = Rswift.StringResource(key: "abouttab.showPlay.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عن نشرة الاخبار
      /// 
      /// Locales: ar
      static let abouttabShowNewsAbout = Rswift.StringResource(key: "abouttab.showNews.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عنه
      /// 
      /// Locales: ar
      static let abouttabProfileAboutmale = Rswift.StringResource(key: "abouttab.profile.aboutmale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معلومات عنها
      /// 
      /// Locales: ar
      static let abouttabProfileAboutfemale = Rswift.StringResource(key: "abouttab.profile.aboutfemale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مقترحات
      /// 
      /// Locales: ar
      static let commonVideoRelated = Rswift.StringResource(key: "common.video.related", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مقترحات
      /// 
      /// Locales: ar
      static let relatedContentSectionTitle = Rswift.StringResource(key: "relatedContent.SectionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مكان الحدث
      /// 
      /// Locales: ar
      static let abouttabLocationTitle = Rswift.StringResource(key: "abouttab.locationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: من الاحدث الى الاقدم
      /// 
      /// Locales: ar
      static let commonSortingRecency = Rswift.StringResource(key: "common.sorting.recency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منج ريمايندرز
      /// 
      /// Locales: ar
      static let userProfileTabSettingTitle = Rswift.StringResource(key: "userProfile.tabSetting.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ %@ أيام،
      /// 
      /// Locales: ar
      static let commonTimestamp36Days = Rswift.StringResource(key: "common.timestamp.3-6Days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ %@ دقائق
      /// 
      /// Locales: ar
      static let commonTimestamp310Minutes = Rswift.StringResource(key: "common.timestamp.3-10Minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ %@ دقيقة
      /// 
      /// Locales: ar
      static let commonTimestamp1159Minutes = Rswift.StringResource(key: "common.timestamp.11-59Minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ %@ ساعات
      /// 
      /// Locales: ar
      static let commonTimestamp310Hours = Rswift.StringResource(key: "common.timestamp.3-10Hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ %@ ساعة
      /// 
      /// Locales: ar
      static let commonTimestamp1123Hours = Rswift.StringResource(key: "common.timestamp.11-23Hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ دقيقة
      /// 
      /// Locales: ar
      static let commonTimestampAMinute = Rswift.StringResource(key: "common.timestamp.AMinute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ دقيقتين
      /// 
      /// Locales: ar
      static let commentFlagRemove = Rswift.StringResource(key: "comment.flagRemove", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ دقيقتين
      /// 
      /// Locales: ar
      static let commonTimestamp2Minutes = Rswift.StringResource(key: "common.timestamp.2Minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ ساعة
      /// 
      /// Locales: ar
      static let commonTimestamp1Hour = Rswift.StringResource(key: "common.timestamp.1Hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ ساعتين
      /// 
      /// Locales: ar
      static let commonTimestamp2Hours = Rswift.StringResource(key: "common.timestamp.2Hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منذ يومين،
      /// 
      /// Locales: ar
      static let commonTimestamp2Days = Rswift.StringResource(key: "common.timestamp.2Days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مواعيد العرض
      /// 
      /// Locales: ar
      static let airTimeListTitle = Rswift.StringResource(key: "airTimeList.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مواليد الشهر
      /// 
      /// Locales: ar
      static let starPageListingFilterByMonthOfBirth = Rswift.StringResource(key: "starPageListing.filterByMonthOfBirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: موسيقى
      /// 
      /// Locales: ar
      static let pagemenuMusicTitle = Rswift.StringResource(key: "pagemenu.music.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: موعد بدء الفعالية
      /// 
      /// Locales: ar
      static let abouttabStartdate = Rswift.StringResource(key: "abouttab.startdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: موقع MBC 7
      /// 
      /// Locales: ar
      static let formSubjectMBCOnline = Rswift.StringResource(key: "form.subject.MBCOnline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: موقع الفعالية
      /// 
      /// Locales: ar
      static let abouttabVenueaddress = Rswift.StringResource(key: "abouttab.venueaddress ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: موقع على الانترنت
      /// 
      /// Locales: ar
      static let abouttabEventwebsite = Rswift.StringResource(key: "abouttab.eventwebsite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نادي رياضي
      /// 
      /// Locales: ar
      static let abouttabClubTeam = Rswift.StringResource(key: "abouttab.clubTeam", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نتائج البحث
      /// 
      /// Locales: ar
      static let searchResultTitle = Rswift.StringResource(key: "searchResult.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نسيت كلمة السر؟
      /// 
      /// Locales: ar
      static let loginForgotPassword = Rswift.StringResource(key: "login.forgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نص الرسالة
      /// 
      /// Locales: ar
      static let formMessageContactUs = Rswift.StringResource(key: "form.message.contactUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نطاق التغطية
      /// 
      /// Locales: ar
      static let abouttabRegions = Rswift.StringResource(key: "abouttab.regions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نعتذر! لا يوجد نتائج في هذا البحث %@
      /// 
      /// Locales: ar
      static let searchResultMessageNotFound = Rswift.StringResource(key: "searchResult.messageNotFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نوع الجنس
      /// 
      /// Locales: ar
      static let abouttabGender = Rswift.StringResource(key: "abouttab.gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نوع الرياضة
      /// 
      /// Locales: ar
      static let abouttabSporttype = Rswift.StringResource(key: "abouttab.sporttype", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نوع الفريق الرياضي
      /// 
      /// Locales: ar
      static let abouttabProfileSportTeamGender = Rswift.StringResource(key: "abouttab.profile.sportTeamGender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نوع الفريق الرياضي
      /// 
      /// Locales: ar
      static let abouttabSportteamtype = Rswift.StringResource(key: "abouttab.sportteamtype", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نوع الموسيقى
      /// 
      /// Locales: ar
      static let abouttabMusictype = Rswift.StringResource(key: "abouttab.musictype", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نوفمبر
      /// 
      /// Locales: ar
      static let monthOfBirthNov = Rswift.StringResource(key: "monthOfBirth.Nov", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: هاتف
      /// 
      /// Locales: ar
      static let abouttabEventemail = Rswift.StringResource(key: "abouttab.eventemail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: هاتف
      /// 
      /// Locales: ar
      static let abouttabPhone = Rswift.StringResource(key: "abouttab.phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: هل تعني؟
      /// 
      /// Locales: ar
      static let searchResultTitleNotFound = Rswift.StringResource(key: "searchResult.titleNotFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: و
      /// 
      /// Locales: ar
      static let commonAnd = Rswift.StringResource(key: "common.and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: وسيلة التواصل التي تفضلها
      /// 
      /// Locales: ar
      static let formPreferredContactMethod = Rswift.StringResource(key: "form.preferredContactMethod", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: وظائف شاغرة
      /// 
      /// Locales: ar
      static let sidemenuStaticPageTitleIrecruitment = Rswift.StringResource(key: "sidemenu.staticPageTitle.irecruitment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ولد في %@
      /// 
      /// Locales: ar
      static let abouttabIcMaleBorn = Rswift.StringResource(key: "abouttab.ic.male.born", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ولدت في %@
      /// 
      /// Locales: ar
      static let abouttabIcFemaleBorn = Rswift.StringResource(key: "abouttab.ic.female.born", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يتسع الموقع ل %@ شخص
      /// 
      /// Locales: ar
      static let abouttabVenuesizeformat = Rswift.StringResource(key: "abouttab.venuesizeformat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يعرض الان
      /// 
      /// Locales: ar
      static let commonNow = Rswift.StringResource(key: "common.now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يناير
      /// 
      /// Locales: ar
      static let monthOfBirthJan = Rswift.StringResource(key: "monthOfBirth.Jan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يوليو
      /// 
      /// Locales: ar
      static let monthOfBirthJul = Rswift.StringResource(key: "monthOfBirth.Jul", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يوميا %@
      /// 
      /// Locales: ar
      static let commonDaily = Rswift.StringResource(key: "common.daily", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يونيو
      /// 
      /// Locales: ar
      static let monthOfBirthJun = Rswift.StringResource(key: "monthOfBirth.Jun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      
      /// ar translation: 
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlAboutcorporate(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.aboutcorporate", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlFreequency(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.freequency", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlHd(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.hd", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation:  المزيد 
      /// 
      /// Locales: ar
      static func commonCardLinkReadMore(_: Void = ()) -> String {
        return NSLocalizedString("common.card.link.readMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation:  موعد انتهاء الفعالية
      /// 
      /// Locales: ar
      static func abouttabEnddate(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.enddate", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: %@ %@
      /// 
      /// Locales: ar
      static func commonShareTextFormat2params(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("common.shareText.format2params", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// ar translation: %@ %@ %@
      /// 
      /// Locales: ar
      static func commonShareTextFormat3params(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("common.shareText.format3params", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// ar translation: %@ - %@
      /// 
      /// Locales: ar
      static func radioSchedulerFormatSchedule(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("radioScheduler.formatSchedule", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// ar translation: %@ . استفتاءات
      /// 
      /// Locales: ar
      static func searchSuggestionPostPoll(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.poll", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ . حلاقات
      /// 
      /// Locales: ar
      static func searchSuggestionPostEpisodes(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.episodes", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ . خبر
      /// 
      /// Locales: ar
      static func searchSuggestionPostArticle(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.article", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ . رابط
      /// 
      /// Locales: ar
      static func searchSuggestionPostLink(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.link", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ . صور
      /// 
      /// Locales: ar
      static func searchSuggestionPostImages(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.images", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ . فيديوهات
      /// 
      /// Locales: ar
      static func searchSuggestionPostVideo(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.video", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ . مباشر
      /// 
      /// Locales: ar
      static func searchSuggestionPostLive(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.live", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ . مشاركات
      /// 
      /// Locales: ar
      static func searchSuggestionPostText(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.post.text", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ إعجاب
      /// 
      /// Locales: ar
      static func cardLikecountTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("card.likecount.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ تعليق
      /// 
      /// Locales: ar
      static func cardCommentcountTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("card.commentcount.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ خبر
      /// 
      /// Locales: ar
      static func bundleContentNo(_ value1: String) -> String {
        return String(format: NSLocalizedString("bundle.contentNo", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ صور
      /// 
      /// Locales: ar
      static func commonPhotoNumbers(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.photoNumbers", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ صور
      /// 
      /// Locales: ar
      static func commonPhotosTitleCount(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.photos.titleCount", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ فيديو
      /// 
      /// Locales: ar
      static func commonVideoTitleCount(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.video.titleCount", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ مشاهدة
      /// 
      /// Locales: ar
      static func cardFollowerTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("card.follower.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ من %@ الى %@
      /// 
      /// Locales: ar
      static func commonFromTo(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("common.fromTo", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// ar translation: %@-%@
      /// 
      /// Locales: ar
      static func searchSuggestionFormatMetadata(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.format.metadata", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// ar translation: %@-%@ %@
      /// 
      /// Locales: ar
      static func searchSuggestionFormatTalent(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.format.talent", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// ar translation: %@-تأسس عام
      /// 
      /// Locales: ar
      static func searchSuggestionProfileSportTeam(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchSuggestion.profile.sportTeam", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: (%@) %@
      /// 
      /// Locales: ar
      static func searchResultMenuItem(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("searchResult.menuItem", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// ar translation: .عذرا هذه الصفحة غير متاحا حاليا
      /// 
      /// Locales: ar
      static func geoTargetTitle(_: Void = ()) -> String {
        return NSLocalizedString("geoTarget.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 1 تلفزيون
      /// 
      /// Locales: ar
      static func formAdvertiseOnTV(_: Void = ()) -> String {
        return NSLocalizedString("form.advertiseOn.TV", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 2 أونلاين
      /// 
      /// Locales: ar
      static func formAdvertiseOnOnline(_: Void = ()) -> String {
        return NSLocalizedString("form.advertiseOn.online", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 3 راديو
      /// 
      /// Locales: ar
      static func formAdvertiseOnRadio(_: Void = ()) -> String {
        return NSLocalizedString("form.advertiseOn.radio", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 4 تنظيم فعاليات
      /// 
      /// Locales: ar
      static func formAdvertiseOnEvent(_: Void = ()) -> String {
        return NSLocalizedString("form.advertiseOn.event", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 5 أخرى
      /// 
      /// Locales: ar
      static func formAdvertiseOnOthers(_: Void = ()) -> String {
        return NSLocalizedString("form.advertiseOn.others", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Approved
      /// 
      /// Locales: ar
      static func commentApproved(_: Void = ()) -> String {
        return NSLocalizedString("comment.approved", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Arab Idol 11
      /// 
      /// Locales: ar
      static func formSubjectArabIdol(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.ArabIdol", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Arabs Got Talent 10
      /// 
      /// Locales: ar
      static func formSubjectArabGotTalent(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.arabGotTalent", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Awaiting for approval
      /// 
      /// Locales: ar
      static func commentPending(_: Void = ()) -> String {
        return NSLocalizedString("comment.pending", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Cancel
      /// 
      /// Locales: ar
      static func commonButtonTextCancel(_: Void = ()) -> String {
        return NSLocalizedString("common.buttonText.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Close
      /// 
      /// Locales: ar
      static func appversionButtoncloseOlder(_: Void = ()) -> String {
        return NSLocalizedString("appversion.buttonclose.older", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Coming soon.
      /// 
      /// Locales: ar
      static func commonComingSoon(_: Void = ()) -> String {
        return NSLocalizedString("common.comingSoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Data is not available!
      /// 
      /// Locales: ar
      static func errorDataNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("error.dataNotAvailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Either your email or password is wrong, please check.
      /// 
      /// Locales: ar
      static func errorInvalidLoginID(_: Void = ()) -> String {
        return NSLocalizedString("error.invalidLoginID", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Error sending comment.
      /// 
      /// Locales: ar
      static func errorSendComment(_: Void = ()) -> String {
        return NSLocalizedString("error.sendComment", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: GOBX
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleGobx(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.gobx", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Goboz
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleGoboz(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.goboz", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: HD
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleHd(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.hd", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Input password wrong many times, please reset your password.
      /// 
      /// Locales: ar
      static func errorPasswordWrongManyTimes(_: Void = ()) -> String {
        return NSLocalizedString("error.passwordWrongManyTimes", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Invalid Email Format.
      /// 
      /// Locales: ar
      static func errorEmailFormatIncorrect(_: Void = ()) -> String {
        return NSLocalizedString("error.email.formatIncorrect", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Invalid parameter value.
      /// 
      /// Locales: ar
      static func errorInvalidParameterValue(_: Void = ()) -> String {
        return NSLocalizedString("error.invalidParameterValue", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Invalid request signature
      /// 
      /// Locales: ar
      static func errorInvalidRequestSignature(_: Void = ()) -> String {
        return NSLocalizedString("error.invalidRequestSignature", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: MBC GROUP. 2018 الصفحة هنا
      /// 
      /// Locales: ar
      static func sidemenuCopyrightTitle(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.copyright.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: MBC عن مجموعة
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleAboutcorporate(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.aboutcorporate", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: MBC3
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleMbc3(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.mbc3", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Madatory update
      /// 
      /// Locales: ar
      static func appversionTitleOlder(_: Void = ()) -> String {
        return NSLocalizedString("appversion.title.older", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Message
      /// 
      /// Locales: ar
      static func commonAlertTitleMessage(_: Void = ()) -> String {
        return NSLocalizedString("common.alertTitle.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Message sent successfully
      /// 
      /// Locales: ar
      static func errorSentEmailOK(_: Void = ()) -> String {
        return NSLocalizedString("error.sentEmailOK", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: No connection. Please try again later
      /// 
      /// Locales: ar
      static func errorNoInternetConnection(_: Void = ()) -> String {
        return NSLocalizedString("error.noInternetConnection", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Not supported
      /// 
      /// Locales: ar
      static func commonAlertMessageNotSupported(_: Void = ()) -> String {
        return NSLocalizedString("common.alertMessage.notSupported", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: OK
      /// 
      /// Locales: ar
      static func commonButtonTextOk(_: Void = ()) -> String {
        return NSLocalizedString("common.buttonText.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Old password is wrong.
      /// 
      /// Locales: ar
      static func errorWrongOldPassword(_: Void = ()) -> String {
        return NSLocalizedString("error.wrongOldPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Open camera
      /// 
      /// Locales: ar
      static func commonPhotoAndCameraCamera(_: Void = ()) -> String {
        return NSLocalizedString("common.photoAndCamera.camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Open photo album
      /// 
      /// Locales: ar
      static func commonPhotoAndCameraPhotoAlbum(_: Void = ()) -> String {
        return NSLocalizedString("common.photoAndCamera.photoAlbum", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Password does not match.
      /// 
      /// Locales: ar
      static func errorPasswordsNotMatch(_: Void = ()) -> String {
        return NSLocalizedString("error.passwordsNotMatch", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Please check network connection.
      /// 
      /// Locales: ar
      static func errorNetworkError(_: Void = ()) -> String {
        return NSLocalizedString("error.networkError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Request has expired.
      /// 
      /// Locales: ar
      static func errorRequestHasExpired(_: Void = ()) -> String {
        return NSLocalizedString("error.requestHasExpired", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Resend email
      /// 
      /// Locales: ar
      static func commonButtonTextResendEmail(_: Void = ()) -> String {
        return NSLocalizedString("common.buttonText.resendEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: SHAHID
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleShahid(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.shahid", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Seems you are entering the old password, thanks to use the updated new one. If you don't remember your new password, thanks to use "Forgot Password" button.
      /// 
      /// Locales: ar
      static func errorOldPasswordUsed(_: Void = ()) -> String {
        return NSLocalizedString("error.oldPasswordUsed", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Select a option from action sheet
      /// 
      /// Locales: ar
      static func commonPhotoAndCameraTitle(_: Void = ()) -> String {
        return NSLocalizedString("common.photoAndCamera.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Sharing has failed.
      /// 
      /// Locales: ar
      static func errorSharingFailed(_: Void = ()) -> String {
        return NSLocalizedString("error.sharingFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Skip this version
      /// 
      /// Locales: ar
      static func appversionButtonskipversionNewer(_: Void = ()) -> String {
        return NSLocalizedString("appversion.buttonskipversion.newer", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Sorry, the system could not process this action at the moment. Please try again later.
      /// 
      /// Locales: ar
      static func errorServerError(_: Void = ()) -> String {
        return NSLocalizedString("error.serverError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: System under construction, please try again later.
      /// 
      /// Locales: ar
      static func errorPermissionDenied(_: Void = ()) -> String {
        return NSLocalizedString("error.permissionDenied", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: THE X FACTOR 13
      /// 
      /// Locales: ar
      static func formSubjectTheXfactor(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.theXfactor", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: The Voice 12
      /// 
      /// Locales: ar
      static func formSubjectTheVoice(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.theVoice", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: The Voice Kids 14
      /// 
      /// Locales: ar
      static func formSubjectTheVoiceKid(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.theVoiceKid", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: The inputted email has existed in system. Please try with another one.
      /// 
      /// Locales: ar
      static func errorEmailHasExisted(_: Void = ()) -> String {
        return NSLocalizedString("error.emailHasExisted", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: The inputted email has existed in system. Please try with another one.
      /// 
      /// Locales: ar
      static func errorLoginIdentifierExists(_: Void = ()) -> String {
        return NSLocalizedString("error.loginIdentifierExists", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: The new password can't be the same as the old password.
      /// 
      /// Locales: ar
      static func errorNewPassIsTheSameWithOldPass(_: Void = ()) -> String {
        return NSLocalizedString("error.newPassIsTheSameWithOldPass", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: There is an update available for you. Please update your application.
      /// 
      /// Locales: ar
      static func appversionMessageNewer(_: Void = ()) -> String {
        return NSLocalizedString("appversion.message.newer", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: There is an update available for you. Please update your application.
      /// 
      /// Locales: ar
      static func appversionMessageOlder(_: Void = ()) -> String {
        return NSLocalizedString("appversion.message.older", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: There is no user with that username or email
      /// 
      /// Locales: ar
      static func errorLoginIDDoesNotExist(_: Void = ()) -> String {
        return NSLocalizedString("error.loginIDDoesNotExist", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: There was a problem in the registration process. Please try again later.
      /// 
      /// Locales: ar
      static func errorRegistrationFail(_: Void = ()) -> String {
        return NSLocalizedString("error.registrationFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: This account has been activated. Please re-open your application and try to login.
      /// 
      /// Locales: ar
      static func errorRegisterSuccess(_: Void = ()) -> String {
        return NSLocalizedString("error.registerSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: This field is required.
      /// 
      /// Locales: ar
      static func errorFieldIsRequired(_: Void = ()) -> String {
        return NSLocalizedString("error.fieldIsRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Unknown error.
      /// 
      /// Locales: ar
      static func errorUnknownError(_: Void = ()) -> String {
        return NSLocalizedString("error.unknownError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Update
      /// 
      /// Locales: ar
      static func appversionButtonupdateNewer(_: Void = ()) -> String {
        return NSLocalizedString("appversion.buttonupdate.newer", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Update
      /// 
      /// Locales: ar
      static func appversionButtonupdateOlder(_: Void = ()) -> String {
        return NSLocalizedString("appversion.buttonupdate.older", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Update available
      /// 
      /// Locales: ar
      static func appversionTitleNewer(_: Void = ()) -> String {
        return NSLocalizedString("appversion.title.newer", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Warning
      /// 
      /// Locales: ar
      static func commonAlertTitleWarning(_: Void = ()) -> String {
        return NSLocalizedString("common.alertTitle.warning", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Yes
      /// 
      /// Locales: ar
      static func commonButtonTextYes(_: Void = ()) -> String {
        return NSLocalizedString("common.buttonText.yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: You must accept terms and conditions.
      /// 
      /// Locales: ar
      static func errorAcceptTermsRequired(_: Void = ()) -> String {
        return NSLocalizedString("error.acceptTermsRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Your account is still not verified, please check your email and done for verification. Or you can click on the button "Resend email" to get another verification email.
      /// 
      /// Locales: ar
      static func errorAccountPendingVerification(_: Void = ()) -> String {
        return NSLocalizedString("error.accountPendingVerification", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Your account is temporary blocked by admin, please contact <MBC Email> to guide how to unblock your account.
      /// 
      /// Locales: ar
      static func errorAccountIsBlocked(_: Void = ()) -> String {
        return NSLocalizedString("error.accountIsBlocked", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Your account is temporary disable, please contact <MBC Email> to guide how to activate your account.
      /// 
      /// Locales: ar
      static func errorAccountDisabled(_: Void = ()) -> String {
        return NSLocalizedString("error.accountDisabled ", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Your comment is now in the mode %@. Are you sure you want to remove your comment? Please be noted this action would not undo.
      /// 
      /// Locales: ar
      static func commentConfirmDelete(_ value1: String) -> String {
        return String(format: NSLocalizedString("comment.confirmDelete", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: Your email is still not verified, please check your email and done for verification. Or you can click on the button "Resend email" to get another verification email.
      /// 
      /// Locales: ar
      static func errorEmailNotVerified(_: Void = ()) -> String {
        return NSLocalizedString("error.emailNotVerified", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Your password must be 8 characters and contain at least letters and numbers.
      /// 
      /// Locales: ar
      static func errorPasswordFormatIncorrect(_: Void = ()) -> String {
        return NSLocalizedString("error.password.formatIncorrect", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Your phone number is max 20 characters and can contain "+,;*#( )"
      /// 
      /// Locales: ar
      static func errorPhoneNumberFormatIncorrect(_: Void = ()) -> String {
        return NSLocalizedString("error.phoneNumber.formatIncorrect", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: http://mbc3.mbc.net/?_ga=2.85041433.1047654935.1517480255-346288543.1502296377
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlMbc3(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.mbc3", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: http://www.gobx.com/ar/
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlGobx(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.gobx", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: http://www.mbc.net/ar/about-mbc.html
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlAboutsite(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.aboutsite", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: http://www.mbc.net/ar/corporate/csr.html
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlMbccsr(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.mbccsr", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: http://www.mbc.net/ar/privacy.html
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlPrivacy(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.privacy", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: http://www.mbc.net/ar/terms-and-conditions.html
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlTos(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.tos", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: https://irec.mbc.net/OA_HTML/RF.jsp?function_id=14296&resp_id=23350&resp_appl_id=800&security_group_id=0&lang_code=US&oas=ysGnSuLHzvMDXVgd_dWWrA..&params=evsN.OvwbEJ4gfmq9ULFp5iQCFONl9ej27ORBi9sBBiVCQGxHw15QneR8h2D4cNt
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlIrecruitment(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.irecruitment", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: https://shahid.mbc.net/ar/
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlShahid(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.shahid", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: https://www.goboz.net/#!
      /// 
      /// Locales: ar
      static func sidemenuStaticPageUrlGoboz(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageUrl.goboz", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: male
      /// 
      /// Locales: ar
      static func searchSuggestionGenderMale(_: Void = ()) -> String {
        return NSLocalizedString("searchSuggestion.gender.male", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ابجدي أ - ي
      /// 
      /// Locales: ar
      static func commonSortingAscending(_: Void = ()) -> String {
        return NSLocalizedString("common.sorting.ascending", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ابجدي ي - أ
      /// 
      /// Locales: ar
      static func commonSortingDescending(_: Void = ()) -> String {
        return NSLocalizedString("common.sorting.descending", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ابحث في الاقلام، المسلسلات، البرامج والمشاهير
      /// 
      /// Locales: ar
      static func commonSearchBarSearchModePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("common.searchBar.searchMode.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ابديت يوزر ذاتا
      /// 
      /// Locales: ar
      static func userProfileTabProfileTitle(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اتصل بن
      /// 
      /// Locales: ar
      static func formContactUsLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("form.contactUs.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اتصل بنا
      /// 
      /// Locales: ar
      static func formContactUsTitle(_: Void = ()) -> String {
        return NSLocalizedString("form.contactUs.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اتصل بنا
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleContactus(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.contactus", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اخبار
      /// 
      /// Locales: ar
      static func searchResultArticles(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.articles", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اخرى
      /// 
      /// Locales: ar
      static func appTypeOther(_: Void = ()) -> String {
        return NSLocalizedString("app.type.other", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اذاعة MBC 6
      /// 
      /// Locales: ar
      static func formSubjectMBCRadios(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.MBCRadios", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ارسل
      /// 
      /// Locales: ar
      static func commonButtonSend(_: Void = ()) -> String {
        return NSLocalizedString("common.button.send", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: استرجاع كلمة السر
      /// 
      /// Locales: ar
      static func loginRetrieve_password(_: Void = ()) -> String {
        return NSLocalizedString("login.retrieve_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: استفتاءات
      /// 
      /// Locales: ar
      static func cardTypePoll(_: Void = ()) -> String {
        return NSLocalizedString("card.type.poll", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: استفسار عن فاتورة 3
      /// 
      /// Locales: ar
      static func formSubjectBillingInquiry(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.billingInquiry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: استفسار عن مسابقة 2
      /// 
      /// Locales: ar
      static func formSubjectCompetitionInquiry(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.competitionInquiry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: استفسار من فائز 1
      /// 
      /// Locales: ar
      static func formSubjectWinnerInquiry(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.winnerInquiry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم
      /// 
      /// Locales: ar
      static func abouttabTitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم الجائزة
      /// 
      /// Locales: ar
      static func abouttabAwardTitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.awardTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم الشهرة
      /// 
      /// Locales: ar
      static func abouttabPlayernickname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.playernickname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم الصفحة هنا
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleDummy(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.dummy", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم الفعالية
      /// 
      /// Locales: ar
      static func abouttabEventname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.eventname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم الفعالية
      /// 
      /// Locales: ar
      static func abouttabEventseasontitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.eventseasontitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم القناة
      /// 
      /// Locales: ar
      static func abouttabChannelname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.channelname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم المدرب
      /// 
      /// Locales: ar
      static func abouttabCoachname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.coachname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم الملعب
      /// 
      /// Locales: ar
      static func abouttabStadiumname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.stadiumname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم الموقع
      /// 
      /// Locales: ar
      static func abouttabVenuename(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.venuename", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اسم كابتن الفريق
      /// 
      /// Locales: ar
      static func abouttabTeamcaptainname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.teamcaptainname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اضغط على الرابط التالي لاسترجاع كلمة السر
      /// 
      /// Locales: ar
      static func loginClick_link_retrieve_password(_: Void = ()) -> String {
        return NSLocalizedString("login.click_link_retrieve_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اضغط هنا
      /// 
      /// Locales: ar
      static func geoTargetButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("geoTarget.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اعلن معنا
      /// 
      /// Locales: ar
      static func formAdvertisementLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("form.advertisement.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اقرأ المزيد
      /// 
      /// Locales: ar
      static func commentLoadMore(_: Void = ()) -> String {
        return NSLocalizedString("comment.loadMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اكتب هنا
      /// 
      /// Locales: ar
      static func formPlaceHolderWriteHere(_: Void = ()) -> String {
        return NSLocalizedString("form.placeHolder.writeHere", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاثنين
      /// 
      /// Locales: ar
      static func dayOfWeekMon(_: Void = ()) -> String {
        return NSLocalizedString("dayOfWeek.Mon", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاحد
      /// 
      /// Locales: ar
      static func dayOfWeekSun(_: Void = ()) -> String {
        return NSLocalizedString("dayOfWeek.Sun", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاربعاء
      /// 
      /// Locales: ar
      static func dayOfWeekWed(_: Void = ()) -> String {
        return NSLocalizedString("dayOfWeek.Wed", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاستخدام
      /// 
      /// Locales: ar
      static func signupUse(_: Void = ()) -> String {
        return NSLocalizedString("signup.use", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاسم
      /// 
      /// Locales: ar
      static func abouttabName(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاسم
      /// 
      /// Locales: ar
      static func formName(_: Void = ()) -> String {
        return NSLocalizedString("form.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاسم (الانجليزي)
      /// 
      /// Locales: ar
      static func abouttabEnglishtitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.englishtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاسم (العربي)
      /// 
      /// Locales: ar
      static func abouttabArabicTitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.arabicTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاسم الحقيقي
      /// 
      /// Locales: ar
      static func abouttabRealname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.realname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاسم الكامل
      /// 
      /// Locales: ar
      static func abouttabFullname(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.fullname", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاسم الكامل
      /// 
      /// Locales: ar
      static func userProfileTabProfileFullName(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.fullName", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الالبوم التالي
      /// 
      /// Locales: ar
      static func commonNextAlbumTitle(_: Void = ()) -> String {
        return NSLocalizedString("common.nextAlbumTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الاول
      /// 
      /// Locales: ar
      static func abouttabFirst(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.first", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الآن
      /// 
      /// Locales: ar
      static func commonTimestampRightnow(_: Void = ()) -> String {
        return NSLocalizedString("common.timestamp.rightnow", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الأمل MBC
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleMbccsr(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.mbccsr", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: البث المباشر
      /// 
      /// Locales: ar
      static func radioSchedulerLiveStreaming(_: Void = ()) -> String {
        return NSLocalizedString("radioScheduler.liveStreaming", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: البرج
      /// 
      /// Locales: ar
      static func abouttabHoroscope(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.horoscope", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: البريد الالكتروني
      /// 
      /// Locales: ar
      static func abouttabEmail(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: البريد الإلكتروني
      /// 
      /// Locales: ar
      static func formEmail(_: Void = ()) -> String {
        return NSLocalizedString("form.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: البريد الإلكتروني
      /// 
      /// Locales: ar
      static func userProfileTabProfileEmail(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: البلد
      /// 
      /// Locales: ar
      static func abouttabCountry(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.country", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: البومات
      /// 
      /// Locales: ar
      static func commonLabelAlbums(_: Void = ()) -> String {
        return NSLocalizedString("common.label.albums", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: التالي
      /// 
      /// Locales: ar
      static func commonVideoNextItem(_: Void = ()) -> String {
        return NSLocalizedString("common.video.nextItem", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: التصنيف
      /// 
      /// Locales: ar
      static func abouttabGenre(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.genre", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: التصنيفات
      /// 
      /// Locales: ar
      static func showListingFilterByGenre(_: Void = ()) -> String {
        return NSLocalizedString("showListing.filterByGenre", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: التعليقات
      /// 
      /// Locales: ar
      static func commentTitle(_: Void = ()) -> String {
        return NSLocalizedString("comment.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الثلاثاء
      /// 
      /// Locales: ar
      static func dayOfWeekTue(_: Void = ()) -> String {
        return NSLocalizedString("dayOfWeek.Tue", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء
      /// 
      /// Locales: ar
      static func abouttabSequelNumber(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.sequelNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء %@
      /// 
      /// Locales: ar
      static func abouttabIcSequelNumber(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.sequelNumber", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: الجزء الاول
      /// 
      /// Locales: ar
      static func sequelNumberOne(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.one", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء التاسع
      /// 
      /// Locales: ar
      static func sequelNumberNine(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.nine", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء التاسع عشر
      /// 
      /// Locales: ar
      static func sequelNumberNineteen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.nineteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الثالث
      /// 
      /// Locales: ar
      static func sequelNumberThree(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.three", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الثالث عشر
      /// 
      /// Locales: ar
      static func sequelNumberThriteen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.thriteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الثامن
      /// 
      /// Locales: ar
      static func sequelNumberEight(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.eight", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الثامن عشر
      /// 
      /// Locales: ar
      static func sequelNumberEighteen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.eighteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الثاني
      /// 
      /// Locales: ar
      static func sequelNumberTwo(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.two", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الثاني عشر
      /// 
      /// Locales: ar
      static func sequelNumberTwelve(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.twelve", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الحادي عسر
      /// 
      /// Locales: ar
      static func sequelNumberElevent(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.elevent", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الخامس
      /// 
      /// Locales: ar
      static func sequelNumberFive(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.five", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الخامس عشر
      /// 
      /// Locales: ar
      static func sequelNumberFifteen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.fifteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الرابع
      /// 
      /// Locales: ar
      static func sequelNumberFour(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.four", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء الرابع عشر
      /// 
      /// Locales: ar
      static func sequelNumberFourteen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.fourteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء السابع
      /// 
      /// Locales: ar
      static func sequelNumberSeven(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.seven", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء السابع عشر
      /// 
      /// Locales: ar
      static func sequelNumberSeventeen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.seventeen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء السادس
      /// 
      /// Locales: ar
      static func sequelNumberSix(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.six", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء السادس عشر
      /// 
      /// Locales: ar
      static func sequelNumberSixteen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.sixteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء العاشر
      /// 
      /// Locales: ar
      static func sequelNumberTen(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.ten", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجزء العشرون
      /// 
      /// Locales: ar
      static func sequelNumberTwenty(_: Void = ()) -> String {
        return NSLocalizedString("sequelNumber.twenty", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجمعة
      /// 
      /// Locales: ar
      static func dayOfWeekFri(_: Void = ()) -> String {
        return NSLocalizedString("dayOfWeek.Fri", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجنس
      /// 
      /// Locales: ar
      static func formGender(_: Void = ()) -> String {
        return NSLocalizedString("form.gender", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجنس
      /// 
      /// Locales: ar
      static func userProfileTabProfileGender(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.gender", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجنسية
      /// 
      /// Locales: ar
      static func abouttabNationality(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.nationality", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجنسية
      /// 
      /// Locales: ar
      static func userProfileTabProfileNationality(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.nationality", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الجنسية %@
      /// 
      /// Locales: ar
      static func abouttabIcNationality(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.nationality", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: الحالة الإجتماعية
      /// 
      /// Locales: ar
      static func userProfileTabProfileMarriedStatus(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.marriedStatus", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الخاص بكMBCحساب
      /// 
      /// Locales: ar
      static func loginTitle(_: Void = ()) -> String {
        return NSLocalizedString("login.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الخميس
      /// 
      /// Locales: ar
      static func dayOfWeekThu(_: Void = ()) -> String {
        return NSLocalizedString("dayOfWeek.Thu", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الدولة
      /// 
      /// Locales: ar
      static func userProfileTabProfileCountry(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.country", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الرجاء إدخال البريد الإلكتروني لإسترجاع كلمة السر
      /// 
      /// Locales: ar
      static func forgotpassSubTitle1(_: Void = ()) -> String {
        return NSLocalizedString("forgotpass.subTitle1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الرجاء إدخال البيانات التالية
      /// 
      /// Locales: ar
      static func signupSubTitle(_: Void = ()) -> String {
        return NSLocalizedString("signup.subTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الرجاء تفعيل حسابك
      /// 
      /// Locales: ar
      static func emailVerificationTitle(_: Void = ()) -> String {
        return NSLocalizedString("emailVerification.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الرئيسية
      /// 
      /// Locales: ar
      static func pagemenuNewsfeedTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.newsfeed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: السبت
      /// 
      /// Locales: ar
      static func dayOfWeekSat(_: Void = ()) -> String {
        return NSLocalizedString("dayOfWeek.Sat", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: السنة
      /// 
      /// Locales: ar
      static func abouttabEventyear(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.eventyear", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الشركة
      /// 
      /// Locales: ar
      static func formCompany(_: Void = ()) -> String {
        return NSLocalizedString("form.company", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الضيف
      /// 
      /// Locales: ar
      static func abouttabProfileGuestMale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.guestMale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الضيفة
      /// 
      /// Locales: ar
      static func abouttabProfileGuestFemale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.guestFemale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الطلب
      /// 
      /// Locales: ar
      static func formMessageAdvertisement(_: Void = ()) -> String {
        return NSLocalizedString("form.message.advertisement", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الطول
      /// 
      /// Locales: ar
      static func abouttabHeight(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.height", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: العاب
      /// 
      /// Locales: ar
      static func appTypeGame(_: Void = ()) -> String {
        return NSLocalizedString("app.type.game", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: العب الان
      /// 
      /// Locales: ar
      static func appCtaButtonGame(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.game", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: العروض
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleTv(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.tv", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: العمر
      /// 
      /// Locales: ar
      static func abouttabAge(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.age", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: العمر %@
      /// 
      /// Locales: ar
      static func abouttabIcAge(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.age", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: العنوان
      /// 
      /// Locales: ar
      static func formAddress(_: Void = ()) -> String {
        return NSLocalizedString("form.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: العنوان
      /// 
      /// Locales: ar
      static func userProfileTabProfileAddress(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الفرقة
      /// 
      /// Locales: ar
      static func abouttabProfileBandGender(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.bandGender", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الفعاليات
      /// 
      /// Locales: ar
      static func abouttabEventtype(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.eventtype", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: القنوات
      /// 
      /// Locales: ar
      static func radioSchedulerSubChanelTitle(_: Void = ()) -> String {
        return NSLocalizedString("radioScheduler.subChanelTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الكل
      /// 
      /// Locales: ar
      static func searchResultAll(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.all", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اللاعب
      /// 
      /// Locales: ar
      static func abouttabProfileSportPlayerMale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.sportPlayerMale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اللاعبة
      /// 
      /// Locales: ar
      static func abouttabProfileSportPlayerFemale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.sportPlayerFemale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اللغة
      /// 
      /// Locales: ar
      static func abouttabLanguage(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.language", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اللهجة
      /// 
      /// Locales: ar
      static func abouttabDialect(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.dialect", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الليلة %@
      /// 
      /// Locales: ar
      static func commonTonight(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.tonight", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: المدينة
      /// 
      /// Locales: ar
      static func abouttabCity(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.city", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: المدينة
      /// 
      /// Locales: ar
      static func userProfileTabProfileCity(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.city", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: المركز الرئيسي
      /// 
      /// Locales: ar
      static func abouttabHqcountry(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.hqcountry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: المزيد
      /// 
      /// Locales: ar
      static func pagemenuOtherTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.other.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: المشترك
      /// 
      /// Locales: ar
      static func abouttabProfileTalentMale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.talentMale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: المشتركة
      /// 
      /// Locales: ar
      static func abouttabProfileTalentFemale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.talentFemale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: المنتخب الوطني
      /// 
      /// Locales: ar
      static func abouttabNationalTeam(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.nationalTeam", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: المهنة
      /// 
      /// Locales: ar
      static func starPageListingFilterByOccupation(_: Void = ()) -> String {
        return NSLocalizedString("starPageListing.filterByOccupation", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم
      /// 
      /// Locales: ar
      static func abouttabSeasion(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.seasion", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم
      /// 
      /// Locales: ar
      static func abouttabSeason(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.season", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم %@
      /// 
      /// Locales: ar
      static func abouttabIcSeasonNumber(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.seasonNumber", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: الموسم الاول
      /// 
      /// Locales: ar
      static func seasonNumberOne(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.one", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم التاسع
      /// 
      /// Locales: ar
      static func seasonNumberNine(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.nine", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم التاسع عشر
      /// 
      /// Locales: ar
      static func seasonNumberNineteen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.nineteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الثالث
      /// 
      /// Locales: ar
      static func seasonNumberThree(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.three", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الثالث عشر
      /// 
      /// Locales: ar
      static func seasonNumberThriteen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.thriteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الثامن
      /// 
      /// Locales: ar
      static func seasonNumberEight(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.eight", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الثامن عشر
      /// 
      /// Locales: ar
      static func seasonNumberEighteen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.eighteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الثاني
      /// 
      /// Locales: ar
      static func seasonNumberTwo(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.two", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الثاني عشر
      /// 
      /// Locales: ar
      static func seasonNumberTwelve(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.twelve", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الحادي عسر
      /// 
      /// Locales: ar
      static func seasonNumberElevent(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.elevent", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الخامس
      /// 
      /// Locales: ar
      static func seasonNumberFive(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.five", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الخامس عشر
      /// 
      /// Locales: ar
      static func seasonNumberFifteen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.fifteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الرابع
      /// 
      /// Locales: ar
      static func seasonNumberFour(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.four", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم الرابع عشر
      /// 
      /// Locales: ar
      static func seasonNumberFourteen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.fourteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم السابع
      /// 
      /// Locales: ar
      static func seasonNumberSeven(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.seven", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم السابع عشر
      /// 
      /// Locales: ar
      static func seasonNumberSeventeen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.seventeen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم السادس
      /// 
      /// Locales: ar
      static func seasonNumberSix(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.six", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم السادس عشر
      /// 
      /// Locales: ar
      static func seasonNumberSixteen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.sixteen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم العاشر
      /// 
      /// Locales: ar
      static func seasonNumberTen(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.ten", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموسم العشرون
      /// 
      /// Locales: ar
      static func seasonNumberTwenty(_: Void = ()) -> String {
        return NSLocalizedString("seasonNumber.twenty", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الموضوع
      /// 
      /// Locales: ar
      static func formSubject(_: Void = ()) -> String {
        return NSLocalizedString("form.subject", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: النجم
      /// 
      /// Locales: ar
      static func abouttabProfileStarMale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.starMale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: النجمة
      /// 
      /// Locales: ar
      static func abouttabProfileStarFemale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.starFemale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: النوع
      /// 
      /// Locales: ar
      static func showListingFilterBySubType(_: Void = ()) -> String {
        return NSLocalizedString("showListing.filterBySubType", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الهاتف
      /// 
      /// Locales: ar
      static func formPhone(_: Void = ()) -> String {
        return NSLocalizedString("form.phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الوزن
      /// 
      /// Locales: ar
      static func abouttabWeight(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.weight", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: الوظيفة
      /// 
      /// Locales: ar
      static func abouttabOccupation(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.occupation", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: اليوم %@
      /// 
      /// Locales: ar
      static func commonToday(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.today", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: انتاج (البلد)
      /// 
      /// Locales: ar
      static func abouttabMovieCountry(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.movieCountry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أبريل
      /// 
      /// Locales: ar
      static func monthOfBirthApr(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Apr", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أدخل الاسم الكامل
      /// 
      /// Locales: ar
      static func signupEnterFullnamePlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("signup.enterFullname.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أدخل البريد الإلكتروني
      /// 
      /// Locales: ar
      static func commonEmailPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("common.email.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أدخل كلمة السر
      /// 
      /// Locales: ar
      static func commonPasswordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("common.password.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أدخل كلمة السر الحالية
      /// 
      /// Locales: ar
      static func userProfileTabProfileOldPasswordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.oldPassword.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أرسل البريد الإلكتروني مرة آخرى
      /// 
      /// Locales: ar
      static func emailVerificationSendEmailAgain(_: Void = ()) -> String {
        return NSLocalizedString("emailVerification.sendEmailAgain", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أرسل البريد الإلكتروني مرة آخرى
      /// 
      /// Locales: ar
      static func forgotpassResendEmail(_: Void = ()) -> String {
        return NSLocalizedString("forgotpass.resendEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أرسل الرابط 
      /// 
      /// Locales: ar
      static func forgotpassResetPassword(_: Void = ()) -> String {
        return NSLocalizedString("forgotpass.resetPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أرمل
      /// 
      /// Locales: ar
      static func commonMarriedStatusWidow(_: Void = ()) -> String {
        return NSLocalizedString("common.marriedStatus.widow", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أشار الى
      /// 
      /// Locales: ar
      static func taggedPageListingTitle(_: Void = ()) -> String {
        return NSLocalizedString("taggedPageListing.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أضف تعليقك
      /// 
      /// Locales: ar
      static func ipadCommentSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("ipad.comment.sendButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أضف تعليقك هنا
      /// 
      /// Locales: ar
      static func commentInputMessagePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("comment.inputMessage.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أعزب
      /// 
      /// Locales: ar
      static func commonMarriedStatusSingle(_: Void = ()) -> String {
        return NSLocalizedString("common.marriedStatus.single", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أعلن على
      /// 
      /// Locales: ar
      static func formAdvertiseOn(_: Void = ()) -> String {
        return NSLocalizedString("form.advertiseOn", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أعلن معنا
      /// 
      /// Locales: ar
      static func formAdvertisementTitle(_: Void = ()) -> String {
        return NSLocalizedString("form.advertisement.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أعلن معنا
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleAdvertise(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.advertise", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أغسطس
      /// 
      /// Locales: ar
      static func monthOfBirthAug(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Aug", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أقبل بشروط الاستخدام و سياسة الخصوصية
      /// 
      /// Locales: ar
      static func signupAcceptTermsAndPrivacy(_: Void = ()) -> String {
        return NSLocalizedString("signup.acceptTermsAndPrivacy", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أكتوبر
      /// 
      /// Locales: ar
      static func monthOfBirthOct(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Oct", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أمس،
      /// 
      /// Locales: ar
      static func commonTimestamp1Day(_: Void = ()) -> String {
        return NSLocalizedString("common.timestamp.1Day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: أنثى
      /// 
      /// Locales: ar
      static func commonButtonFemale(_: Void = ()) -> String {
        return NSLocalizedString("common.button.female", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: إسترجاع كلمة السر
      /// 
      /// Locales: ar
      static func forgotpassTitle1(_: Void = ()) -> String {
        return NSLocalizedString("forgotpass.title1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: إضافة
      /// 
      /// Locales: ar
      static func commentSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("comment.sendButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: إضافةاكتب تعليقك هنا
      /// 
      /// Locales: ar
      static func ipadCommentInputMessagePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("ipad.comment.inputMessage.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: إعلان
      /// 
      /// Locales: ar
      static func adsTitle(_: Void = ()) -> String {
        return NSLocalizedString("ads.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: إلغاء
      /// 
      /// Locales: ar
      static func commonSearchBarCancel(_: Void = ()) -> String {
        return NSLocalizedString("common.searchBar.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: إهتمامات
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleInterest(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.interest", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: بث مباشر
      /// 
      /// Locales: ar
      static func appTypeLivePost(_: Void = ()) -> String {
        return NSLocalizedString("app.type.livePost", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: بحث
      /// 
      /// Locales: ar
      static func commonSearchBarPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("common.searchBar.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: برج %@
      /// 
      /// Locales: ar
      static func abouttabIcHoroscope(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.horoscope", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: بندل سبسكرايب
      /// 
      /// Locales: ar
      static func userProfileTabActivityLogTitle(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabActivityLog.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: بيانات قد تهمك
      /// 
      /// Locales: ar
      static func abouttabMetadataAreaTitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.metadataAreaTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تابعونا الان
      /// 
      /// Locales: ar
      static func appCtaButtonLivePost(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.livePost", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تاريخ العرض الاول
      /// 
      /// Locales: ar
      static func abouttabYearDebuted(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.yearDebuted", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تاريخ الميلاد
      /// 
      /// Locales: ar
      static func abouttabDateofbirth(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.dateofbirth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تاريخ الميلاد
      /// 
      /// Locales: ar
      static func signupEnterDateOfBirthPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("signup.enterDateOfBirth.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تاريخ الميلاد
      /// 
      /// Locales: ar
      static func userProfileTabProfileBirthday(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.birthday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تاريخ الوفاة
      /// 
      /// Locales: ar
      static func abouttabRipdate(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.ripdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تاسس عام
      /// 
      /// Locales: ar
      static func abouttabYearestablished(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.yearestablished", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تاسست عام
      /// 
      /// Locales: ar
      static func abouttabFounded(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.founded", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تأسس عام
      /// 
      /// Locales: ar
      static func pagedetailHeaderEstablishedYearSportTeam(_: Void = ()) -> String {
        return NSLocalizedString("pagedetail.header.establishedYearSportTeam", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تأسست عام
      /// 
      /// Locales: ar
      static func pagedetailHeaderEstablishedYearBand(_: Void = ()) -> String {
        return NSLocalizedString("pagedetail.header.establishedYearBand", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تأكيد كلمة السر
      /// 
      /// Locales: ar
      static func signupReEnterPasswordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("signup.reEnterPassword.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تأكيد كلمة السر الجديدة
      /// 
      /// Locales: ar
      static func userProfileTabProfileRenewPasswordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.renewPassword.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تحديث
      /// 
      /// Locales: ar
      static func appupdateButtonUpdate(_: Void = ()) -> String {
        return NSLocalizedString("appupdate.button.update", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تخطی
      /// 
      /// Locales: ar
      static func appupdateButtonSkip(_: Void = ()) -> String {
        return NSLocalizedString("appupdate.button.skip", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تذكير
      /// 
      /// Locales: ar
      static func pagedetailRemindbuttonTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagedetail.remindbutton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ترتيب
      /// 
      /// Locales: ar
      static func commonSortingTitle(_: Void = ()) -> String {
        return NSLocalizedString("common.sorting.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ترددات القناة
      /// 
      /// Locales: ar
      static func abouttabChannelfrequency(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.channelfrequency", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ترددات القنوات
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleFreequency(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.freequency", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجل حساب جديد
      /// 
      /// Locales: ar
      static func signupTitle(_: Void = ()) -> String {
        return NSLocalizedString("signup.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل
      /// 
      /// Locales: ar
      static func signupSignupButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signup.signup.buttonTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static func emailVerificationLogin(_: Void = ()) -> String {
        return NSLocalizedString("emailVerification.login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static func forgotpassOpenLoginVC(_: Void = ()) -> String {
        return NSLocalizedString("forgotpass.openLoginVC", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static func loginLoginByEmail(_: Void = ()) -> String {
        return NSLocalizedString("login.loginByEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل الدخول
      /// 
      /// Locales: ar
      static func signupBackToLogin(_: Void = ()) -> String {
        return NSLocalizedString("signup.backToLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل الدخول عن طريق فيسبوك
      /// 
      /// Locales: ar
      static func loginLoginByFacebook(_: Void = ()) -> String {
        return NSLocalizedString("login.loginByFacebook", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل حساب جديد
      /// 
      /// Locales: ar
      static func loginEmailRegistration(_: Void = ()) -> String {
        return NSLocalizedString("login.emailRegistration", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل حساب عن طرق فيسبوك
      /// 
      /// Locales: ar
      static func signupSignupWithFacebookButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signup.signupWithFacebook.buttonTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تسجيل خروج
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleSignout(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.signout", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تصفح
      /// 
      /// Locales: ar
      static func sidemenuGroupTitleStatic(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.groupTitle.static", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تصنيف المحتوى
      /// 
      /// Locales: ar
      static func sidemenuGroupTitleFeaturePage(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.groupTitle.featurePage", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تصويت
      /// 
      /// Locales: ar
      static func appTypeVoting(_: Void = ()) -> String {
        return NSLocalizedString("app.type.voting", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تطبيق
      /// 
      /// Locales: ar
      static func cardTypeApp(_: Void = ()) -> String {
        return NSLocalizedString("card.type.app", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تطبيقات
      /// 
      /// Locales: ar
      static func pagemenuAppsTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.apps.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تطبيقات
      /// 
      /// Locales: ar
      static func searchResultApps(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.apps", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تطبيقات الجوال
      /// 
      /// Locales: ar
      static func appTypeMobileApp(_: Void = ()) -> String {
        return NSLocalizedString("app.type.mobileApp", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تطبيقات و العاب
      /// 
      /// Locales: ar
      static func appListingTitle(_: Void = ()) -> String {
        return NSLocalizedString("appListing.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تطبيقات ومسابقات
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleAppsGames(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.appsGames", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تعديل
      /// 
      /// Locales: ar
      static func commonAvatarStatus(_: Void = ()) -> String {
        return NSLocalizedString("common.avatar.status", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تعديل البيانات
      /// 
      /// Locales: ar
      static func userProfileTitle(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تعليق عام 4
      /// 
      /// Locales: ar
      static func formSubjectGeneralFeedback(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.generalFeedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تعمل في قطاع
      /// 
      /// Locales: ar
      static func abouttabIndustry(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.industry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تعمل في مجال
      /// 
      /// Locales: ar
      static func abouttabSubindustry(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.subindustry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تقام الفعالية في الدول التالية
      /// 
      /// Locales: ar
      static func abouttabEventCountry(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.event.country", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تقام الفعالية في المدن التالية
      /// 
      /// Locales: ar
      static func abouttabEventCity(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.event.city", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تم إرسال بريد إلكتروني يحتوي على رابط لإعادة ضبط كلمة السر
      /// 
      /// Locales: ar
      static func forgotpassSubTitle2(_: Void = ()) -> String {
        return NSLocalizedString("forgotpass.subTitle2", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تم إرسال بريد إلكتروني يحتوي على رابط لتفعيل الحساب
      /// 
      /// Locales: ar
      static func emailVerificationSubTitle(_: Void = ()) -> String {
        return NSLocalizedString("emailVerification.subTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تم إسال الرابط
      /// 
      /// Locales: ar
      static func forgotpassTitle2(_: Void = ()) -> String {
        return NSLocalizedString("forgotpass.title2", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: توقيت الفعالية
      /// 
      /// Locales: ar
      static func abouttabTime(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.time", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: تيار الأخبار
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleStream(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.stream", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static func pagedetailFollowbuttonTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagedetail.followbutton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static func pagemenuScheduleTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.schedule.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static func radioSchedulerSubScheduleTitle(_: Void = ()) -> String {
        return NSLocalizedString("radioScheduler.subScheduleTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static func sidemenuNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: جدول البرامج
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleSchedule(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.schedule", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: جويل
      /// 
      /// Locales: ar
      static func homeStreamAuthor(_: Void = ()) -> String {
        return NSLocalizedString("homeStream.author", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: حجم الموقع
      /// 
      /// Locales: ar
      static func abouttabVenuesize(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.venuesize", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: حدد صفحة التصبيق
      /// 
      /// Locales: ar
      static func appListingFilterByAuthor(_: Void = ()) -> String {
        return NSLocalizedString("appListing.filterByAuthor", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: حدد نوع التطبيق
      /// 
      /// Locales: ar
      static func appListingFilterByAppType(_: Void = ()) -> String {
        return NSLocalizedString("appListing.filterByAppType", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: حذف
      /// 
      /// Locales: ar
      static func searchSuggestionDeleteTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchSuggestion.delete.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: حسابات وروابط
      /// 
      /// Locales: ar
      static func abouttabSocialNetwoksAreaTitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.socialNetwoksAreaTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: حمل التطبيق الان
      /// 
      /// Locales: ar
      static func appCtaButtonMobileApp(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.mobileApp", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: خبر
      /// 
      /// Locales: ar
      static func cardTypeArticle(_: Void = ()) -> String {
        return NSLocalizedString("card.type.article", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: خدمات الSMS 8
      /// 
      /// Locales: ar
      static func formSubjectSMSServices(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.SMSServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: دخل كلمة السر الجديدة
      /// 
      /// Locales: ar
      static func userProfileTabProfileNewPasswordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.newPassword.placeHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ديسمبر
      /// 
      /// Locales: ar
      static func monthOfBirthDec(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Dec", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ذكر
      /// 
      /// Locales: ar
      static func commonButtonMale(_: Void = ()) -> String {
        return NSLocalizedString("common.button.male", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: رابط
      /// 
      /// Locales: ar
      static func cardTypeLink(_: Void = ()) -> String {
        return NSLocalizedString("card.type.link", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: رقم التصويت
      /// 
      /// Locales: ar
      static func abouttabVotingnumber(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.votingnumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: رقم المشترك
      /// 
      /// Locales: ar
      static func pagedetailHeaderVotingformale(_: Void = ()) -> String {
        return NSLocalizedString("pagedetail.header.votingformale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: رقم المشتركة
      /// 
      /// Locales: ar
      static func pagedetailHeaderVotingforfemale(_: Void = ()) -> String {
        return NSLocalizedString("pagedetail.header.votingforfemale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: رقم الهاتف
      /// 
      /// Locales: ar
      static func userProfileTabProfilePhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.phoneNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: سبتمبر
      /// 
      /// Locales: ar
      static func monthOfBirthSep(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Sep", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: سجل البحث
      /// 
      /// Locales: ar
      static func searchSuggestionHistoryTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchSuggestion.history.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: سجل الدخول بحساب MBC الخاص بك
      /// 
      /// Locales: ar
      static func loginSubTitle(_: Void = ()) -> String {
        return NSLocalizedString("login.subTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: سوف نولى رسالتك أقصى اهتمامنا مع الأخذ بعين الاعتبار ضغط الرسائل الواردة إلينا
      /// 
      /// Locales: ar
      static func formContactUsSendOKTitle2(_: Void = ()) -> String {
        return NSLocalizedString("form.contactUs.sendOK.title2", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: سياسة الخصوصية
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitlePrivacy(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.privacy", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: سياسة الخصوصية
      /// 
      /// Locales: ar
      static func signupPrivacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("signup.privacyPolicy", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static func appCtaButtonCasting(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.casting", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static func appCtaButtonCompetition(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.competition", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static func appCtaButtonOther(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.other", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static func appCtaButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static func appCtaButtonTrivia(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.trivia", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شارك الان
      /// 
      /// Locales: ar
      static func appCtaButtonVoting(_: Void = ()) -> String {
        return NSLocalizedString("app.ctaButton.voting", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شاهد الحلقات
      /// 
      /// Locales: ar
      static func cardTypeEpisodes(_: Void = ()) -> String {
        return NSLocalizedString("card.type.episodes", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شاهد الحلقات
      /// 
      /// Locales: ar
      static func pagemenuEpisodesTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.episodes.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شبكات
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleNetworks(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.networks", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شخصية %@
      /// 
      /// Locales: ar
      static func abouttabIcCharacter(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.character", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: شروط الاستخدام
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleTos(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.tos", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شكرا لزيارتكم موقعنا. نرحب برسائلكم وأسئلتكم واقتراحاتكم التي ستلقى اهتماما وترحيبا من إدارة الموقع. نحن نتطلع دائما إلى أن نكون بوابة الترفيه العربية الأولى من خلال بناء علاقة الثقة المتبادلة بين زائرنا وموقعنا، وتعزيز التفاعل من خلال الردود على رسائلكم. لا تتردد في إرسال ما تريد، فالتفوق طريقنا دائما منكم وإليكم.  فضلا، أرجو ملء الخانات أدناه،
      /// 
      /// Locales: ar
      static func formContactUsLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("form.contactUs.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: شكرا لمشاركتك معنا..
      /// 
      /// Locales: ar
      static func formContactUsSendOKTitle1(_: Void = ()) -> String {
        return NSLocalizedString("form.contactUs.sendOK.title1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: صفحات
      /// 
      /// Locales: ar
      static func searchResultPages(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.pages", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: صور
      /// 
      /// Locales: ar
      static func cardTypeImage(_: Void = ()) -> String {
        return NSLocalizedString("card.type.image", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: صور
      /// 
      /// Locales: ar
      static func commonLabelAlbum(_: Void = ()) -> String {
        return NSLocalizedString("common.label.album", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: صور
      /// 
      /// Locales: ar
      static func commonLabelImage(_: Void = ()) -> String {
        return NSLocalizedString("common.label.image", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: صور
      /// 
      /// Locales: ar
      static func pagemenuPhotosTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.photos.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: صور
      /// 
      /// Locales: ar
      static func searchResultPhotos(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.photos", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: صور %@
      /// 
      /// Locales: ar
      static func commonLabelImageDefaultTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.label.image.defaultTitle", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: طبيعة البث
      /// 
      /// Locales: ar
      static func abouttabShowLiveRecorded(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.show.liveRecorded", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: طبيعة الفعالية
      /// 
      /// Locales: ar
      static func abouttabLiveRecorded(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.live/recorded", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: طلب اشتراك
      /// 
      /// Locales: ar
      static func appTypeCasting(_: Void = ()) -> String {
        return NSLocalizedString("app.type.casting", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عبر البريد الالكتروني
      /// 
      /// Locales: ar
      static func formPreferContactMethodByEmail(_: Void = ()) -> String {
        return NSLocalizedString("form.preferContactMethod.byEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عبر الهاتف
      /// 
      /// Locales: ar
      static func formPreferContactMethodByPhone(_: Void = ()) -> String {
        return NSLocalizedString("form.preferContactMethod.byPhone", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عرض جميع النتائج
      /// 
      /// Locales: ar
      static func searchSuggestionShowAllResult(_: Void = ()) -> String {
        return NSLocalizedString("searchSuggestion.showAllResult", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عميلنا العزيز، للإعلان على قنوات ومواقع MBC, يرجى إدخال البيانات وإرسال الطلب فضلا، نرجو ملء الخانات أدناه،
      /// 
      /// Locales: ar
      static func formAdvertisementLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("form.advertisement.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن
      /// 
      /// Locales: ar
      static func pagemenuAboutTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.about.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن البرنامج
      /// 
      /// Locales: ar
      static func abouttabTabnameShowProgram(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.showProgram", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن الشركة
      /// 
      /// Locales: ar
      static func abouttabTabnameBusiness(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.business", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن الفرقة
      /// 
      /// Locales: ar
      static func abouttabProfilebandAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profileband.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن الفريق
      /// 
      /// Locales: ar
      static func abouttabProfilesportteamAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profilesportteam.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن الفعالية
      /// 
      /// Locales: ar
      static func abouttabTabnameEvent(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.event", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن الفيلم
      /// 
      /// Locales: ar
      static func abouttabTabnameShowMovie(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.showMovie", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن المباراة
      /// 
      /// Locales: ar
      static func abouttabTabnameShowMatch(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.showMatch", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن المسرحية
      /// 
      /// Locales: ar
      static func abouttabTabnameShowPlay(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.showPlay", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن المسلسل
      /// 
      /// Locales: ar
      static func abouttabShowSeriesAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.showSeries.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن المسلسل
      /// 
      /// Locales: ar
      static func abouttabTabnameShowSeries(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.showSeries", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن الموقع
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleAboutsite(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.aboutsite", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عن النشرة
      /// 
      /// Locales: ar
      static func abouttabTabnameShowNews(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.showNews", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: عنوان الموقع على الانترنت
      /// 
      /// Locales: ar
      static func abouttabCompanywebsite(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.companywebsite", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: غدا %@
      /// 
      /// Locales: ar
      static func commonTomorrow(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.tomorrow", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: فبراير
      /// 
      /// Locales: ar
      static func monthOfBirthFeb(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Feb", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: فعاليات 9
      /// 
      /// Locales: ar
      static func formSubjectEvents(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.events", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static func cardTypeVideo(_: Void = ()) -> String {
        return NSLocalizedString("card.type.video", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static func pagemenuVideosTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.videos.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static func searchResultVideos(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.videos", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: فيديوهات
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleEpisode(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.episode", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: فئة الرقابة
      /// 
      /// Locales: ar
      static func abouttabCensorshipClass(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.censorshipClass", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قائمة العروض
      /// 
      /// Locales: ar
      static func showListingTitle(_: Void = ()) -> String {
        return NSLocalizedString("showListing.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قائمة القنوات
      /// 
      /// Locales: ar
      static func channelListingScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("channelListing.screenTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قائمة المحتوى
      /// 
      /// Locales: ar
      static func commonVideoMenuContent(_: Void = ()) -> String {
        return NSLocalizedString("common.video.menuContent", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قائمة المشاهير
      /// 
      /// Locales: ar
      static func starPageListingTitle(_: Void = ()) -> String {
        return NSLocalizedString("starPageListing.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قنوات
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleChannel(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.channel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قنوات MBC 5
      /// 
      /// Locales: ar
      static func formSubjectMBCChannel(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.MBCChannel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قوائم الفيديوهات
      /// 
      /// Locales: ar
      static func commonLabelVideoplaylist(_: Void = ()) -> String {
        return NSLocalizedString("common.label.videoplaylist", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قوائم الفيديوهات
      /// 
      /// Locales: ar
      static func searchResultPlaylists(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.playlists", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: قوائم منوعة
      /// 
      /// Locales: ar
      static func searchResultBundles(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.bundles", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: كل
      /// 
      /// Locales: ar
      static func commonFilterAllTitle(_: Void = ()) -> String {
        return NSLocalizedString("common.filterAll.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: كل %@ %@
      /// 
      /// Locales: ar
      static func commonEvery(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("common.every", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// ar translation: كلمة السر
      /// 
      /// Locales: ar
      static func userProfileTabProfilePassword(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabProfile.password", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: كويز
      /// 
      /// Locales: ar
      static func appTypeTrivia(_: Void = ()) -> String {
        return NSLocalizedString("app.type.trivia", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: لا أود الحصول على العروض التروجية أو البحوث 
      /// 
      /// Locales: ar
      static func signupDontWantToGetPromotion(_: Void = ()) -> String {
        return NSLocalizedString("signup.dontWantToGetPromotion", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: لزائر الكريم، وصلتنا رسالتك، وسيتم الرد عليك قريباً.
      /// 
      /// Locales: ar
      static func formAdvertisementSendOKTitle1(_: Void = ()) -> String {
        return NSLocalizedString("form.advertisement.sendOK.title1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: لغة الفيلم
      /// 
      /// Locales: ar
      static func abouttabShowlanguage(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.showlanguage", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: لقب الشهرة
      /// 
      /// Locales: ar
      static func abouttabArtistictitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.artistictitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: لقد لاحظنا أنك لم تزر %@ منذ فترة!هناك الكثير من النشاطات التي فاتتك. لا تفوت المزيد
      /// 
      /// Locales: ar
      static func notificationMaleBody(_ value1: String) -> String {
        return String(format: NSLocalizedString("notification.male.body", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: لقد لاحظنا أنك لم تزوري %@ منذ فترة!هناك الكثير من النشاطات التي فاتتك. لا تفوتي المزيد
      /// 
      /// Locales: ar
      static func notificationFemaleBody(_ value1: String) -> String {
        return String(format: NSLocalizedString("notification.female.body", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: للرجوع للصفحة الرئيسية
      /// 
      /// Locales: ar
      static func geoTargetSubTitle(_: Void = ()) -> String {
        return NSLocalizedString("geoTarget.subTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: لم نطلب منك هذه المعلومات؟
      /// 
      /// Locales: ar
      static func signupWhyWeAskForInformation(_: Void = ()) -> String {
        return NSLocalizedString("signup.whyWeAskForInformation", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مارس
      /// 
      /// Locales: ar
      static func monthOfBirthMar(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Mar", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مايو
      /// 
      /// Locales: ar
      static func monthOfBirthMay(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.May", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مباشر
      /// 
      /// Locales: ar
      static func abouttabLive(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.live", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مباشر
      /// 
      /// Locales: ar
      static func cardTypeLive(_: Void = ()) -> String {
        return NSLocalizedString("card.type.live", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: متابعة
      /// 
      /// Locales: ar
      static func commonButtonFollow(_: Void = ()) -> String {
        return NSLocalizedString("common.button.follow", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مترجم و مدبلج
      /// 
      /// Locales: ar
      static func abouttabSubtitlingDubbing(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.subtitlingDubbing", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: متزوج
      /// 
      /// Locales: ar
      static func commonMarriedStatusMarried(_: Void = ()) -> String {
        return NSLocalizedString("common.marriedStatus.married", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: محل الإقامة
      /// 
      /// Locales: ar
      static func abouttabShowPlaceOfResidence(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.show.placeOfResidence", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مدة الفيلم
      /// 
      /// Locales: ar
      static func abouttabDuration(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.duration", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مدة الفيلم
      /// 
      /// Locales: ar
      static func abouttabDurationShowMovie(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.duration.showMovie", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مدة المباراة
      /// 
      /// Locales: ar
      static func abouttabDurationShowMatch(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.duration.showMatch", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مدة المسرحية
      /// 
      /// Locales: ar
      static func abouttabDurationShowPlay(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.duration.showPlay", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مدة النشرة
      /// 
      /// Locales: ar
      static func abouttabDurationShowNew(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.duration.showNew", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مرحباً، %@
      /// 
      /// Locales: ar
      static func notificationFemaleTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("notification.female.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: مرحباً، %@
      /// 
      /// Locales: ar
      static func notificationMaleTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("notification.male.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: مرحلة المهارة
      /// 
      /// Locales: ar
      static func abouttabSkilllevel(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.skilllevel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مسابقات
      /// 
      /// Locales: ar
      static func appTypeCompetition(_: Void = ()) -> String {
        return NSLocalizedString("app.type.competition", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مسجلة
      /// 
      /// Locales: ar
      static func abouttabRecorded(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.recorded", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مشاركات
      /// 
      /// Locales: ar
      static func cardTypePost(_: Void = ()) -> String {
        return NSLocalizedString("card.type.post", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مشاركات
      /// 
      /// Locales: ar
      static func cardTypeTextPost(_: Void = ()) -> String {
        return NSLocalizedString("card.type.textPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مشاهير
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleFavorite(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.favorite", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مطلق
      /// 
      /// Locales: ar
      static func commonMarriedStatusDivorce(_: Void = ()) -> String {
        return NSLocalizedString("common.marriedStatus.divorce", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات
      /// 
      /// Locales: ar
      static func abouttabSectionAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.section.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات
      /// 
      /// Locales: ar
      static func abouttabTabnameSection(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.tabname.section", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن البرنامج
      /// 
      /// Locales: ar
      static func abouttabShowProgramAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.showProgram.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن الجائزة
      /// 
      /// Locales: ar
      static func abouttabAwardAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.award.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن الشركة
      /// 
      /// Locales: ar
      static func abouttabBusinessAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.business.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن الفعالية
      /// 
      /// Locales: ar
      static func abouttabEventAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.event.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن الفيلم
      /// 
      /// Locales: ar
      static func abouttabShowMovieAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.showMovie.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن القناة
      /// 
      /// Locales: ar
      static func abouttabChannelAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.channel.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن المبارة
      /// 
      /// Locales: ar
      static func abouttabShowMatchAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.showMatch.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن المسرحية
      /// 
      /// Locales: ar
      static func abouttabShowPlayAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.showPlay.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عن نشرة الاخبار
      /// 
      /// Locales: ar
      static func abouttabShowNewsAbout(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.showNews.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عنه
      /// 
      /// Locales: ar
      static func abouttabProfileAboutmale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.aboutmale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: معلومات عنها
      /// 
      /// Locales: ar
      static func abouttabProfileAboutfemale(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.aboutfemale", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مقترحات
      /// 
      /// Locales: ar
      static func commonVideoRelated(_: Void = ()) -> String {
        return NSLocalizedString("common.video.related", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مقترحات
      /// 
      /// Locales: ar
      static func relatedContentSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("relatedContent.SectionTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مكان الحدث
      /// 
      /// Locales: ar
      static func abouttabLocationTitle(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.locationTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: من الاحدث الى الاقدم
      /// 
      /// Locales: ar
      static func commonSortingRecency(_: Void = ()) -> String {
        return NSLocalizedString("common.sorting.recency", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: منج ريمايندرز
      /// 
      /// Locales: ar
      static func userProfileTabSettingTitle(_: Void = ()) -> String {
        return NSLocalizedString("userProfile.tabSetting.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: منذ %@ أيام،
      /// 
      /// Locales: ar
      static func commonTimestamp36Days(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.timestamp.3-6Days", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: منذ %@ دقائق
      /// 
      /// Locales: ar
      static func commonTimestamp310Minutes(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.timestamp.3-10Minutes", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: منذ %@ دقيقة
      /// 
      /// Locales: ar
      static func commonTimestamp1159Minutes(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.timestamp.11-59Minutes", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: منذ %@ ساعات
      /// 
      /// Locales: ar
      static func commonTimestamp310Hours(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.timestamp.3-10Hours", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: منذ %@ ساعة
      /// 
      /// Locales: ar
      static func commonTimestamp1123Hours(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.timestamp.11-23Hours", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: منذ دقيقة
      /// 
      /// Locales: ar
      static func commonTimestampAMinute(_: Void = ()) -> String {
        return NSLocalizedString("common.timestamp.AMinute", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: منذ دقيقتين
      /// 
      /// Locales: ar
      static func commentFlagRemove(_: Void = ()) -> String {
        return NSLocalizedString("comment.flagRemove", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: منذ دقيقتين
      /// 
      /// Locales: ar
      static func commonTimestamp2Minutes(_: Void = ()) -> String {
        return NSLocalizedString("common.timestamp.2Minutes", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: منذ ساعة
      /// 
      /// Locales: ar
      static func commonTimestamp1Hour(_: Void = ()) -> String {
        return NSLocalizedString("common.timestamp.1Hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: منذ ساعتين
      /// 
      /// Locales: ar
      static func commonTimestamp2Hours(_: Void = ()) -> String {
        return NSLocalizedString("common.timestamp.2Hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: منذ يومين،
      /// 
      /// Locales: ar
      static func commonTimestamp2Days(_: Void = ()) -> String {
        return NSLocalizedString("common.timestamp.2Days", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مواعيد العرض
      /// 
      /// Locales: ar
      static func airTimeListTitle(_: Void = ()) -> String {
        return NSLocalizedString("airTimeList.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: مواليد الشهر
      /// 
      /// Locales: ar
      static func starPageListingFilterByMonthOfBirth(_: Void = ()) -> String {
        return NSLocalizedString("starPageListing.filterByMonthOfBirth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: موسيقى
      /// 
      /// Locales: ar
      static func pagemenuMusicTitle(_: Void = ()) -> String {
        return NSLocalizedString("pagemenu.music.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: موعد بدء الفعالية
      /// 
      /// Locales: ar
      static func abouttabStartdate(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.startdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: موقع MBC 7
      /// 
      /// Locales: ar
      static func formSubjectMBCOnline(_: Void = ()) -> String {
        return NSLocalizedString("form.subject.MBCOnline", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: موقع الفعالية
      /// 
      /// Locales: ar
      static func abouttabVenueaddress(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.venueaddress ", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: موقع على الانترنت
      /// 
      /// Locales: ar
      static func abouttabEventwebsite(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.eventwebsite", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نادي رياضي
      /// 
      /// Locales: ar
      static func abouttabClubTeam(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.clubTeam", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نتائج البحث
      /// 
      /// Locales: ar
      static func searchResultTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نسيت كلمة السر؟
      /// 
      /// Locales: ar
      static func loginForgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("login.forgotPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نص الرسالة
      /// 
      /// Locales: ar
      static func formMessageContactUs(_: Void = ()) -> String {
        return NSLocalizedString("form.message.contactUs", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نطاق التغطية
      /// 
      /// Locales: ar
      static func abouttabRegions(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.regions", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نعتذر! لا يوجد نتائج في هذا البحث %@
      /// 
      /// Locales: ar
      static func searchResultMessageNotFound(_ value1: String) -> String {
        return String(format: NSLocalizedString("searchResult.messageNotFound", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: نوع الجنس
      /// 
      /// Locales: ar
      static func abouttabGender(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.gender", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نوع الرياضة
      /// 
      /// Locales: ar
      static func abouttabSporttype(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.sporttype", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نوع الفريق الرياضي
      /// 
      /// Locales: ar
      static func abouttabProfileSportTeamGender(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.profile.sportTeamGender", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نوع الفريق الرياضي
      /// 
      /// Locales: ar
      static func abouttabSportteamtype(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.sportteamtype", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نوع الموسيقى
      /// 
      /// Locales: ar
      static func abouttabMusictype(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.musictype", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: نوفمبر
      /// 
      /// Locales: ar
      static func monthOfBirthNov(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Nov", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: هاتف
      /// 
      /// Locales: ar
      static func abouttabEventemail(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.eventemail", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: هاتف
      /// 
      /// Locales: ar
      static func abouttabPhone(_: Void = ()) -> String {
        return NSLocalizedString("abouttab.phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: هل تعني؟
      /// 
      /// Locales: ar
      static func searchResultTitleNotFound(_: Void = ()) -> String {
        return NSLocalizedString("searchResult.titleNotFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: و
      /// 
      /// Locales: ar
      static func commonAnd(_: Void = ()) -> String {
        return NSLocalizedString("common.and", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: وسيلة التواصل التي تفضلها
      /// 
      /// Locales: ar
      static func formPreferredContactMethod(_: Void = ()) -> String {
        return NSLocalizedString("form.preferredContactMethod", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: وظائف شاغرة
      /// 
      /// Locales: ar
      static func sidemenuStaticPageTitleIrecruitment(_: Void = ()) -> String {
        return NSLocalizedString("sidemenu.staticPageTitle.irecruitment", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ولد في %@
      /// 
      /// Locales: ar
      static func abouttabIcMaleBorn(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.male.born", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: ولدت في %@
      /// 
      /// Locales: ar
      static func abouttabIcFemaleBorn(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.ic.female.born", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: يتسع الموقع ل %@ شخص
      /// 
      /// Locales: ar
      static func abouttabVenuesizeformat(_ value1: String) -> String {
        return String(format: NSLocalizedString("abouttab.venuesizeformat", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: يعرض الان
      /// 
      /// Locales: ar
      static func commonNow(_: Void = ()) -> String {
        return NSLocalizedString("common.now", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: يناير
      /// 
      /// Locales: ar
      static func monthOfBirthJan(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Jan", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: يوليو
      /// 
      /// Locales: ar
      static func monthOfBirthJul(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Jul", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: يوميا %@
      /// 
      /// Locales: ar
      static func commonDaily(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.daily", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: يونيو
      /// 
      /// Locales: ar
      static func monthOfBirthJun(_: Void = ()) -> String {
        return NSLocalizedString("monthOfBirth.Jun", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _IPadPageCardCell.validate()
      try _SignupViewController.validate()
      try _SpecificChannelScheduleFilterDayView.validate()
      try _ArticleHeaderCell.validate()
      try _IPadEpisodeCell.validate()
      try _UserProfileAddressCell.validate()
      try _PostImageCell.validate()
      try _AvatarFullScreenView.validate()
      try _EmailVerificationViewController.validate()
      try _DropdownFormCell.validate()
      try _RadioChannelViewController.validate()
      try _LoadingNextAlbumView.validate()
      try _VideoPlaylistCarouselItemView.validate()
      try _VideoLiveStreamingCell.validate()
      try _ArticleParagraphImageCell.validate()
      try _BundleSingleItemCell.validate()
      try _VideoFullscreenLandscapeView.validate()
      try _IPadBundleSingleItemCell.validate()
      try _AirTimeCell.validate()
      try _FilterDaysChannelView.validate()
      try _IPadVideoPlaylistNextItemCell.validate()
      try _LoginViewController.validate()
      try _SearchSuggestionCell.validate()
      try _VideoPlaylistTableViewCell.validate()
      try _VideoFullscreenLoadingNextView.validate()
      try _PlaylistSearchResultCell.validate()
      try _MenuProfileCell.validate()
      try _FullScreenAdsView.validate()
      try _ChannelTableViewCell.validate()
      try _FollowView.validate()
      try _PlaylistCarouselCollectionViewCell.validate()
      try _NotificationFormCell.validate()
      try _BundleHeaderView.validate()
      try _SchedulerDaySelectionCell.validate()
      try _CommentViewCell.validate()
      try _CommentViewController.validate()
      try _VideoSingleItemCell.validate()
      try _EpisodeHeaderCell.validate()
      try _IPadBundleSingleItemInforCollectionViewCell.validate()
      try _CardImageItemCollectionViewCell.validate()
      try _EpisodeCell.validate()
      try _EpisodePageTabCell.validate()
      try _SpecificChannelScheduleViewController.validate()
      try _ProfileHeaderCell.validate()
      try _UserProfileCell.validate()
      try _ArticleVideoCell.validate()
      try _UserProfileGenderCell.validate()
      try _RadioGroupFormCell.validate()
      try _SearchResultEmpty.validate()
      try _ForgotPasswordViewController.validate()
      try _AppUpgradeViewController.validate()
      try _BundleSingleItemInforCollectionViewCell.validate()
      try _PageCardCell.validate()
      try _ImageFormCell.validate()
      try _UserProfileChangePasswordCell.validate()
      try _LikeCommentShareView.validate()
    }
    
    struct _AboutTabAboutCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AboutTabAboutCell
      
      let bundle = R.hostingBundle
      let identifier = "AboutTabAboutCell"
      let name = "AboutTabAboutCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutTabAboutCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTabAboutCell
      }
      
      fileprivate init() {}
    }
    
    struct _AboutTabLocationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AboutTabLocationCell
      
      let bundle = R.hostingBundle
      let identifier = "AboutTabLocationCell"
      let name = "AboutTabLocationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutTabLocationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTabLocationCell
      }
      
      fileprivate init() {}
    }
    
    struct _AboutTabMetadataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AboutTabMetadataCell
      
      let bundle = R.hostingBundle
      let identifier = "AboutTabMetadataCell"
      let name = "AboutTabMetadataCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutTabMetadataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTabMetadataCell
      }
      
      fileprivate init() {}
    }
    
    struct _AboutTabMetadataView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AboutTabMetadataView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutTabMetadataView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTabMetadataView
      }
      
      fileprivate init() {}
    }
    
    struct _AboutTabSocialNetworksCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AboutTabSocialNetworksCell
      
      let bundle = R.hostingBundle
      let identifier = "AboutTabSocialNetworksCell"
      let name = "AboutTabSocialNetworksCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutTabSocialNetworksCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTabSocialNetworksCell
      }
      
      fileprivate init() {}
    }
    
    struct _ActivityCardView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ActivityCardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AirTimeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AirTimeCell
      
      let bundle = R.hostingBundle
      let identifier = "AirTimeCellId"
      let name = "AirTimeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AirTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AirTimeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.pagedetail.clockAdd", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pagedetail.clockAdd' is used in nib 'AirTimeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:iEV-et-8u0:backgroundImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:iEV-et-8u0:backgroundImage' is used in nib 'AirTimeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AirTimeListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AirTimeListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AppCardTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AppCardTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AppCardTableViewCellid"
      let name = "AppCardTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppCardTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AppCarouselItemView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AppCarouselItemView
      
      let bundle = R.hostingBundle
      let identifier = "AppCarouselItemView"
      let name = "AppCarouselItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppCarouselItemView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppCarouselItemView
      }
      
      fileprivate init() {}
    }
    
    struct _AppHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AppHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "AppHeaderCell"
      let name = "AppHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _AppListingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AppListingCell
      
      let bundle = R.hostingBundle
      let identifier = "AppListingCell"
      let name = "AppListingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppListingCell
      }
      
      fileprivate init() {}
    }
    
    struct _AppUpgradeViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppUpgradeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background.appupgrade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background.appupgrade' is used in nib 'AppUpgradeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo.mbcGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo.mbcGray' is used in nib 'AppUpgradeViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AppWhitePageTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AppWhitePageTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AppWhitePageTableViewCell"
      let name = "AppWhitePageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppWhitePageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppWhitePageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleEmbeddedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArticleEmbeddedCell
      
      let bundle = R.hostingBundle
      let identifier = "ArticleEmbeddedCell"
      let name = "ArticleEmbeddedCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleEmbeddedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleEmbeddedCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ArticleHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "ArticleHeaderCell"
      let name = "ArticleHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.homestream.tag-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.tag-outline' is used in nib 'ArticleHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleParagraphImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ArticleParagraphImageCell
      
      let bundle = R.hostingBundle
      let identifier = "ArticleParagraphImageCell"
      let name = "ArticleParagraphImageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleParagraphImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleParagraphImageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.homestream.tag-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.tag-outline' is used in nib 'ArticleParagraphImageCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleParagraphTextCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArticleParagraphTextCell
      
      let bundle = R.hostingBundle
      let identifier = "ArticleParagraphTextCell"
      let name = "ArticleParagraphTextCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleParagraphTextCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleParagraphTextCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleVideoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ArticleVideoCell
      
      let bundle = R.hostingBundle
      let identifier = "ArticleVideoCell"
      let name = "ArticleVideoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleVideoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleVideoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.homestream.tag-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.tag-outline' is used in nib 'ArticleVideoCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AvatarFullScreenView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AvatarFullScreenView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.pagedetail.heartremove", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pagedetail.heartremove' is used in nib 'AvatarFullScreenView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BannerAdsViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BannerAdsViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BannerAdsViewCell"
      let name = "BannerAdsViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BannerAdsViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BannerAdsViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BundleCarouselCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BundleCarouselCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BundleCarouselCollectionViewCell"
      let name = "BundleCarouselCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BundleCarouselCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BundleCarouselCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BundleContentViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BundleContentViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _BundleHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BundleHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.bundle.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.close' is used in nib 'BundleHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BundleSearchResultCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BundleSearchResultCell
      
      let bundle = R.hostingBundle
      let identifier = "BundleSearchResultCell"
      let name = "BundleSearchResultCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BundleSearchResultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BundleSearchResultCell
      }
      
      fileprivate init() {}
    }
    
    struct _BundleSingleItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BundleSingleItemCell
      
      let bundle = R.hostingBundle
      let identifier = "BundleSingleItemCell"
      let name = "BundleSingleItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BundleSingleItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BundleSingleItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.bundle.arrowLeft", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.arrowLeft' is used in nib 'BundleSingleItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.bundle.arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.arrowRight' is used in nib 'BundleSingleItemCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BundleSingleItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BundleSingleItemCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BundleSingleItemCollectionViewCell"
      let name = "BundleSingleItemCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BundleSingleItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BundleSingleItemCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BundleSingleItemInforCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BundleSingleItemInforCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BundleSingleItemInforCollectionViewCell"
      let name = "BundleSingleItemInforCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BundleSingleItemInforCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BundleSingleItemInforCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.bundle.photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.photo' is used in nib 'BundleSingleItemInforCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CardImageItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CardImageItemCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CardImageItemCollectionViewCell.id"
      let name = "CardImageItemCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CardImageItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardImageItemCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icn_play_dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icn_play_dark' is used in nib 'CardImageItemCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CardTextCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CardTextCell
      
      let bundle = R.hostingBundle
      let identifier = "CardTextCellId"
      let name = "CardTextCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CardTextCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardTextCell
      }
      
      fileprivate init() {}
    }
    
    struct _CarouselTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CarouselTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CarouselTableViewCellid"
      let name = "CarouselTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CarouselTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CarouselTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChannelCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChannelCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ChannelCollectionViewCell"
      let name = "ChannelCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChannelCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChannelListingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChannelListingViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ChannelTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChannelTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ChannelTableViewCellId"
      let name = "ChannelTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChannelTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.leftArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.leftArrow' is used in nib 'ChannelTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.rightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.rightArrow' is used in nib 'ChannelTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CommentViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentViewCellId"
      let name = "CommentViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CommentViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.comment.remove", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.comment.remove' is used in nib 'CommentViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommentViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.navigation.arrowBackRotated", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.navigation.arrowBackRotated' is used in nib 'CommentViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ContentFilterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ContentFilterCell
      
      let bundle = R.hostingBundle
      let identifier = "ContentFilterCellId"
      let name = "ContentFilterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ContentFilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentFilterCell
      }
      
      fileprivate init() {}
    }
    
    struct _ContentPageViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ContentPageViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DropdownFormCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DropdownFormCell
      
      let bundle = R.hostingBundle
      let identifier = "DropdownFormCellId"
      let name = "DropdownFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DropdownFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DropdownFormCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.arrowGrayDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowGrayDown' is used in nib 'DropdownFormCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EmailVerificationViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmailVerificationViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.logo' is used in nib 'EmailVerificationViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EmbedHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EmbedHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "EmbedHeaderCell"
      let name = "EmbedHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmbedHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmbedHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _EmbeddedCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EmbeddedCardCell
      
      let bundle = R.hostingBundle
      let identifier = "EmbeddedCardCell"
      let name = "EmbeddedCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmbeddedCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmbeddedCardCell
      }
      
      fileprivate init() {}
    }
    
    struct _EpisodeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EpisodeCell
      
      let bundle = R.hostingBundle
      let identifier = "EpisodeCell"
      let name = "EpisodeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EpisodeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EpisodeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.shahidEmbedded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.shahidEmbedded' is used in nib 'EpisodeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.playShahid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.playShahid' is used in nib 'EpisodeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EpisodeHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EpisodeHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "EpisodeHeaderCell"
      let name = "EpisodeHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EpisodeHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EpisodeHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.shahidEmbedded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.shahidEmbedded' is used in nib 'EpisodeHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.playShahid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.playShahid' is used in nib 'EpisodeHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EpisodePageTabCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EpisodePageTabCell
      
      let bundle = R.hostingBundle
      let identifier = "EpisodePageTabCell"
      let name = "EpisodePageTabCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EpisodePageTabCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EpisodePageTabCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.shahidEmbedded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.shahidEmbedded' is used in nib 'EpisodePageTabCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.playShahid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.playShahid' is used in nib 'EpisodePageTabCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterDaysChannelView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterDaysChannelView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.arrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowDown' is used in nib 'FilterDaysChannelView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.leftArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.leftArrow' is used in nib 'FilterDaysChannelView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.rightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.rightArrow' is used in nib 'FilterDaysChannelView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FollowView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FollowView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.pagedetail.heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pagedetail.heart' is used in nib 'FollowView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ForgotPasswordViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ForgotPasswordViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.logo' is used in nib 'ForgotPasswordViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.closeRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.closeRed' is used in nib 'ForgotPasswordViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FormViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FormViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _FullScreenAdsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FullScreenAdsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.navigation.arrowBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.navigation.arrowBack' is used in nib 'FullScreenAdsView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HeaderCommentViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HeaderCommentViewCell
      
      let bundle = R.hostingBundle
      let identifier = "HeaderCommentViewCellId"
      let name = "HeaderCommentViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HeaderCommentViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HeaderCommentViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeStreamSingleItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeStreamSingleItemCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeStreamSingleItemCell"
      let name = "HomeStreamSingleItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeStreamSingleItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeStreamSingleItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadAppCardTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AppCardTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadAppCardTableViewCellid"
      let name = "IPadAppCardTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppCardTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadBundleSingleItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BundleSingleItemCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadBundleSingleItemCellId"
      let name = "IPadBundleSingleItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BundleSingleItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BundleSingleItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.bundle.arrowLeft", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.arrowLeft' is used in nib 'IPadBundleSingleItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.bundle.arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.arrowRight' is used in nib 'IPadBundleSingleItemCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _IPadBundleSingleItemInforCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BundleSingleItemInforCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadBundleSingleItemInforCollectionViewCellId"
      let name = "IPadBundleSingleItemInforCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BundleSingleItemInforCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BundleSingleItemInforCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.bundle.photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.photo' is used in nib 'IPadBundleSingleItemInforCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _IPadEmbeddedCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EmbeddedCardCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadEmbeddedCardCellid"
      let name = "IPadEmbeddedCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmbeddedCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmbeddedCardCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadEpisodeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EpisodeCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadEpisodeCell"
      let name = "IPadEpisodeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EpisodeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EpisodeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.shahidEmbedded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.shahidEmbedded' is used in nib 'IPadEpisodeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.playShahid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.playShahid' is used in nib 'IPadEpisodeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _IPadHeaderCommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HeaderCommentViewCell
      
      let bundle = R.hostingBundle
      let identifier = "iPadHeaderCommentCell"
      let name = "IPadHeaderCommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HeaderCommentViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HeaderCommentViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadHomeStreamSingleItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeStreamSingleItemCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadHomeStreamSingleItemCellId"
      let name = "IPadHomeStreamSingleItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeStreamSingleItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeStreamSingleItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadMBCLoadingPlaceHolderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IPadMBCLoadingPlaceHolderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _IPadPageCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PageCardCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadPageCardCellId"
      let name = "IPadPageCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PageCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageCardCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.pagedetail.heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pagedetail.heart' is used in nib 'IPadPageCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.arrowWhiteDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowWhiteDown' is used in nib 'IPadPageCardCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _IPadPhotoAlbumCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IPadPhotoAlbumCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadPhotoAlbumCollectionCellId"
      let name = "IPadPhotoAlbumCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IPadPhotoAlbumCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadPhotoAlbumCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadPhotoAlbumsCarouselTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IPadPhotoAlbumsCarouselTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadPhotoAlbumsCarouselTableViewCellid"
      let name = "IPadPhotoAlbumsCarouselTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IPadPhotoAlbumsCarouselTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadPhotoAlbumsCarouselTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadPhotoCollectionView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IPadPhotoCollectionView
      
      let bundle = R.hostingBundle
      let identifier = "IPadPhotoCollectionViewId"
      let name = "IPadPhotoCollectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IPadPhotoCollectionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadPhotoCollectionView
      }
      
      fileprivate init() {}
    }
    
    struct _IPadPostCardMultiImagesTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PostCardMultiImagesTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "IPadPostCardMultiImagesTableViewCellid"
      let name = "IPadPostCardMultiImagesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostCardMultiImagesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostCardMultiImagesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadTextCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IPadTextCell
      
      let bundle = R.hostingBundle
      let identifier = "iPadTextCell"
      let name = "IPadTextCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IPadTextCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadTextCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadVideoPlaylistDescriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IPadVideoPlaylistDescriptionCell
      
      let bundle = R.hostingBundle
      let identifier = "iPadVideoPlaylistDescriptionCell"
      let name = "IPadVideoPlaylistDescriptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IPadVideoPlaylistDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadVideoPlaylistDescriptionCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadVideoPlaylistHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IPadVideoPlaylistHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "iPadVideoPlaylistHeaderCell"
      let name = "IPadVideoPlaylistHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IPadVideoPlaylistHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadVideoPlaylistHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadVideoPlaylistNextItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = IPadVideoPlaylistNextItemCell
      
      let bundle = R.hostingBundle
      let identifier = "iPadVideoPlaylistNextItemCell"
      let name = "IPadVideoPlaylistNextItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IPadVideoPlaylistNextItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadVideoPlaylistNextItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.video.next_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.next_item' is used in nib 'IPadVideoPlaylistNextItemCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _IPadVideoPlaylistViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IPadVideoPlaylistViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ImageFormCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ImageFormCell
      
      let bundle = R.hostingBundle
      let identifier = "ImageFormCellId"
      let name = "ImageFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ImageFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageFormCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.noLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.noLogo' is used in nib 'ImageFormCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InputMessageViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = InputMessageViewCell
      
      let bundle = R.hostingBundle
      let identifier = "InputMessageViewCell"
      let name = "InputMessageViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InputMessageViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputMessageViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _InterestView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InterestView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LabelFormCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LabelFormCell
      
      let bundle = R.hostingBundle
      let identifier = "LabelFormCellId"
      let name = "LabelFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LabelFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LabelFormCell
      }
      
      fileprivate init() {}
    }
    
    struct _LikeCommentShareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LikeCommentShareView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.actionbar.like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.actionbar.like' is used in nib 'LikeCommentShareView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.actionbar.comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.actionbar.comment' is used in nib 'LikeCommentShareView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.actionbar.share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.actionbar.share' is used in nib 'LikeCommentShareView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LoadMoreCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoadMoreCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "LoadMoreCollectionViewCell"
      let name = "LoadMoreCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LoadMoreCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadMoreCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LoadMoreCommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoadMoreCommentCell
      
      let bundle = R.hostingBundle
      let identifier = "LoadMoreCommentCell"
      let name = "LoadMoreCommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LoadMoreCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadMoreCommentCell
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingNextAlbumView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoadingNextAlbumView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.camera-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.camera-solid' is used in nib 'LoadingNextAlbumView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingPlaceHolderCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoadingPlaceHolderCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "LoadingPlaceHolderCollectionViewCell"
      let name = "LoadingPlaceHolderCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LoadingPlaceHolderCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingPlaceHolderCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.eye' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.logo' is used in nib 'LoginViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MBCLoadingPlaceHolderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MBCLoadingPlaceHolderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuCell
      
      let bundle = R.hostingBundle
      let identifier = "MenuCellId"
      let name = "MenuCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuCell
      }
      
      fileprivate init() {}
    }
    
    struct _MenuProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MenuProfileCell
      
      let bundle = R.hostingBundle
      let identifier = "MenuProfileCellId"
      let name = "MenuProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MenuProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuProfileCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.avatarDefault100x100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.avatarDefault100x100' is used in nib 'MenuProfileCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NextVideoCountDownView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NextVideoCountDownView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NotificationFormCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationFormCell
      
      let bundle = R.hostingBundle
      let identifier = "NotificationFormCellId"
      let name = "NotificationFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NotificationFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationFormCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic.form.advertise.ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic.form.advertise.ok' is used in nib 'NotificationFormCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PageAppTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PageAppTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PageAppTableViewCellid"
      let name = "PageAppTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PageAppTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageAppTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PageBundleCarouselCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PageBundleCarouselCell
      
      let bundle = R.hostingBundle
      let identifier = "PageBundleCarouselCell"
      let name = "PageBundleCarouselCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PageBundleCarouselCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageBundleCarouselCell
      }
      
      fileprivate init() {}
    }
    
    struct _PageBundleCarouselCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PageBundleCarouselCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PageBundleCarouselCollectionViewCell"
      let name = "PageBundleCarouselCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PageBundleCarouselCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageBundleCarouselCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PageCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PageCardCell
      
      let bundle = R.hostingBundle
      let identifier = "PageCardCellId"
      let name = "PageCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PageCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageCardCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.pagedetail.heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pagedetail.heart' is used in nib 'PageCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.arrowWhiteDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowWhiteDown' is used in nib 'PageCardCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PageCarouselItemView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PageCarouselItemView
      
      let bundle = R.hostingBundle
      let identifier = "PageCarouselItemView"
      let name = "PageCarouselItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PageCarouselItemView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageCarouselItemView
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoAlbumICarouselItemView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoAlbumICarouselItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoAlbumsCarouselTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PhotoAlbumsCarouselTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PhotoAlbumsCarouselTableViewCellid"
      let name = "PhotoAlbumsCarouselTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoAlbumsCarouselTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoAlbumsCarouselTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoNoCustomAlbumTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PhotoNoCustomAlbumTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PhotoNoCustomAlbumTableViewCellid"
      let name = "PhotoNoCustomAlbumTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoNoCustomAlbumTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoNoCustomAlbumTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoPostTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PhotoPostTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PhotoPostTableViewCellid"
      let name = "PhotoPostTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoPostTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoPostTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PlaylistCarouselCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PlaylistCarouselCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PlaylistCarouselCollectionViewCell"
      let name = "PlaylistCarouselCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PlaylistCarouselCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlaylistCarouselCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.playlist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.playlist' is used in nib 'PlaylistCarouselCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PlaylistSearchResultCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PlaylistSearchResultCell
      
      let bundle = R.hostingBundle
      let identifier = "PlaylistSearchResultCell"
      let name = "PlaylistSearchResultCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PlaylistSearchResultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlaylistSearchResultCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.playlist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.playlist' is used in nib 'PlaylistSearchResultCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PostCardMultiImagesTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PostCardMultiImagesTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PostCardMultiImagesTableViewCellid"
      let name = "PostCardMultiImagesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostCardMultiImagesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostCardMultiImagesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PostCarouselItemView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PostCarouselItemView
      
      let bundle = R.hostingBundle
      let identifier = "PostCarouselItemView"
      let name = "PostCarouselItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostCarouselItemView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostCarouselItemView
      }
      
      fileprivate init() {}
    }
    
    struct _PostImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostImageCell
      
      let bundle = R.hostingBundle
      let identifier = "PostImageCell"
      let name = "PostImageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostImageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.homestream.tag-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.tag-outline' is used in nib 'PostImageCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PostTextCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PostTextCell
      
      let bundle = R.hostingBundle
      let identifier = "PostTextCell"
      let name = "PostTextCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostTextCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostTextCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileHeaderCellId"
      let name = "ProfileHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.avatarDefault72x107", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.avatarDefault72x107' is used in nib 'ProfileHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.profile.setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.profile.setting' is used in nib 'ProfileHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img.button.highlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img.button.highlight' is used in nib 'ProfileHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.pageMenu.about", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pageMenu.about' is used in nib 'ProfileHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.profile.activityLog", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.profile.activityLog' is used in nib 'ProfileHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RadioAdsViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RadioAdsViewCell
      
      let bundle = R.hostingBundle
      let identifier = "RadioAdsViewCell"
      let name = "RadioAdsViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RadioAdsViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioAdsViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RadioChannelViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RadioChannelViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.arrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowDown' is used in nib 'RadioChannelViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.mute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.mute' is used in nib 'RadioChannelViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.homestream.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.close' is used in nib 'RadioChannelViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.radio.play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.radio.play' is used in nib 'RadioChannelViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RadioFeedViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RadioFeedViewCell
      
      let bundle = R.hostingBundle
      let identifier = "radioFeedViewCell"
      let name = "RadioFeedViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RadioFeedViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioFeedViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RadioGroupFormCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RadioGroupFormCell
      
      let bundle = R.hostingBundle
      let identifier = "RadioGroupFormCellId"
      let name = "RadioGroupFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RadioGroupFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioGroupFormCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.unselected' is used in nib 'RadioGroupFormCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RadioSocialCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RadioSocialCell
      
      let bundle = R.hostingBundle
      let identifier = "radioSocialCell"
      let name = "RadioSocialCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RadioSocialCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioSocialCell
      }
      
      fileprivate init() {}
    }
    
    struct _RadioSocialView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RadioSocialView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RelatedContentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RelatedContentCell
      
      let bundle = R.hostingBundle
      let identifier = "RelatedContentCell"
      let name = "RelatedContentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RelatedContentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelatedContentCell
      }
      
      fileprivate init() {}
    }
    
    struct _RelatedContentSectionHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RelatedContentSectionHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "RelatedContentSectionHeaderCell"
      let name = "RelatedContentSectionHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RelatedContentSectionHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelatedContentSectionHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _ScheduleTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ScheduleTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ScheduleTableViewCellid"
      let name = "ScheduleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ScheduleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScheduleTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SchedulerDaySelectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SchedulerDaySelectionCell
      
      let bundle = R.hostingBundle
      let identifier = "SchedulerDaySelectionCellid"
      let name = "SchedulerDaySelectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SchedulerDaySelectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SchedulerDaySelectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.leftArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.leftArrow' is used in nib 'SchedulerDaySelectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.rightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.rightArrow' is used in nib 'SchedulerDaySelectionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SchedulerDaySelectionItemView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SchedulerDaySelectionItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchMenu: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchMenu"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchMenuItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchMenuItemCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchMenuItemCell"
      let name = "SearchMenuItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchMenuItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchMenuItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchResultEmpty: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchResultEmpty"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.searchresult.empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.searchresult.empty' is used in nib 'SearchResultEmpty', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchResultViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchResultViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchSuggestionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchSuggestionCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchSuggestionCellId"
      let name = "SearchSuggestionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchSuggestionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchSuggestionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.avatarDefault72x107", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.avatarDefault72x107' is used in nib 'SearchSuggestionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchSuggestionFooterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchSuggestionFooterCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchSuggestionFooterCellId"
      let name = "SearchSuggestionFooterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchSuggestionFooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchSuggestionFooterCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchSuggestionHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchSuggestionHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchSuggestionHeaderCellId"
      let name = "SearchSuggestionHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchSuggestionHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchSuggestionHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _SendMessageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SendMessageView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ShowListingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShowListingCell
      
      let bundle = R.hostingBundle
      let identifier = "ShowListingCell"
      let name = "ShowListingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShowListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowListingCell
      }
      
      fileprivate init() {}
    }
    
    struct _SignupViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignupViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.password.checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.password.checked' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.unselected' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.selected' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.signup.login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.signup.login' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.closeRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.closeRed' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.signup.calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.signup.calendar' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.eye' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.logo' is used in nib 'SignupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.ok' is used in nib 'SignupViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SocialNetworkCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SocialNetworkCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SocialNetworkCollectionViewCell"
      let name = "SocialNetworkCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SocialNetworkCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialNetworkCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SpecificChannelScheduleFilterDayView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpecificChannelScheduleFilterDayView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.leftArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.leftArrow' is used in nib 'SpecificChannelScheduleFilterDayView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.rightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.rightArrow' is used in nib 'SpecificChannelScheduleFilterDayView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SpecificChannelScheduleViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpecificChannelScheduleViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.homestream.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.close' is used in nib 'SpecificChannelScheduleViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _StarPageListingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = StarPageListingCell
      
      let bundle = R.hostingBundle
      let identifier = "StarPageListingCellId"
      let name = "StarPageListingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> StarPageListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StarPageListingCell
      }
      
      fileprivate init() {}
    }
    
    struct _TaggedPageItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TaggedPageItemCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TaggedPageItemCollectionViewCellid"
      let name = "TaggedPageItemCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TaggedPageItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaggedPageItemCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TaggedPageItemTypeFullCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TaggedPageItemTypeFullCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TaggedPageItemTypeFullCollectionViewCellid"
      let name = "TaggedPageItemTypeFullCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TaggedPageItemTypeFullCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaggedPageItemTypeFullCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TaggedPageListingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TaggedPageListingCell
      
      let bundle = R.hostingBundle
      let identifier = "TaggedPageListingCell"
      let name = "TaggedPageListingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TaggedPageListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaggedPageListingCell
      }
      
      fileprivate init() {}
    }
    
    struct _TaggedPageListingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TaggedPageListingViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TaggedPagesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TaggedPagesView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TestViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TestViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TextFieldFormCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextFieldFormCell
      
      let bundle = R.hostingBundle
      let identifier = "TextFieldFormCellId"
      let name = "TextFieldFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextFieldFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextFieldFormCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextViewFormCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextViewFormCell
      
      let bundle = R.hostingBundle
      let identifier = "TextViewFormCellId"
      let name = "TextViewFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextViewFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextViewFormCell
      }
      
      fileprivate init() {}
    }
    
    struct _TimestampAndContentTypeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimestampAndContentTypeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileAddressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserProfileAddressCell
      
      let bundle = R.hostingBundle
      let identifier = "UserProfileAddressCellId"
      let name = "UserProfileAddressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileAddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileAddressCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.close' is used in nib 'UserProfileAddressCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.arrowGrayDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowGrayDown' is used in nib 'UserProfileAddressCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.edit' is used in nib 'UserProfileAddressCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.ok' is used in nib 'UserProfileAddressCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserProfileCell
      
      let bundle = R.hostingBundle
      let identifier = "UserProfileCellId"
      let name = "UserProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.close' is used in nib 'UserProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.arrowGrayDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowGrayDown' is used in nib 'UserProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.signup.calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.signup.calendar' is used in nib 'UserProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.edit' is used in nib 'UserProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.ok' is used in nib 'UserProfileCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileChangePasswordCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserProfileChangePasswordCell
      
      let bundle = R.hostingBundle
      let identifier = "UserProfileChangePasswordCellId"
      let name = "UserProfileChangePasswordCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileChangePasswordCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileChangePasswordCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.close' is used in nib 'UserProfileChangePasswordCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.eye' is used in nib 'UserProfileChangePasswordCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.edit' is used in nib 'UserProfileChangePasswordCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.ok' is used in nib 'UserProfileChangePasswordCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileGenderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserProfileGenderCell
      
      let bundle = R.hostingBundle
      let identifier = "UserProfileGenderCellId"
      let name = "UserProfileGenderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileGenderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileGenderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.close' is used in nib 'UserProfileGenderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.unselected' is used in nib 'UserProfileGenderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.edit' is used in nib 'UserProfileGenderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.ok' is used in nib 'UserProfileGenderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _VideoBitRateView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoBitRateView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _VideoFullscreenLandscapeView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoFullscreenLandscapeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.video.mute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.mute' is used in nib 'VideoFullscreenLandscapeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.close' is used in nib 'VideoFullscreenLandscapeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.play' is used in nib 'VideoFullscreenLandscapeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.collapse_screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.collapse_screen' is used in nib 'VideoFullscreenLandscapeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.homestream.tag-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.tag-solid' is used in nib 'VideoFullscreenLandscapeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.gear' is used in nib 'VideoFullscreenLandscapeView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoFullscreenLoadingNextView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoFullscreenLoadingNextView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.replay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.replay' is used in nib 'VideoFullscreenLoadingNextView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.bundle.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.close' is used in nib 'VideoFullscreenLoadingNextView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.radio.play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.radio.play' is used in nib 'VideoFullscreenLoadingNextView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = VideoHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "VideoHeaderCell"
      let name = "VideoHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VideoHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _VideoLiveStreamingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoLiveStreamingCell
      
      let bundle = R.hostingBundle
      let identifier = "VideoLiveStreamingCell"
      let name = "VideoLiveStreamingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VideoLiveStreamingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoLiveStreamingCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.video.mute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.mute' is used in nib 'VideoLiveStreamingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.play' is used in nib 'VideoLiveStreamingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.collapse_screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.collapse_screen' is used in nib 'VideoLiveStreamingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.homestream.tag-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.tag-solid' is used in nib 'VideoLiveStreamingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.gear' is used in nib 'VideoLiveStreamingCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoPlaylistCarouselItemView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoPlaylistCarouselItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.playlist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.playlist' is used in nib 'VideoPlaylistCarouselItemView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoPlaylistTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoPlaylistTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "VideoPlaylistTableViewCellid"
      let name = "VideoPlaylistTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VideoPlaylistTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoPlaylistTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.video.mute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.mute' is used in nib 'VideoPlaylistTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.bundle.close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.bundle.close' is used in nib 'VideoPlaylistTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.play' is used in nib 'VideoPlaylistTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.collapse_screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.collapse_screen' is used in nib 'VideoPlaylistTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.homestream.tag-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.tag-solid' is used in nib 'VideoPlaylistTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.video.gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.gear' is used in nib 'VideoPlaylistTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoPlaylistViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoPlaylistViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _VideoSeekBarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoSeekBarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _VideoSingleItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoSingleItemCell
      
      let bundle = R.hostingBundle
      let identifier = "VideoSingleItemCellId"
      let name = "VideoSingleItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VideoSingleItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoSingleItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.video.unmute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.video.unmute' is used in nib 'VideoSingleItemCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoTitleFullScreenView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoTitleFullScreenView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try fullScreenPhoto.validate()
      try pageDetail.validate()
      try main.validate()
      try authentication.validate()
      try app.validate()
    }
    
    struct app: Rswift.StoryboardResourceType, Rswift.Validatable {
      let appWhitePageViewController = StoryboardViewControllerResource<AppWhitePageViewController>(identifier: "AppWhitePageViewController")
      let bundle = R.hostingBundle
      let listingViewController = StoryboardViewControllerResource<ListingViewController>(identifier: "ListingViewController")
      let name = "App"
      
      func appWhitePageViewController(_: Void = ()) -> AppWhitePageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appWhitePageViewController)
      }
      
      func listingViewController(_: Void = ()) -> ListingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.arrowDown") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowDown' is used in storyboard 'App', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.tabbar.showListing.inactive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.tabbar.showListing.inactive' is used in storyboard 'App', but couldn't be loaded.") }
        if _R.storyboard.app().listingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listingViewController' could not be loaded from storyboard 'App' as 'ListingViewController'.") }
        if _R.storyboard.app().appWhitePageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appWhitePageViewController' could not be loaded from storyboard 'App' as 'AppWhitePageViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct authentication: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Authentication"
      let signupViewController = StoryboardViewControllerResource<SignupViewController>(identifier: "SignupViewController")
      
      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func signupViewController(_: Void = ()) -> SignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.authentication().signupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupViewController' could not be loaded from storyboard 'Authentication' as 'SignupViewController'.") }
        if _R.storyboard.authentication().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'Authentication' as 'ForgotPasswordViewController'.") }
        if _R.storyboard.authentication().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Authentication' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct fullScreenPhoto: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FullScreenPhoto"
      let storyViewcontrollerFullscreenphoto = StoryboardViewControllerResource<FullScreenImagePostViewController>(identifier: "story.viewcontroller.fullscreenphoto")
      
      func storyViewcontrollerFullscreenphoto(_: Void = ()) -> FullScreenImagePostViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storyViewcontrollerFullscreenphoto)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.homestream.close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.homestream.close' is used in storyboard 'FullScreenPhoto', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.arrowGrayDown") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowGrayDown' is used in storyboard 'FullScreenPhoto', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.replay") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.replay' is used in storyboard 'FullScreenPhoto', but couldn't be loaded.") }
        if _R.storyboard.fullScreenPhoto().storyViewcontrollerFullscreenphoto() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storyViewcontrollerFullscreenphoto' could not be loaded from storyboard 'FullScreenPhoto' as 'FullScreenImagePostViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainNavigationController
      
      let bundle = R.hostingBundle
      let dashboardMainNavigationController = StoryboardViewControllerResource<MainNavigationController>(identifier: "DashboardMainNavigationController")
      let inAppBrowserViewController = StoryboardViewControllerResource<InAppBrowserViewController>(identifier: "InAppBrowserViewController")
      let menuNavigationController = StoryboardViewControllerResource<SideMenu.UISideMenuNavigationController>(identifier: "menuNavigationController")
      let name = "Main"
      let sideMenuController = StoryboardViewControllerResource<MenuViewController>(identifier: "sideMenuController")
      
      func dashboardMainNavigationController(_: Void = ()) -> MainNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardMainNavigationController)
      }
      
      func inAppBrowserViewController(_: Void = ()) -> InAppBrowserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inAppBrowserViewController)
      }
      
      func menuNavigationController(_: Void = ()) -> SideMenu.UISideMenuNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuNavigationController)
      }
      
      func sideMenuController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.tabbar.stream.inactive.pdf") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.tabbar.stream.inactive.pdf' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.tabbar.schedules.inactive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.tabbar.schedules.inactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.tabbar.videos.inactive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.tabbar.videos.inactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.tabbar.menu.inactive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.tabbar.menu.inactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.tabbar.showListing.inactive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.tabbar.showListing.inactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().sideMenuController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuController' could not be loaded from storyboard 'Main' as 'MenuViewController'.") }
        if _R.storyboard.main().dashboardMainNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardMainNavigationController' could not be loaded from storyboard 'Main' as 'MainNavigationController'.") }
        if _R.storyboard.main().inAppBrowserViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inAppBrowserViewController' could not be loaded from storyboard 'Main' as 'InAppBrowserViewController'.") }
        if _R.storyboard.main().menuNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuNavigationController' could not be loaded from storyboard 'Main' as 'SideMenu.UISideMenuNavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pageDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MBC.PageDetailViewController
      
      let bundle = R.hostingBundle
      let name = "PageDetail"
      let pageDetailViewController = StoryboardViewControllerResource<MBC.PageDetailViewController>(identifier: "PageDetailViewController")
      
      func pageDetailViewController(_: Void = ()) -> MBC.PageDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageDetailViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon.pagedetail.add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pagedetail.add' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.pagedetail.heart") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.pagedetail.heart' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img.clowds") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img.clowds' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img.button.highlight") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img.button.highlight' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.noLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.noLogo' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img.charc") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img.charc' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.arrowWhiteDown") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrowWhiteDown' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.radio.livestreaming") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.radio.livestreaming' is used in storyboard 'PageDetail', but couldn't be loaded.") }
        if _R.storyboard.pageDetail().pageDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageDetailViewController' could not be loaded from storyboard 'PageDetail' as 'MBC.PageDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
